[
  {
    "id": "id_dobesh0psi",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age\n\nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]\n\nDScond:= DScalc[filter age between 0 and 113]\n\nDSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]\n\n",
      "severity": "information",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.555Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_uuc8rf364b",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "validate",
      "expression": "# def_age_gp:\nage_gp :=  age[match(grandchild_of, person_id)]\n\n# rule_04:\nage_gp - 28 >= age\n",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.556Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_ejv2qcaaz0",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1 \n\nDSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.556Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_j5js6mej8x",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)\n\n\nDScount := DS[calc 1 as msr_count role \"MEASURE\"]\nDSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] =\nDScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)]\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.556Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_kl9ozjhui2",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), spouse-id, relation_to_head\n\nDSfilter := DS[filter relation_to_head = 4]\nDSmerge := merge(DS \"DSx\",DS \"DSy\",\n    on\n    (DSy#spouse-id = DSx#person-id and DSy#relation_to_head = 3 and DSx#relation_to_head = 4)\n    return\n    (DSx#person-id as \"person-id\"))\n\nDSnot_exists := DSfilter not_exists_in DSmerge\n\nDScount := DSnot_exists[calc 1 as \"id\" role \"identifier\"][keep (id, person_id)][aggregate count (person_id)] = 0\n",
      "severity": "information",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.556Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_x7rozln3at",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)\n\n\nDScount := DS[calc 1 as msr_count role \"MEASURE\"]\nDSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] =\nDScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)]\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.556Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_42m8e3pvtu",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "validate",
      "expression": "# rule_06:\nif (season == \"out\") price_t == price_tmin1 & quantity_t == \n    quantity_tmin1\n",
      "severity": "information",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values"
    },
    "event": {
      "time": "2017-10-24T15:20:37.556Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_p19cjb1ubm",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0\n",
      "severity": "warning",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.556Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_5dlh0z75o3",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total\nrc,z1,total := {0,0,0}\n\nFOR EVERY s1  IN DATASET mat_Rule03 (level1)\n\n   IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"\n   IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"\n\nEND\n\n\"Check relative occurrence of value 'high'\"\n\nIF z1 > total * 0.1 THEN rc := 1 END\n\nRETURN rc",
      "severity": "warning",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.556Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_sj34ggin4x",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "VTL 1.0",
      "expression": "DS=level \n \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"]\nDSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1) \n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.556Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_1nr2fjty7t",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "validate",
      "expression": "# define vector with T/F value for each household\ntest := sapply(1:length(household_id), function(i){\n  hhid <- household_id[i]\n  all(1:members[i] %in% persons$person_id[persons$household_id == hhid])\n})\n\n# rule must hold for all households\nall(test)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.556Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_mw4363vicg",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier)\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"]\nDScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1]\nDSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0\n",
      "severity": "information",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.556Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_pqt5bxbm25",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY)\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.556Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_ye7u4e9ckj",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1\nrc := 0\n\nLOOP FOR x1 := 1 UNTIL x1 > members\n     IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )\n      THEN rc := 1\n     END\n\n  END\n\nRETURN rc",
      "severity": "error",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.556Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_aki75nnpp3",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY)\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.556Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_bg7zlipkjo",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1 \n\nDSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.556Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_he67tp7jda",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "validate",
      "expression": "# def_age_gp:\nage_gp :=  age[match(grandchild_of, person_id)]\n\n# rule_04:\nage_gp - 28 >= age\n",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.556Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_dl4zwru9i9",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "Estatistik",
      "expression": "DECLARE rc\nrc := 0\n\n\"Haushalt = household\"\n\nIF NOT  SEQUENCE (person_id , person , year_of_birth) \n IN DATASET Haushalt (person_id , person , year_of_birth)\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.556Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_f17x9v7swo",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0\n",
      "severity": "warning",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.556Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_5jkixorhul",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "validate",
      "expression": "# rule_08:\nyear_of_birth == persons$year_of_birth\n",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.556Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_abmzyzqanx",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr\nrc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}\n\n\"Count totals SP2 and SP3 across all records\"\n  FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)\n          counter := counter + 1\n          s_t   := s_t + t\n          s_tm1 := s_tm1 + tm1\n\n  END\n\n\"Evaluate result\"\n\nIF counter > 0\n\n  THEN \n    \"Compute previous average\"\n    d_t       := s_t   / counter\n    d_tm1     := s_tm1 / counter\n\t\n    \"Compute new average\"\n    d_t_neu := (s_t - price_t + price_tm1) / counter\n\n    \"Compute relative size of new average\"\n     DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)\n\n  \"Check\"\n  IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)\n   THEN rc := 1\n  END\n\nEND \n \nRETURN rc",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.556Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_kxntkqwffk",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "validate",
      "expression": "# def_count:\nperson_count :=  table(person$household_id)\n\n# rule17:\nmembers == person_count[household_id]\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.556Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_e7isrz52nu",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid\nrc,tmp_decided, tmp_invalid := {0,0,0}\ntmp_age := EMPTY\nFOR EVERY tmp_age IN DATASET mat_Rule09 (age)\n\n   IF tmp_age  = EMPTY \n    THEN tmp_decided := 1 \n   \n     ELSE\n      IF NOT tmp_age  IN SEQUENCE (0++113)\n       THEN tmp_invalid := 1  \n      END\n   END\nEND\n\nIF tmp_decided = 0 AND  tmp_invalid = 1\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.556Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_ed7dhdgkfd",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_city, counter\nrc, counter  := {0,0}\n\n  FOR EVERY tmp_city IN DATASET mat_Rule15 (postcode = postcode ; city )\n   IF city /= tmp_city\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.556Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_o5btj6yd8a",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "validate",
      "expression": "# rule_01:\nhours_worked >= 1 & hours_worked <= 80\n",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.556Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_yfhudsn4ko",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.556Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_3atvx78hp9",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.556Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_2ibv8fdmcx",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "VTL 1.0",
      "expression": "DS=level \n \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"]\nDSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1) \n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.556Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_jznr4824sm",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1\n",
      "severity": "information",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.556Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_hhqb1w1w6s",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr\nrc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}\n\n\"Count totals SP2 and SP3 across all records\"\n  FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)\n          counter := counter + 1\n          s_t   := s_t + t\n          s_tm1 := s_tm1 + tm1\n\n  END\n\n\"Evaluate result\"\n\nIF counter > 0\n\n  THEN \n    \"Compute previous average\"\n    d_t       := s_t   / counter\n    d_tm1     := s_tm1 / counter\n\t\n    \"Compute new average\"\n    d_t_neu := (s_t - price_t + price_tm1) / counter\n\n    \"Compute relative size of new average\"\n     DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)\n\n  \"Check\"\n  IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)\n   THEN rc := 1\n  END\n\nEND \n \nRETURN rc",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.556Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_ffe86uzrme",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_city, counter\nrc, counter  := {0,0}\n\n  FOR EVERY tmp_city IN DATASET mat_Rule15 (postcode = postcode ; city )\n   IF city /= tmp_city\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.556Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_8pm1qu8qxg",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier)\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"]\nDScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1]\nDSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0\n",
      "severity": "information",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.556Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_2t0cz15dzo",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "validate",
      "expression": "\n# def_ratio\nmeani := mean(price_t)  + (price_tm1 - price_t)/length(price_t)\nratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))\n\n# rule_07\nratio >= 0.9 & ratio <= 1.1\n\n",
      "severity": "warning",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_hbhamy704r",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age\ntmp_age := EMPTY\n\n  tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)\n\nIF tmp_age - 28 < age\n THEN rc := 1\nEND\n\n\nRETURN rc",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_qoft13dk3s",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "validate",
      "expression": "# define parent:\nparents :=  sub(\"\\\\.[0-9]$\",\"\",level)\nis_parent := level %in% parents\n\n# define child sums, by search for parent pattern.\nchild_sums := sapply(level[is_parent], function(x){ \n    sum(weight[grepl(paste0(\"^\",x,\".[0-9]$\"),level)])\n  })\n# rule 16 \nall(weight[is_parent] == child_sums)\n\n",
      "severity": "error",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_91ezsoul3i",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of \n\nDSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"  \non (DSgp#person-id= DSgc# grandchild_of),\nreturn (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")\n \nDSr:= (DSmerge#gp_age-28) >= DSmerge#age\n\nDSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]\n\n",
      "severity": "error",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_h1akd0bbk9",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "validate",
      "expression": "# def_count:\nperson_count :=  table(person$household_id)\n\n# rule17:\nmembers == person_count[household_id]\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_k8rx2ye3du",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head\nrc := {0}\ntmp_relation_to_head := EMPTY\n\nIF relation_to_head ='4'\n THEN   \n\n   IF NOT spouse_id IN DATASET mat_Rule12 (person_id)\n    THEN rc := 1\n     ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )\n\n      IF tmp_relation_to_head /= '3'\n       THEN  rc := 1\n      END\n   END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_w00bfqbcoy",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "VTL 1.0",
      "expression": "DS=level \n \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"]\nDSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1) \n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_uyw8a5u80g",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "validate",
      "expression": "# def_count:\nperson_count :=  table(person$household_id)\n\n# rule17:\nmembers == person_count[household_id]\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_exa8vx0r86",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1 \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)]\nDSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)]\nDSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)]\nDScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)]\nDSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1\n",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_gnefljtu3t",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit\nrc,tmp_sum,hit  := {0,0,0}\n\ntmp_AnzSst := FUNCTION LENGTH (level)\n\nIF tmp_AnzSst IN SEQUENCE  (1,3)\n THEN \n\n  FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )\n\n   IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND \n                          FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n   IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND \n                          FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n END\n\n  \"Check\"\n  IF tmp_sum /= weight AND hit = 1\n   THEN rc := 1\n  END\n\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_rxh2hddvox",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "validate",
      "expression": "# def_counts:\ncounts :=  table(gender, age_group)\n\n# rule_13:\nall(counts <= 1)\n",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_w7u6niyt0t",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1 \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)]\nDSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)]\nDSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)]\nDScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)]\nDSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1\n",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_qzdd50hjzi",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit\nrc,tmp_sum,hit  := {0,0,0}\n\ntmp_AnzSst := FUNCTION LENGTH (level)\n\nIF tmp_AnzSst IN SEQUENCE  (1,3)\n THEN \n\n  FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )\n\n   IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND \n                          FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n   IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND \n                          FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n END\n\n  \"Check\"\n  IF tmp_sum /= weight AND hit = 1\n   THEN rc := 1\n  END\n\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_tg1eurj3u8",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "validate",
      "expression": "# rule_08:\nyear_of_birth == persons$year_of_birth\n",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_amchxq8lnb",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier)\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"]\nDScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1]\nDSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0\n",
      "severity": "information",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_e4tpcbli5e",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "validate",
      "expression": "# rule_04:\n(price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <= \n    0.5 * price_Ymin1\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_vnqv01mdne",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age\n\nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]\n\nDScond:= DScalc[filter age between 0 and 113]\n\nDSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]\n\n",
      "severity": "information",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_9chh7xvsbk",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)\n\nDScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]= \n        DShousehold)[filter members= \"false\"]\nDSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0\n\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_8ono7gm6t5",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "validate",
      "expression": "# def_03:\ncounts :=  table(level)\n\n# rule_03:\ncounts[\"high\"] < 0.1 * sum(counts)\n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_32wlm70ttc",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_llesss2re8",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "validate",
      "expression": "# rule_11:\nsum(business_id == 100 & turnover > 1e+06) == 1\n",
      "severity": "error",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_ezjmoq763m",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "validate",
      "expression": "# define parent:\nparents :=  sub(\"\\\\.[0-9]$\",\"\",level)\nis_parent := level %in% parents\n\n# define child sums, by search for parent pattern.\nchild_sums := sapply(level[is_parent], function(x){ \n    sum(weight[grepl(paste0(\"^\",x,\".[0-9]$\"),level)])\n  })\n# rule 16 \nall(weight[is_parent] == child_sums)\n\n",
      "severity": "error",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_o0v25eg8hb",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "validate",
      "expression": "# def_age_gp:\nage_gp :=  age[match(grandchild_of, person_id)]\n\n# rule_04:\nage_gp - 28 >= age\n",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_9llkakcry9",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "VTL 1.0",
      "expression": "DS=level \n \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"]\nDSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1) \n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_ooszl47huy",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "validate",
      "expression": "# def_03:\ncounts :=  table(level)\n\n# rule_03:\ncounts[\"high\"] < 0.1 * sum(counts)\n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_jzgzc6bb88",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "validate",
      "expression": "# rule 14\nall(table(gender, age_group) >= 1) & \n  all(c(\"male\", \"female\") %in% gender) &\n  all(c(\"child\",\"adult\",\"senior\") %in% age_group)\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_4uch51c855",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)\n\nDScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]= \n        DShousehold)[filter members= \"false\"]\nDSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0\n\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_b2dpqjs81r",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1 \n\nDSout:=DS[filter season=\"out\"]\nDSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic \n   see page 42 VTL-part1 */\n",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_lma2oz36ro",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count\nrc,tmp_undecided, tmp_count := {1,0,0}\ntmp_turnover := EMPTY\n\n  FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )\n\n   IF tmp_turnover  = EMPTY \n    THEN tmp_undecided := 1 \n   \n     ELSE\n      IF tmp_turnover > 1000000\n       THEN tmp_count :=  tmp_count + 1  \n      END\n   END\n END\n\n IF tmp_undecided = 1 OR  tmp_count = 1\n  THEN rc := 0\n END\n\n\n\nRETURN rc",
      "severity": "warning",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_axb6h4uyow",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=household-id(identifier), person-id(identifier)\n\n\nDSmerge:=merge (DShousehold as \"DSh\", DSpersons as \"DSp\" \n        on DSh#household-id=DSp#household-id, \n        return \n        (DSh#household-id as household-id,DSh#person-id as person-id,DSp#members as members))\n \n\nDSout:= DSmerge[filter person-id < 1 or person-id>members][keep (household-id,members)][aggregate count (members)] = 0\n\nDSdist:= DSmerge[rename (person-id) as \"p_id\" role \"measure\"][aggregate count_distinct (p_id)][filter p id <> members]\n[aggregate count (members)] = 0\n\n\nDSr := (DSout and DSdist)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_aspzf320ho",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier)\nDSgender= gender(identifier) {male, female}\nDSage =age-group(identifier) {child, adult, senior}\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,\n    on\n    (1 = 1)\n    return\n   (DSgender#gender as \"gender\",DSage #age-group as \"age-group\"))\nDSdiff := DSmerge setdiff DS[keep (gender, age-group)]\nDSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_kius4m0j02",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_b8dw9ajkm9",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "validate",
      "expression": "# rule_02:\ncost + profit == turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_86aa30bokt",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,\n    male_child, female_child, male_adult, female_adult, male_senior, female_senior\nrc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}\n\n  FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)\n   IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END\n\n  END\n    IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0 \n     THEN rc := 1\n    END\n\n\nRETURN rc",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set."
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_23o3foeppx",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,\n    male_child, female_child, male_adult, female_adult, male_senior, female_senior\nrc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}\n\n  FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)\n   IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END\n\n  END\n    IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0 \n     THEN rc := 1\n    END\n\n\nRETURN rc",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set."
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_qi1zta8oee",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1\n",
      "severity": "information",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_qhkwx8aavw",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of \n\nDSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"  \non (DSgp#person-id= DSgc# grandchild_of),\nreturn (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")\n \nDSr:= (DSmerge#gp_age-28) >= DSmerge#age\n\nDSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]\n\n",
      "severity": "error",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_d8fcalqdfv",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "validate",
      "expression": "# def_count:\nperson_count :=  table(person$household_id)\n\n# rule17:\nmembers == person_count[household_id]\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_ts4a6nlp5k",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "validate",
      "expression": "# def_counts:\ncounts :=  table(gender, age_group)\n\n# rule_13:\nall(counts <= 1)\n",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_f2n6ut49jt",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1\nrc := 0\n\nLOOP FOR x1 := 1 UNTIL x1 > members\n     IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )\n      THEN rc := 1\n     END\n\n  END\n\nRETURN rc",
      "severity": "error",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_8f2wgihk8y",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier)\nDSgender= gender(identifier) {male, female}\nDSage =age-group(identifier) {child, adult, senior}\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,\n    on\n    (1 = 1)\n    return\n   (DSgender#gender as \"gender\",DSage #age-group as \"age-group\"))\nDSdiff := DSmerge setdiff DS[keep (gender, age-group)]\nDSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_sy4qp97b2c",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1 \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)]\nDSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)]\nDSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)]\nDScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)]\nDSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1\n",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_gioz8evlcx",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit\nrc,tmp_sum,hit  := {0,0,0}\n\ntmp_AnzSst := FUNCTION LENGTH (level)\n\nIF tmp_AnzSst IN SEQUENCE  (1,3)\n THEN \n\n  FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )\n\n   IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND \n                          FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n   IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND \n                          FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n END\n\n  \"Check\"\n  IF tmp_sum /= weight AND hit = 1\n   THEN rc := 1\n  END\n\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_mtwe266xvl",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY)\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_vng9fxni10",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "VTL 1.0",
      "expression": "DS=level \n \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"]\nDSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1) \n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_ji8d1zspbw",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_pfxfxz4e2z",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "validate",
      "expression": "# rule 14\nall(table(gender, age_group) >= 1) & \n  all(c(\"male\", \"female\") %in% gender) &\n  all(c(\"child\",\"adult\",\"senior\") %in% age_group)\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_n60dal2b6t",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=household-id(identifier), person-id(identifier)\n\n\nDSmerge:=merge (DShousehold as \"DSh\", DSpersons as \"DSp\" \n        on DSh#household-id=DSp#household-id, \n        return \n        (DSh#household-id as household-id,DSh#person-id as person-id,DSp#members as members))\n \n\nDSout:= DSmerge[filter person-id < 1 or person-id>members][keep (household-id,members)][aggregate count (members)] = 0\n\nDSdist:= DSmerge[rename (person-id) as \"p_id\" role \"measure\"][aggregate count_distinct (p_id)][filter p id <> members]\n[aggregate count (members)] = 0\n\n\nDSr := (DSout and DSdist)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_8ywu246kla",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_cgk30qs5xp",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), spouse-id, relation_to_head\n\nDSfilter := DS[filter relation_to_head = 4]\nDSmerge := merge(DS \"DSx\",DS \"DSy\",\n    on\n    (DSy#spouse-id = DSx#person-id and DSy#relation_to_head = 3 and DSx#relation_to_head = 4)\n    return\n    (DSx#person-id as \"person-id\"))\n\nDSnot_exists := DSfilter not_exists_in DSmerge\n\nDScount := DSnot_exists[calc 1 as \"id\" role \"identifier\"][keep (id, person_id)][aggregate count (person_id)] = 0\n",
      "severity": "information",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_h83ase7a3e",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "validate",
      "expression": "# define vector with T/F value for each household\ntest := sapply(1:length(household_id), function(i){\n  hhid <- household_id[i]\n  all(1:members[i] %in% persons$person_id[persons$household_id == hhid])\n})\n\n# rule must hold for all households\nall(test)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_xhhpdpk8vq",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head\nrc := {0}\ntmp_relation_to_head := EMPTY\n\nIF relation_to_head ='4'\n THEN   \n\n   IF NOT spouse_id IN DATASET mat_Rule12 (person_id)\n    THEN rc := 1\n     ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )\n\n      IF tmp_relation_to_head /= '3'\n       THEN  rc := 1\n      END\n   END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_99w1tk9mw6",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "VTL 1.0",
      "expression": "DS= business-id, cost, profit, turnover \n\nDSr:= (DS#cost + DS#profit) = DS#turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_pkw90umhpx",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "validate",
      "expression": "# def_count:\nperson_count :=  table(person$household_id)\n\n# rule17:\nmembers == person_count[household_id]\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_mst0qszfxq",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_9xu6h7kn46",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "validate",
      "expression": "# rule 14\nall(table(gender, age_group) >= 1) & \n  all(c(\"male\", \"female\") %in% gender) &\n  all(c(\"child\",\"adult\",\"senior\") %in% age_group)\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_wbs9y480ja",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "validate",
      "expression": "# rule_08:\nyear_of_birth == persons$year_of_birth\n",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_ul695s2l1a",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "validate",
      "expression": "# def_counts:\ncounts :=  table(gender, age_group)\n\n# rule_13:\nall(counts <= 1)\n",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_roeds8nn8g",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "validate",
      "expression": "# rule_09:\nall(age >= 0 & age <= 113)\n",
      "severity": "error",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_arxqgvktjk",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0\n",
      "severity": "warning",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_ou78kil14v",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)\n\n\nDScount := DS[calc 1 as msr_count role \"MEASURE\"]\nDSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] =\nDScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)]\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_gu4iczdgz0",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total\nrc,z1,total := {0,0,0}\n\nFOR EVERY s1  IN DATASET mat_Rule03 (level1)\n\n   IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"\n   IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"\n\nEND\n\n\"Check relative occurrence of value 'high'\"\n\nIF z1 > total * 0.1 THEN rc := 1 END\n\nRETURN rc",
      "severity": "warning",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_yw21ys2bz3",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_acqejsqxwz",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier)\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"]\nDScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1]\nDSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0\n",
      "severity": "information",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_hrdpijqkwg",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "validate",
      "expression": "# rule 14\nall(table(gender, age_group) >= 1) & \n  all(c(\"male\", \"female\") %in% gender) &\n  all(c(\"child\",\"adult\",\"senior\") %in% age_group)\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_tbp5u6fe74",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "validate",
      "expression": "# def_03:\ncounts :=  table(level)\n\n# rule_03:\ncounts[\"high\"] < 0.1 * sum(counts)\n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_dbys0w3dzb",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head\nrc := {0}\ntmp_relation_to_head := EMPTY\n\nIF relation_to_head ='4'\n THEN   \n\n   IF NOT spouse_id IN DATASET mat_Rule12 (person_id)\n    THEN rc := 1\n     ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )\n\n      IF tmp_relation_to_head /= '3'\n       THEN  rc := 1\n      END\n   END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_kxk9k9dkjj",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1\n",
      "severity": "information",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_dmiryi6cfd",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY)\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_4g4rq3q5t5",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "validate",
      "expression": "# rule_11:\nsum(business_id == 100 & turnover > 1e+06) == 1\n",
      "severity": "error",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_v17ed36yrl",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "Estatistik",
      "expression": "turnover /= cost + profit",
      "severity": "error",
      "description": "cost + profit = turnover"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_qf7pf3gbjw",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age\n\nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]\n\nDScond:= DScalc[filter age between 0 and 113]\n\nDSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]\n\n",
      "severity": "information",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_x04wu8wgte",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth\nDS_p= person-id(identifier),person, year_of_birth, gender\n \nDSr:= DS_h#year_of_birth=DS_p#year_of_birth\n",
      "severity": "information",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_ljp9p4hr64",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_24y2rpx12m",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover \nrc := 1\ntmp_turnover := EMPTY\n\nFOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )\n\n\n  IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000\n   THEN rc := 0\n  END\n\nEND\n\nRETURN rc",
      "severity": "information",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_nxctx6fmy4",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of \n\nDSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"  \non (DSgp#person-id= DSgc# grandchild_of),\nreturn (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")\n \nDSr:= (DSmerge#gp_age-28) >= DSmerge#age\n\nDSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]\n\n",
      "severity": "error",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.557Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_3kma5sg2xh",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "validate",
      "expression": "# def_rel_4:\nrel_4 :=  person_id[relation_to_head == 4]\n\n# def_rel_3:\nspouse_of_rel_3 :=  spouse_id[relation_to_head == 3]\n\n# rule_12:\nall(rel_4 %in% spouse_of_rel_3)\n",
      "severity": "error",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_nmh42radbo",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight\n\n/*\n * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)\n *\n *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN\n *  x1                      1\t      +\n *  x1.1          x1\t      2\t      +\n *  x1.2          x1\t      2\t      +\n *  x1.3          x1\t      2\t      +\n *  x2                      1       +\n *  x2.1          x2\t      2\t      +\n */\n\nDShierarchy := hierarchy(DS, level, \"HRC\", false)\nDScond := (DShierarchy = DS)[filter weight = \"false\"]\nDSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_x33fy8fvl4",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "validate",
      "expression": "# define parent:\nparents :=  sub(\"\\\\.[0-9]$\",\"\",level)\nis_parent := level %in% parents\n\n# define child sums, by search for parent pattern.\nchild_sums := sapply(level[is_parent], function(x){ \n    sum(weight[grepl(paste0(\"^\",x,\".[0-9]$\"),level)])\n  })\n# rule 16 \nall(weight[is_parent] == child_sums)\n\n",
      "severity": "error",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0"
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_oo7djk11wj",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)\n\n\nDScount := DS[calc 1 as msr_count role \"MEASURE\"]\nDSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] =\nDScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)]\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_tajmncpea5",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover \nrc := 1\ntmp_turnover := EMPTY\n\nFOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )\n\n\n  IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000\n   THEN rc := 0\n  END\n\nEND\n\nRETURN rc",
      "severity": "information",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_3uapmd4qmd",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count\nrc,tmp_undecided, tmp_count := {1,0,0}\ntmp_turnover := EMPTY\n\n  FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )\n\n   IF tmp_turnover  = EMPTY \n    THEN tmp_undecided := 1 \n   \n     ELSE\n      IF tmp_turnover > 1000000\n       THEN tmp_count :=  tmp_count + 1  \n      END\n   END\n END\n\n IF tmp_undecided = 1 OR  tmp_count = 1\n  THEN rc := 0\n END\n\n\n\nRETURN rc",
      "severity": "warning",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_atu5gb5fte",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "validate",
      "expression": "# def_rel_4:\nrel_4 :=  person_id[relation_to_head == 4]\n\n# def_rel_3:\nspouse_of_rel_3 :=  spouse_id[relation_to_head == 3]\n\n# rule_12:\nall(rel_4 %in% spouse_of_rel_3)\n",
      "severity": "error",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_vgf33t58su",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1 \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)]\nDSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)]\nDSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)]\nDScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)]\nDSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1\n",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_ljdgp5sh3i",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr\nrc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}\n\n\"Count totals SP2 and SP3 across all records\"\n  FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)\n          counter := counter + 1\n          s_t   := s_t + t\n          s_tm1 := s_tm1 + tm1\n\n  END\n\n\"Evaluate result\"\n\nIF counter > 0\n\n  THEN \n    \"Compute previous average\"\n    d_t       := s_t   / counter\n    d_tm1     := s_tm1 / counter\n\t\n    \"Compute new average\"\n    d_t_neu := (s_t - price_t + price_tm1) / counter\n\n    \"Compute relative size of new average\"\n     DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)\n\n  \"Check\"\n  IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)\n   THEN rc := 1\n  END\n\nEND \n \nRETURN rc",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_sfuzdcrwe1",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier)\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"]\nDScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1]\nDSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0\n",
      "severity": "information",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_z6esg5nvqh",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count\nrc,tmp_undecided, tmp_count := {1,0,0}\ntmp_turnover := EMPTY\n\n  FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )\n\n   IF tmp_turnover  = EMPTY \n    THEN tmp_undecided := 1 \n   \n     ELSE\n      IF tmp_turnover > 1000000\n       THEN tmp_count :=  tmp_count + 1  \n      END\n   END\n END\n\n IF tmp_undecided = 1 OR  tmp_count = 1\n  THEN rc := 0\n END\n\n\n\nRETURN rc",
      "severity": "warning",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_2k2e8cda2l",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)\n\n\nDScount := DS[calc 1 as msr_count role \"MEASURE\"]\nDSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] =\nDScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)]\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_1y21k7oqrl",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age\n\nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]\n\nDScond:= DScalc[filter age between 0 and 113]\n\nDSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]\n\n",
      "severity": "information",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_jdkxvjw4le",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "validate",
      "expression": "# def_rel_4:\nrel_4 :=  person_id[relation_to_head == 4]\n\n# def_rel_3:\nspouse_of_rel_3 :=  spouse_id[relation_to_head == 3]\n\n# rule_12:\nall(rel_4 %in% spouse_of_rel_3)\n",
      "severity": "error",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_69l2d5uvuv",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "validate",
      "expression": "# rule_11:\nsum(business_id == 100 & turnover > 1e+06) == 1\n",
      "severity": "error",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_rahazvzrx0",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,\n    male_child, female_child, male_adult, female_adult, male_senior, female_senior\nrc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}\n\n  FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)\n   IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END\n\n  END\n    IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0 \n     THEN rc := 1\n    END\n\n\nRETURN rc",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set."
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_6tamu5i00x",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "validate",
      "expression": "# rule_04:\n(price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <= \n    0.5 * price_Ymin1\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_wxfy8nwghf",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)\n\nDScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]= \n        DShousehold)[filter members= \"false\"]\nDSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0\n\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_tvquk4u38r",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "validate",
      "expression": "# rule_04:\n(price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <= \n    0.5 * price_Ymin1\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_wu3kmmcu07",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1\nrc := 0\n\nLOOP FOR x1 := 1 UNTIL x1 > members\n     IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )\n      THEN rc := 1\n     END\n\n  END\n\nRETURN rc",
      "severity": "error",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_vs5an1ep55",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit\nrc,tmp_sum,hit  := {0,0,0}\n\ntmp_AnzSst := FUNCTION LENGTH (level)\n\nIF tmp_AnzSst IN SEQUENCE  (1,3)\n THEN \n\n  FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )\n\n   IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND \n                          FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n   IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND \n                          FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n END\n\n  \"Check\"\n  IF tmp_sum /= weight AND hit = 1\n   THEN rc := 1\n  END\n\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_89tvftu2dl",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_rkp4ad2qod",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age\ntmp_age := EMPTY\n\n  tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)\n\nIF tmp_age - 28 < age\n THEN rc := 1\nEND\n\n\nRETURN rc",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_ovr5ydmfki",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "validate",
      "expression": "# rule 14\nall(table(gender, age_group) >= 1) & \n  all(c(\"male\", \"female\") %in% gender) &\n  all(c(\"child\",\"adult\",\"senior\") %in% age_group)\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_l27uw4px0u",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age\n\nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]\n\nDScond:= DScalc[filter age between 0 and 113]\n\nDSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]\n\n",
      "severity": "information",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_fb4t927oxw",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)\n\nDScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]= \n        DShousehold)[filter members= \"false\"]\nDSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0\n\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_1ubw65hzr2",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1 \n\nDSout:=DS[filter season=\"out\"]\nDSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic \n   see page 42 VTL-part1 */\n",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_2mky6slqil",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1\n",
      "severity": "information",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_yp3xm9l5dn",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head\nrc := {0}\ntmp_relation_to_head := EMPTY\n\nIF relation_to_head ='4'\n THEN   \n\n   IF NOT spouse_id IN DATASET mat_Rule12 (person_id)\n    THEN rc := 1\n     ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )\n\n      IF tmp_relation_to_head /= '3'\n       THEN  rc := 1\n      END\n   END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_2gxtb45qgw",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "validate",
      "expression": "# def_03:\ncounts :=  table(level)\n\n# rule_03:\ncounts[\"high\"] < 0.1 * sum(counts)\n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_tf2o8ludxk",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr\nrc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}\n\n\"Count totals SP2 and SP3 across all records\"\n  FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)\n          counter := counter + 1\n          s_t   := s_t + t\n          s_tm1 := s_tm1 + tm1\n\n  END\n\n\"Evaluate result\"\n\nIF counter > 0\n\n  THEN \n    \"Compute previous average\"\n    d_t       := s_t   / counter\n    d_tm1     := s_tm1 / counter\n\t\n    \"Compute new average\"\n    d_t_neu := (s_t - price_t + price_tm1) / counter\n\n    \"Compute relative size of new average\"\n     DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)\n\n  \"Check\"\n  IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)\n   THEN rc := 1\n  END\n\nEND \n \nRETURN rc",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_xvuj58kjcs",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "validate",
      "expression": "# rule 14\nall(table(gender, age_group) >= 1) & \n  all(c(\"male\", \"female\") %in% gender) &\n  all(c(\"child\",\"adult\",\"senior\") %in% age_group)\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.558Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_9kf0u9x1va",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "validate",
      "expression": "# def_age_gp:\nage_gp :=  age[match(grandchild_of, person_id)]\n\n# rule_04:\nage_gp - 28 >= age\n",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_t7u5n0h0li",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "validate",
      "expression": "# rule_08:\nyear_of_birth == persons$year_of_birth\n",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_1iv6ibm52j",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1 \n\nDSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_7nu1oes8qm",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "validate",
      "expression": "# rule_10:\nany(business_id == 100 & turnover > 1e+06)\n",
      "severity": "information",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_9zhbqmrzfv",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "validate",
      "expression": "# define vector with T/F value for each household\ntest := sapply(1:length(household_id), function(i){\n  hhid <- household_id[i]\n  all(1:members[i] %in% persons$person_id[persons$household_id == hhid])\n})\n\n# rule must hold for all households\nall(test)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_a8hjmhsimu",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )\n  counter := counter + 1\n\n\n    IF counter /= 1\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_6cgktyei16",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "validate",
      "expression": "# define vector with T/F value for each household\ntest := sapply(1:length(household_id), function(i){\n  hhid <- household_id[i]\n  all(1:members[i] %in% persons$person_id[persons$household_id == hhid])\n})\n\n# rule must hold for all households\nall(test)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_fr0p7yf9bm",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "validate",
      "expression": "# def_03:\ncounts :=  table(level)\n\n# rule_03:\ncounts[\"high\"] < 0.1 * sum(counts)\n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_678ktl1fe4",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "validate",
      "expression": "# rule_11:\nsum(business_id == 100 & turnover > 1e+06) == 1\n",
      "severity": "error",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_hiex5bk90l",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "VTL 1.0",
      "expression": "DS=level \n \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"]\nDSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1) \n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_848u5t736d",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0\n",
      "severity": "warning",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_k519y42e51",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )\n   counter := counter + 1\n  END\n\n   IF counter /= members\n     THEN rc := 1\n    END\n\nRETURN rc",
      "severity": "error",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_1ia9q4o2de",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "validate",
      "expression": "# define vector with T/F value for each household\ntest := sapply(1:length(household_id), function(i){\n  hhid <- household_id[i]\n  all(1:members[i] %in% persons$person_id[persons$household_id == hhid])\n})\n\n# rule must hold for all households\nall(test)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_xw3by30ox",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,\n    male_child, female_child, male_adult, female_adult, male_senior, female_senior\nrc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}\n\n  FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)\n   IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END\n\n  END\n    IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0 \n     THEN rc := 1\n    END\n\n\nRETURN rc",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set."
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_1vuh12mu3y",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier)\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"]\nDScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1]\nDSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0\n",
      "severity": "information",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_nxi1ysqoi1",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier)\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"]\nDScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1]\nDSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0\n",
      "severity": "information",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_q7qna5b1k5",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier)\nDSgender= gender(identifier) {male, female}\nDSage =age-group(identifier) {child, adult, senior}\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,\n    on\n    (1 = 1)\n    return\n   (DSgender#gender as \"gender\",DSage #age-group as \"age-group\"))\nDSdiff := DSmerge setdiff DS[keep (gender, age-group)]\nDSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_xoomemx0qb",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "validate",
      "expression": "\n# def_ratio\nmeani := mean(price_t)  + (price_tm1 - price_t)/length(price_t)\nratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))\n\n# rule_07\nratio >= 0.9 & ratio <= 1.1\n\n",
      "severity": "warning",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_b90ceq38ot",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "validate",
      "expression": "# rule_08:\nyear_of_birth == persons$year_of_birth\n",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_chsro3epmt",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_zjlwncasib",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count\nrc,tmp_undecided, tmp_count := {1,0,0}\ntmp_turnover := EMPTY\n\n  FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )\n\n   IF tmp_turnover  = EMPTY \n    THEN tmp_undecided := 1 \n   \n     ELSE\n      IF tmp_turnover > 1000000\n       THEN tmp_count :=  tmp_count + 1  \n      END\n   END\n END\n\n IF tmp_undecided = 1 OR  tmp_count = 1\n  THEN rc := 0\n END\n\n\n\nRETURN rc",
      "severity": "warning",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_dbkwkeqbar",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "Estatistik",
      "expression": "DECLARE rc\nrc := 0\n\n\"Haushalt = household\"\n\nIF NOT  SEQUENCE (person_id , person , year_of_birth) \n IN DATASET Haushalt (person_id , person , year_of_birth)\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_ob138vdgdv",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1\nrc := 0\n\nLOOP FOR x1 := 1 UNTIL x1 > members\n     IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )\n      THEN rc := 1\n     END\n\n  END\n\nRETURN rc",
      "severity": "error",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_fgm0ia1snz",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "validate",
      "expression": "# def_03:\ncounts :=  table(level)\n\n# rule_03:\ncounts[\"high\"] < 0.1 * sum(counts)\n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_owon08opy7",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)\n\nDScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]= \n        DShousehold)[filter members= \"false\"]\nDSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0\n\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_5isqh62v3z",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "validate",
      "expression": "# def_rel_4:\nrel_4 :=  person_id[relation_to_head == 4]\n\n# def_rel_3:\nspouse_of_rel_3 :=  spouse_id[relation_to_head == 3]\n\n# rule_12:\nall(rel_4 %in% spouse_of_rel_3)\n",
      "severity": "error",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_n6em25a68q",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "Estatistik",
      "expression": "DECLARE rc\nrc := 0\n\n\"Haushalt = household\"\n\nIF NOT  SEQUENCE (person_id , person , year_of_birth) \n IN DATASET Haushalt (person_id , person , year_of_birth)\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_aymcjz2rcu",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_2mt4aspi7p",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "validate",
      "expression": "# define vector with T/F value for each household\ntest := sapply(1:length(household_id), function(i){\n  hhid <- household_id[i]\n  all(1:members[i] %in% persons$person_id[persons$household_id == hhid])\n})\n\n# rule must hold for all households\nall(test)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_4hrppg5hem",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "validate",
      "expression": "# rule_01:\nhours_worked >= 1 & hours_worked <= 80\n",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_uxrplstyw8",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "validate",
      "expression": "# rule_04:\n(price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <= \n    0.5 * price_Ymin1\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_s4qze6hwex",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)\n\nDScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]= \n        DShousehold)[filter members= \"false\"]\nDSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0\n\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_d6lecy7lu1",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "validate",
      "expression": "# def_03:\ncounts :=  table(level)\n\n# rule_03:\ncounts[\"high\"] < 0.1 * sum(counts)\n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_0zvw025ji7",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "validate",
      "expression": "# def_rel_4:\nrel_4 :=  person_id[relation_to_head == 4]\n\n# def_rel_3:\nspouse_of_rel_3 :=  spouse_id[relation_to_head == 3]\n\n# rule_12:\nall(rel_4 %in% spouse_of_rel_3)\n",
      "severity": "error",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_k49gnod2ag",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1\n",
      "severity": "information",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_148qccon7x",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_41gvmdr3t9",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )\n   counter := counter + 1\n  END\n\n   IF counter /= members\n     THEN rc := 1\n    END\n\nRETURN rc",
      "severity": "error",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_fm7gw3koe4",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count\nrc,tmp_undecided, tmp_count := {1,0,0}\ntmp_turnover := EMPTY\n\n  FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )\n\n   IF tmp_turnover  = EMPTY \n    THEN tmp_undecided := 1 \n   \n     ELSE\n      IF tmp_turnover > 1000000\n       THEN tmp_count :=  tmp_count + 1  \n      END\n   END\n END\n\n IF tmp_undecided = 1 OR  tmp_count = 1\n  THEN rc := 0\n END\n\n\n\nRETURN rc",
      "severity": "warning",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_5xa7glw5ow",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid\nrc,tmp_decided, tmp_invalid := {0,0,0}\ntmp_age := EMPTY\nFOR EVERY tmp_age IN DATASET mat_Rule09 (age)\n\n   IF tmp_age  = EMPTY \n    THEN tmp_decided := 1 \n   \n     ELSE\n      IF NOT tmp_age  IN SEQUENCE (0++113)\n       THEN tmp_invalid := 1  \n      END\n   END\nEND\n\nIF tmp_decided = 0 AND  tmp_invalid = 1\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_3vjkwzdnxk",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,\n    male_child, female_child, male_adult, female_adult, male_senior, female_senior\nrc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}\n\n  FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)\n   IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END\n\n  END\n    IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0 \n     THEN rc := 1\n    END\n\n\nRETURN rc",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set."
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_ebuezycyg7",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier)\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"]\nDScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1]\nDSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0\n",
      "severity": "information",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_hcugeqjz84",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)\n\n\nDScount := DS[calc 1 as msr_count role \"MEASURE\"]\nDSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] =\nDScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)]\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_wrsvjijqv7",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1\n",
      "severity": "information",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_5qa4vi9hpy",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier)\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"]\nDScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1]\nDSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0\n",
      "severity": "information",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_80l6fh8d3d",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), spouse-id, relation_to_head\n\nDSfilter := DS[filter relation_to_head = 4]\nDSmerge := merge(DS \"DSx\",DS \"DSy\",\n    on\n    (DSy#spouse-id = DSx#person-id and DSy#relation_to_head = 3 and DSx#relation_to_head = 4)\n    return\n    (DSx#person-id as \"person-id\"))\n\nDSnot_exists := DSfilter not_exists_in DSmerge\n\nDScount := DSnot_exists[calc 1 as \"id\" role \"identifier\"][keep (id, person_id)][aggregate count (person_id)] = 0\n",
      "severity": "information",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_uqtjscx9df",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head\nrc := {0}\ntmp_relation_to_head := EMPTY\n\nIF relation_to_head ='4'\n THEN   \n\n   IF NOT spouse_id IN DATASET mat_Rule12 (person_id)\n    THEN rc := 1\n     ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )\n\n      IF tmp_relation_to_head /= '3'\n       THEN  rc := 1\n      END\n   END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_rmnt971vj9",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count\nrc,tmp_undecided, tmp_count := {1,0,0}\ntmp_turnover := EMPTY\n\n  FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )\n\n   IF tmp_turnover  = EMPTY \n    THEN tmp_undecided := 1 \n   \n     ELSE\n      IF tmp_turnover > 1000000\n       THEN tmp_count :=  tmp_count + 1  \n      END\n   END\n END\n\n IF tmp_undecided = 1 OR  tmp_count = 1\n  THEN rc := 0\n END\n\n\n\nRETURN rc",
      "severity": "warning",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_6kmryfbxzd",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover \nrc := 1\ntmp_turnover := EMPTY\n\nFOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )\n\n\n  IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000\n   THEN rc := 0\n  END\n\nEND\n\nRETURN rc",
      "severity": "information",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_47dfij9vg2",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "validate",
      "expression": "# def_age_gp:\nage_gp :=  age[match(grandchild_of, person_id)]\n\n# rule_04:\nage_gp - 28 >= age\n",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_ktxfmf3mqs",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "validate",
      "expression": "# def_age_gp:\nage_gp :=  age[match(grandchild_of, person_id)]\n\n# rule_04:\nage_gp - 28 >= age\n",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_2wumvnvuzd",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age\ntmp_age := EMPTY\n\n  tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)\n\nIF tmp_age - 28 < age\n THEN rc := 1\nEND\n\n\nRETURN rc",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_ffi37ezzih",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "VTL 1.0",
      "expression": "DS= business-id, cost, profit, turnover \n\nDSr:= (DS#cost + DS#profit) = DS#turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_43beu8qrmg",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "validate",
      "expression": "# rule_06:\nif (season == \"out\") price_t == price_tmin1 & quantity_t == \n    quantity_tmin1\n",
      "severity": "information",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_etz9p27l3h",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr\nrc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}\n\n\"Count totals SP2 and SP3 across all records\"\n  FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)\n          counter := counter + 1\n          s_t   := s_t + t\n          s_tm1 := s_tm1 + tm1\n\n  END\n\n\"Evaluate result\"\n\nIF counter > 0\n\n  THEN \n    \"Compute previous average\"\n    d_t       := s_t   / counter\n    d_tm1     := s_tm1 / counter\n\t\n    \"Compute new average\"\n    d_t_neu := (s_t - price_t + price_tm1) / counter\n\n    \"Compute relative size of new average\"\n     DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)\n\n  \"Check\"\n  IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)\n   THEN rc := 1\n  END\n\nEND \n \nRETURN rc",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_raffd1cm11",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "validate",
      "expression": "# def_rel_4:\nrel_4 :=  person_id[relation_to_head == 4]\n\n# def_rel_3:\nspouse_of_rel_3 :=  spouse_id[relation_to_head == 3]\n\n# rule_12:\nall(rel_4 %in% spouse_of_rel_3)\n",
      "severity": "error",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.559Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_ft07p6b03b",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier)\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"]\nDScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1]\nDSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0\n",
      "severity": "information",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.560Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_jwcmyth3nj",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "validate",
      "expression": "# def_rel_4:\nrel_4 :=  person_id[relation_to_head == 4]\n\n# def_rel_3:\nspouse_of_rel_3 :=  spouse_id[relation_to_head == 3]\n\n# rule_12:\nall(rel_4 %in% spouse_of_rel_3)\n",
      "severity": "error",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.560Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_jlcfsdinv6",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "validate",
      "expression": "# define parent:\nparents :=  sub(\"\\\\.[0-9]$\",\"\",level)\nis_parent := level %in% parents\n\n# define child sums, by search for parent pattern.\nchild_sums := sapply(level[is_parent], function(x){ \n    sum(weight[grepl(paste0(\"^\",x,\".[0-9]$\"),level)])\n  })\n# rule 16 \nall(weight[is_parent] == child_sums)\n\n",
      "severity": "error",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0"
    },
    "event": {
      "time": "2017-10-24T15:20:37.560Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_s5m9cs6xih",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)\n\nDScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]= \n        DShousehold)[filter members= \"false\"]\nDSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0\n\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.560Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_k929oij32f",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )\n  counter := counter + 1\n\n\n    IF counter /= 1\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.560Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_zjyeh5185r",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "Estatistik",
      "expression": "DECLARE rc\nrc := 0\n\n\"Haushalt = household\"\n\nIF NOT  SEQUENCE (person_id , person , year_of_birth) \n IN DATASET Haushalt (person_id , person , year_of_birth)\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.560Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_br5vjrgwrb",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total\nrc,z1,total := {0,0,0}\n\nFOR EVERY s1  IN DATASET mat_Rule03 (level1)\n\n   IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"\n   IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"\n\nEND\n\n\"Check relative occurrence of value 'high'\"\n\nIF z1 > total * 0.1 THEN rc := 1 END\n\nRETURN rc",
      "severity": "warning",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.560Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_868xuxmfg4",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "validate",
      "expression": "# rule_15:\npostcode ~ city\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.560Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_qg78f8y77s",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "validate",
      "expression": "# rule_15:\npostcode ~ city\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.560Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_bo3r8dvrwe",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,\n    male_child, female_child, male_adult, female_adult, male_senior, female_senior\nrc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}\n\n  FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)\n   IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END\n\n  END\n    IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0 \n     THEN rc := 1\n    END\n\n\nRETURN rc",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set."
    },
    "event": {
      "time": "2017-10-24T15:20:37.560Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_qw1qdrb0ly",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "validate",
      "expression": "# def_counts:\ncounts :=  table(gender, age_group)\n\n# rule_13:\nall(counts <= 1)\n",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.560Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_49mmyjqoer",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "validate",
      "expression": "# rule 14\nall(table(gender, age_group) >= 1) & \n  all(c(\"male\", \"female\") %in% gender) &\n  all(c(\"child\",\"adult\",\"senior\") %in% age_group)\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.560Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_3ci5jxqsu6",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )\n  counter := counter + 1\n\n\n    IF counter /= 1\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.560Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_47gwbn7v3z",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )\n  counter := counter + 1\n\n\n    IF counter /= 1\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.560Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_j93d0xeugl",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of \n\nDSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"  \non (DSgp#person-id= DSgc# grandchild_of),\nreturn (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")\n \nDSr:= (DSmerge#gp_age-28) >= DSmerge#age\n\nDSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]\n\n",
      "severity": "error",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.560Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_7i4x4akgbh",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=household-id(identifier), person-id(identifier)\n\n\nDSmerge:=merge (DShousehold as \"DSh\", DSpersons as \"DSp\" \n        on DSh#household-id=DSp#household-id, \n        return \n        (DSh#household-id as household-id,DSh#person-id as person-id,DSp#members as members))\n \n\nDSout:= DSmerge[filter person-id < 1 or person-id>members][keep (household-id,members)][aggregate count (members)] = 0\n\nDSdist:= DSmerge[rename (person-id) as \"p_id\" role \"measure\"][aggregate count_distinct (p_id)][filter p id <> members]\n[aggregate count (members)] = 0\n\n\nDSr := (DSout and DSdist)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.560Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_3qiwdue669",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "validate",
      "expression": "\n# def_ratio\nmeani := mean(price_t)  + (price_tm1 - price_t)/length(price_t)\nratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))\n\n# rule_07\nratio >= 0.9 & ratio <= 1.1\n\n",
      "severity": "warning",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.560Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_orhazch4h6",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "validate",
      "expression": "# rule_11:\nsum(business_id == 100 & turnover > 1e+06) == 1\n",
      "severity": "error",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.560Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_makp3zya35",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "validate",
      "expression": "# rule_11:\nsum(business_id == 100 & turnover > 1e+06) == 1\n",
      "severity": "error",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.560Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_gubf76mrih",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover \nrc := 1\ntmp_turnover := EMPTY\n\nFOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )\n\n\n  IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000\n   THEN rc := 0\n  END\n\nEND\n\nRETURN rc",
      "severity": "information",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.560Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_qum2ueduwq",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "validate",
      "expression": "# rule_11:\nsum(business_id == 100 & turnover > 1e+06) == 1\n",
      "severity": "error",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.560Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_molfqksioj",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "validate",
      "expression": "# def_rel_4:\nrel_4 :=  person_id[relation_to_head == 4]\n\n# def_rel_3:\nspouse_of_rel_3 :=  spouse_id[relation_to_head == 3]\n\n# rule_12:\nall(rel_4 %in% spouse_of_rel_3)\n",
      "severity": "error",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.560Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_q933pale9z",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1\nrc := 0\n\nLOOP FOR x1 := 1 UNTIL x1 > members\n     IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )\n      THEN rc := 1\n     END\n\n  END\n\nRETURN rc",
      "severity": "error",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_uanhfqhy7e",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1 \n\nDSout:=DS[filter season=\"out\"]\nDSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic \n   see page 42 VTL-part1 */\n",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_yni2j80i2d",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked\n\nDSr:= DS#hours_worked between 1 and 80\n/* In case a value in hours_worked is NULL the value returned will be NULL */\n.\n",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_kvm88vasvg",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)\n\nDScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]= \n        DShousehold)[filter members= \"false\"]\nDSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0\n\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_u4it8476k5",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "validate",
      "expression": "# def_age_gp:\nage_gp :=  age[match(grandchild_of, person_id)]\n\n# rule_04:\nage_gp - 28 >= age\n",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_zcedhvq9q2",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "Estatistik",
      "expression": "turnover /= cost + profit",
      "severity": "error",
      "description": "cost + profit = turnover"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_g7awlf4f1a",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), spouse-id, relation_to_head\n\nDSfilter := DS[filter relation_to_head = 4]\nDSmerge := merge(DS \"DSx\",DS \"DSy\",\n    on\n    (DSy#spouse-id = DSx#person-id and DSy#relation_to_head = 3 and DSx#relation_to_head = 4)\n    return\n    (DSx#person-id as \"person-id\"))\n\nDSnot_exists := DSfilter not_exists_in DSmerge\n\nDScount := DSnot_exists[calc 1 as \"id\" role \"identifier\"][keep (id, person_id)][aggregate count (person_id)] = 0\n",
      "severity": "information",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_cvipl4ldxv",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of \n\nDSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"  \non (DSgp#person-id= DSgc# grandchild_of),\nreturn (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")\n \nDSr:= (DSmerge#gp_age-28) >= DSmerge#age\n\nDSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]\n\n",
      "severity": "error",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_qv0g6wzsgr",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "validate",
      "expression": "# rule_08:\nyear_of_birth == persons$year_of_birth\n",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_fkdy7ndw5x",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "validate",
      "expression": "# rule_04:\n(price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <= \n    0.5 * price_Ymin1\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_l7vgog4n3p",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0\n",
      "severity": "warning",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_gaufvnqx4l",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "validate",
      "expression": "# rule_02:\ncost + profit == turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_jk8nk2tlwi",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "validate",
      "expression": "# rule 14\nall(table(gender, age_group) >= 1) & \n  all(c(\"male\", \"female\") %in% gender) &\n  all(c(\"child\",\"adult\",\"senior\") %in% age_group)\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_mipmgwzn1v",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "Estatistik",
      "expression": "DECLARE rc\nrc := 0\n\n\"Haushalt = household\"\n\nIF NOT  SEQUENCE (person_id , person , year_of_birth) \n IN DATASET Haushalt (person_id , person , year_of_birth)\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_q02jaopz88",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "VTL 1.0",
      "expression": "DS=level \n \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"]\nDSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1) \n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_j4wg7fu0hu",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "validate",
      "expression": "# def_count:\nperson_count :=  table(person$household_id)\n\n# rule17:\nmembers == person_count[household_id]\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_abnucclkxj",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "validate",
      "expression": "# rule_02:\ncost + profit == turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_rq6fdpfzag",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1\nrc := 0\n\nLOOP FOR x1 := 1 UNTIL x1 > members\n     IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )\n      THEN rc := 1\n     END\n\n  END\n\nRETURN rc",
      "severity": "error",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_m6by9j9s6d",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "validate",
      "expression": "# rule_09:\nall(age >= 0 & age <= 113)\n",
      "severity": "error",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_f9ufafttvr",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total\nrc,z1,total := {0,0,0}\n\nFOR EVERY s1  IN DATASET mat_Rule03 (level1)\n\n   IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"\n   IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"\n\nEND\n\n\"Check relative occurrence of value 'high'\"\n\nIF z1 > total * 0.1 THEN rc := 1 END\n\nRETURN rc",
      "severity": "warning",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_t5452euiib",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age\n\nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]\n\nDScond:= DScalc[filter age between 0 and 113]\n\nDSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]\n\n",
      "severity": "information",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_3cvrsr6ok6",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "validate",
      "expression": "\n# def_ratio\nmeani := mean(price_t)  + (price_tm1 - price_t)/length(price_t)\nratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))\n\n# rule_07\nratio >= 0.9 & ratio <= 1.1\n\n",
      "severity": "warning",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_tgvlwgq8qz",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "validate",
      "expression": "# rule_06:\nif (season == \"out\") price_t == price_tmin1 & quantity_t == \n    quantity_tmin1\n",
      "severity": "information",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_w7yyhz1n52",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1\nrc := 0\n\nLOOP FOR x1 := 1 UNTIL x1 > members\n     IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )\n      THEN rc := 1\n     END\n\n  END\n\nRETURN rc",
      "severity": "error",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_jl9wnkhxil",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_oz9l91e35a",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "validate",
      "expression": "# define vector with T/F value for each household\ntest := sapply(1:length(household_id), function(i){\n  hhid <- household_id[i]\n  all(1:members[i] %in% persons$person_id[persons$household_id == hhid])\n})\n\n# rule must hold for all households\nall(test)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_l1sraihg4d",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)\n\nDScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]= \n        DShousehold)[filter members= \"false\"]\nDSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0\n\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_8ihpw7p2vh",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "Estatistik",
      "expression": "turnover /= cost + profit",
      "severity": "error",
      "description": "cost + profit = turnover"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_8wvzirzlhn",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "validate",
      "expression": "\n# def_ratio\nmeani := mean(price_t)  + (price_tm1 - price_t)/length(price_t)\nratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))\n\n# rule_07\nratio >= 0.9 & ratio <= 1.1\n\n",
      "severity": "warning",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_upgsr1n2k5",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0\n",
      "severity": "warning",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_dgfvxlt27i",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_h7otzsd0j4",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "validate",
      "expression": "# def_03:\ncounts :=  table(level)\n\n# rule_03:\ncounts[\"high\"] < 0.1 * sum(counts)\n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_8q5p5zwsgr",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "validate",
      "expression": "# def_count:\nperson_count :=  table(person$household_id)\n\n# rule17:\nmembers == person_count[household_id]\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_eg3glly1qq",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid\nrc,tmp_decided, tmp_invalid := {0,0,0}\ntmp_age := EMPTY\nFOR EVERY tmp_age IN DATASET mat_Rule09 (age)\n\n   IF tmp_age  = EMPTY \n    THEN tmp_decided := 1 \n   \n     ELSE\n      IF NOT tmp_age  IN SEQUENCE (0++113)\n       THEN tmp_invalid := 1  \n      END\n   END\nEND\n\nIF tmp_decided = 0 AND  tmp_invalid = 1\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_iodx2udrh5",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1\n",
      "severity": "information",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_1xrrxpmegn",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)\n\nDScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]= \n        DShousehold)[filter members= \"false\"]\nDSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0\n\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_crgvatgouy",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1\n",
      "severity": "information",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_ba1m0wv1gy",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_city, counter\nrc, counter  := {0,0}\n\n  FOR EVERY tmp_city IN DATASET mat_Rule15 (postcode = postcode ; city )\n   IF city /= tmp_city\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_dxseo4eqn6",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,\n    male_child, female_child, male_adult, female_adult, male_senior, female_senior\nrc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}\n\n  FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)\n   IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END\n\n  END\n    IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0 \n     THEN rc := 1\n    END\n\n\nRETURN rc",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set."
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_uff218k2p5",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "validate",
      "expression": "# rule_08:\nyear_of_birth == persons$year_of_birth\n",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_3nkfbjd6bs",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=household-id(identifier), person-id(identifier)\n\n\nDSmerge:=merge (DShousehold as \"DSh\", DSpersons as \"DSp\" \n        on DSh#household-id=DSp#household-id, \n        return \n        (DSh#household-id as household-id,DSh#person-id as person-id,DSp#members as members))\n \n\nDSout:= DSmerge[filter person-id < 1 or person-id>members][keep (household-id,members)][aggregate count (members)] = 0\n\nDSdist:= DSmerge[rename (person-id) as \"p_id\" role \"measure\"][aggregate count_distinct (p_id)][filter p id <> members]\n[aggregate count (members)] = 0\n\n\nDSr := (DSout and DSdist)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_el8lz036v",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "validate",
      "expression": "# def_rel_4:\nrel_4 :=  person_id[relation_to_head == 4]\n\n# def_rel_3:\nspouse_of_rel_3 :=  spouse_id[relation_to_head == 3]\n\n# rule_12:\nall(rel_4 %in% spouse_of_rel_3)\n",
      "severity": "error",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_qbr2u8gryu",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "validate",
      "expression": "# rule_04:\n(price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <= \n    0.5 * price_Ymin1\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_5wrjn8hbul",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "VTL 1.0",
      "expression": "DS= business-id, cost, profit, turnover \n\nDSr:= (DS#cost + DS#profit) = DS#turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_c9mucl9y5h",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit\nrc,tmp_sum,hit  := {0,0,0}\n\ntmp_AnzSst := FUNCTION LENGTH (level)\n\nIF tmp_AnzSst IN SEQUENCE  (1,3)\n THEN \n\n  FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )\n\n   IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND \n                          FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n   IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND \n                          FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n END\n\n  \"Check\"\n  IF tmp_sum /= weight AND hit = 1\n   THEN rc := 1\n  END\n\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_h0gxn8e8v7",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "validate",
      "expression": "# rule_04:\n(price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <= \n    0.5 * price_Ymin1\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_r67ttecb9u",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1\nrc := 0\n\nLOOP FOR x1 := 1 UNTIL x1 > members\n     IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )\n      THEN rc := 1\n     END\n\n  END\n\nRETURN rc",
      "severity": "error",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_27q5evftc9",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0\n",
      "severity": "warning",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_fu7gnae6yh",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "validate",
      "expression": "# rule_01:\nhours_worked >= 1 & hours_worked <= 80\n",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_5quyszdt64",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_pnzgyh3vz2",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head\nrc := {0}\ntmp_relation_to_head := EMPTY\n\nIF relation_to_head ='4'\n THEN   \n\n   IF NOT spouse_id IN DATASET mat_Rule12 (person_id)\n    THEN rc := 1\n     ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )\n\n      IF tmp_relation_to_head /= '3'\n       THEN  rc := 1\n      END\n   END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_gi7iqirupc",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "validate",
      "expression": "# rule_11:\nsum(business_id == 100 & turnover > 1e+06) == 1\n",
      "severity": "error",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_mue3q89js2",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count\nrc,tmp_undecided, tmp_count := {1,0,0}\ntmp_turnover := EMPTY\n\n  FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )\n\n   IF tmp_turnover  = EMPTY \n    THEN tmp_undecided := 1 \n   \n     ELSE\n      IF tmp_turnover > 1000000\n       THEN tmp_count :=  tmp_count + 1  \n      END\n   END\n END\n\n IF tmp_undecided = 1 OR  tmp_count = 1\n  THEN rc := 0\n END\n\n\n\nRETURN rc",
      "severity": "warning",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_syfoywlgpu",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "validate",
      "expression": "# def_age_gp:\nage_gp :=  age[match(grandchild_of, person_id)]\n\n# rule_04:\nage_gp - 28 >= age\n",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_60pscc1phg",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover \nrc := 1\ntmp_turnover := EMPTY\n\nFOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )\n\n\n  IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000\n   THEN rc := 0\n  END\n\nEND\n\nRETURN rc",
      "severity": "information",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_x71oga20me",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "VTL 1.0",
      "expression": "DS=level \n \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"]\nDSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1) \n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_f9w8astmra",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover \nrc := 1\ntmp_turnover := EMPTY\n\nFOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )\n\n\n  IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000\n   THEN rc := 0\n  END\n\nEND\n\nRETURN rc",
      "severity": "information",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_el0ocbvnv9",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total\nrc,z1,total := {0,0,0}\n\nFOR EVERY s1  IN DATASET mat_Rule03 (level1)\n\n   IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"\n   IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"\n\nEND\n\n\"Check relative occurrence of value 'high'\"\n\nIF z1 > total * 0.1 THEN rc := 1 END\n\nRETURN rc",
      "severity": "warning",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_rrmi5mhckl",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "validate",
      "expression": "\n# def_ratio\nmeani := mean(price_t)  + (price_tm1 - price_t)/length(price_t)\nratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))\n\n# rule_07\nratio >= 0.9 & ratio <= 1.1\n\n",
      "severity": "warning",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_yv5mnhv6rv",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0\n",
      "severity": "warning",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_wpj2upyk37",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "VTL 1.0",
      "expression": "DS= business-id, cost, profit, turnover \n\nDSr:= (DS#cost + DS#profit) = DS#turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_pw5tu6g2aj",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_n8vwa7mxpw",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "validate",
      "expression": "# rule_10:\nany(business_id == 100 & turnover > 1e+06)\n",
      "severity": "information",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_lqh0tkfub9",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "Estatistik",
      "expression": "DECLARE rc\nrc := 0\n\n\"Haushalt = household\"\n\nIF NOT  SEQUENCE (person_id , person , year_of_birth) \n IN DATASET Haushalt (person_id , person , year_of_birth)\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_azgmqe61w3",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )\n  counter := counter + 1\n\n\n    IF counter /= 1\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_xafdqu4ckl",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age\ntmp_age := EMPTY\n\n  tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)\n\nIF tmp_age - 28 < age\n THEN rc := 1\nEND\n\n\nRETURN rc",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_q1ipppgpec",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_city, counter\nrc, counter  := {0,0}\n\n  FOR EVERY tmp_city IN DATASET mat_Rule15 (postcode = postcode ; city )\n   IF city /= tmp_city\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_h4h4id12np",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1 \n\nDSout:=DS[filter season=\"out\"]\nDSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic \n   see page 42 VTL-part1 */\n",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_ri6pd0zjv6",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_4pk3decmbl",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "validate",
      "expression": "# rule_10:\nany(business_id == 100 & turnover > 1e+06)\n",
      "severity": "information",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_eeyfli4htb",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr\nrc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}\n\n\"Count totals SP2 and SP3 across all records\"\n  FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)\n          counter := counter + 1\n          s_t   := s_t + t\n          s_tm1 := s_tm1 + tm1\n\n  END\n\n\"Evaluate result\"\n\nIF counter > 0\n\n  THEN \n    \"Compute previous average\"\n    d_t       := s_t   / counter\n    d_tm1     := s_tm1 / counter\n\t\n    \"Compute new average\"\n    d_t_neu := (s_t - price_t + price_tm1) / counter\n\n    \"Compute relative size of new average\"\n     DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)\n\n  \"Check\"\n  IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)\n   THEN rc := 1\n  END\n\nEND \n \nRETURN rc",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_24etme04f0",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count\nrc,tmp_undecided, tmp_count := {1,0,0}\ntmp_turnover := EMPTY\n\n  FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )\n\n   IF tmp_turnover  = EMPTY \n    THEN tmp_undecided := 1 \n   \n     ELSE\n      IF tmp_turnover > 1000000\n       THEN tmp_count :=  tmp_count + 1  \n      END\n   END\n END\n\n IF tmp_undecided = 1 OR  tmp_count = 1\n  THEN rc := 0\n END\n\n\n\nRETURN rc",
      "severity": "warning",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.561Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_cz2xw7titv",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "validate",
      "expression": "# rule_15:\npostcode ~ city\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_erknuaug03",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "VTL 1.0",
      "expression": "DS= business-id, cost, profit, turnover \n\nDSr:= (DS#cost + DS#profit) = DS#turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_yjvh4lpnxv",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)\n\n\nDScount := DS[calc 1 as msr_count role \"MEASURE\"]\nDSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] =\nDScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)]\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_9hzmi805un",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "validate",
      "expression": "# rule_11:\nsum(business_id == 100 & turnover > 1e+06) == 1\n",
      "severity": "error",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_qkpsq4jra5",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier)\nDSgender= gender(identifier) {male, female}\nDSage =age-group(identifier) {child, adult, senior}\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,\n    on\n    (1 = 1)\n    return\n   (DSgender#gender as \"gender\",DSage #age-group as \"age-group\"))\nDSdiff := DSmerge setdiff DS[keep (gender, age-group)]\nDSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_scvkmszhmg",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "Estatistik",
      "expression": "DECLARE rc\nrc := 0\n\n\"Haushalt = household\"\n\nIF NOT  SEQUENCE (person_id , person , year_of_birth) \n IN DATASET Haushalt (person_id , person , year_of_birth)\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_c2seu4ftfn",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "validate",
      "expression": "# rule_09:\nall(age >= 0 & age <= 113)\n",
      "severity": "error",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_5xpliolkms",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=household-id(identifier), person-id(identifier)\n\n\nDSmerge:=merge (DShousehold as \"DSh\", DSpersons as \"DSp\" \n        on DSh#household-id=DSp#household-id, \n        return \n        (DSh#household-id as household-id,DSh#person-id as person-id,DSp#members as members))\n \n\nDSout:= DSmerge[filter person-id < 1 or person-id>members][keep (household-id,members)][aggregate count (members)] = 0\n\nDSdist:= DSmerge[rename (person-id) as \"p_id\" role \"measure\"][aggregate count_distinct (p_id)][filter p id <> members]\n[aggregate count (members)] = 0\n\n\nDSr := (DSout and DSdist)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_fzkqzf3mf4",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), spouse-id, relation_to_head\n\nDSfilter := DS[filter relation_to_head = 4]\nDSmerge := merge(DS \"DSx\",DS \"DSy\",\n    on\n    (DSy#spouse-id = DSx#person-id and DSy#relation_to_head = 3 and DSx#relation_to_head = 4)\n    return\n    (DSx#person-id as \"person-id\"))\n\nDSnot_exists := DSfilter not_exists_in DSmerge\n\nDScount := DSnot_exists[calc 1 as \"id\" role \"identifier\"][keep (id, person_id)][aggregate count (person_id)] = 0\n",
      "severity": "information",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_emgp2z4z7s",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=household-id(identifier), person-id(identifier)\n\n\nDSmerge:=merge (DShousehold as \"DSh\", DSpersons as \"DSp\" \n        on DSh#household-id=DSp#household-id, \n        return \n        (DSh#household-id as household-id,DSh#person-id as person-id,DSp#members as members))\n \n\nDSout:= DSmerge[filter person-id < 1 or person-id>members][keep (household-id,members)][aggregate count (members)] = 0\n\nDSdist:= DSmerge[rename (person-id) as \"p_id\" role \"measure\"][aggregate count_distinct (p_id)][filter p id <> members]\n[aggregate count (members)] = 0\n\n\nDSr := (DSout and DSdist)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_zwuzl91pp3",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "VTL 1.0",
      "expression": "DS=level \n \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"]\nDSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1) \n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_o7jyjtzjaz",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "validate",
      "expression": "# def_counts:\ncounts :=  table(gender, age_group)\n\n# rule_13:\nall(counts <= 1)\n",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_k0tg0vnhnl",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1 \n\nDSout:=DS[filter season=\"out\"]\nDSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic \n   see page 42 VTL-part1 */\n",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_l0h3vhw2d4",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "validate",
      "expression": "# rule_15:\npostcode ~ city\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_nzz9ogmrje",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)\n\nDScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]= \n        DShousehold)[filter members= \"false\"]\nDSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0\n\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_w142065jmb",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of \n\nDSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"  \non (DSgp#person-id= DSgc# grandchild_of),\nreturn (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")\n \nDSr:= (DSmerge#gp_age-28) >= DSmerge#age\n\nDSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]\n\n",
      "severity": "error",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_qagdpo70nu",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight\n\n/*\n * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)\n *\n *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN\n *  x1                      1\t      +\n *  x1.1          x1\t      2\t      +\n *  x1.2          x1\t      2\t      +\n *  x1.3          x1\t      2\t      +\n *  x2                      1       +\n *  x2.1          x2\t      2\t      +\n */\n\nDShierarchy := hierarchy(DS, level, \"HRC\", false)\nDScond := (DShierarchy = DS)[filter weight = \"false\"]\nDSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_pss9i5w8bg",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "VTL 1.0",
      "expression": "DS=level \n \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"]\nDSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1) \n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_d0dxqm5cfx",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth\nDS_p= person-id(identifier),person, year_of_birth, gender\n \nDSr:= DS_h#year_of_birth=DS_p#year_of_birth\n",
      "severity": "information",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_44ploqxwxm",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "validate",
      "expression": "# def_count:\nperson_count :=  table(person$household_id)\n\n# rule17:\nmembers == person_count[household_id]\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_i26e8z3wu0",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "validate",
      "expression": "# def_03:\ncounts :=  table(level)\n\n# rule_03:\ncounts[\"high\"] < 0.1 * sum(counts)\n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_gomm7kstfz",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier)\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"]\nDScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1]\nDSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0\n",
      "severity": "information",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_cvjiu78fgt",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "validate",
      "expression": "# def_age_gp:\nage_gp :=  age[match(grandchild_of, person_id)]\n\n# rule_04:\nage_gp - 28 >= age\n",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_g10orzhaow",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total\nrc,z1,total := {0,0,0}\n\nFOR EVERY s1  IN DATASET mat_Rule03 (level1)\n\n   IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"\n   IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"\n\nEND\n\n\"Check relative occurrence of value 'high'\"\n\nIF z1 > total * 0.1 THEN rc := 1 END\n\nRETURN rc",
      "severity": "warning",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_4d2cosxmjc",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0\n",
      "severity": "warning",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_suej5hrz5b",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1 \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)]\nDSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)]\nDSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)]\nDScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)]\nDSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1\n",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_3nttxq17ic",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "validate",
      "expression": "# def_03:\ncounts :=  table(level)\n\n# rule_03:\ncounts[\"high\"] < 0.1 * sum(counts)\n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_inp6jscwex",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age\n\nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]\n\nDScond:= DScalc[filter age between 0 and 113]\n\nDSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]\n\n",
      "severity": "information",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_mlg5gbzo3b",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier)\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"]\nDScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1]\nDSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0\n",
      "severity": "information",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_wtfc7nbqhs",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )\n  counter := counter + 1\n\n\n    IF counter /= 1\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_xjljszejio",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover \nrc := 1\ntmp_turnover := EMPTY\n\nFOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )\n\n\n  IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000\n   THEN rc := 0\n  END\n\nEND\n\nRETURN rc",
      "severity": "information",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_2i7mtivx8e",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,\n    male_child, female_child, male_adult, female_adult, male_senior, female_senior\nrc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}\n\n  FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)\n   IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END\n\n  END\n    IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0 \n     THEN rc := 1\n    END\n\n\nRETURN rc",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set."
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_o5eet3qdcm",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)\n\n\nDScount := DS[calc 1 as msr_count role \"MEASURE\"]\nDSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] =\nDScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)]\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_krs0n731h8",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head\nrc := {0}\ntmp_relation_to_head := EMPTY\n\nIF relation_to_head ='4'\n THEN   \n\n   IF NOT spouse_id IN DATASET mat_Rule12 (person_id)\n    THEN rc := 1\n     ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )\n\n      IF tmp_relation_to_head /= '3'\n       THEN  rc := 1\n      END\n   END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_yyv7zkqbsf",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head\nrc := {0}\ntmp_relation_to_head := EMPTY\n\nIF relation_to_head ='4'\n THEN   \n\n   IF NOT spouse_id IN DATASET mat_Rule12 (person_id)\n    THEN rc := 1\n     ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )\n\n      IF tmp_relation_to_head /= '3'\n       THEN  rc := 1\n      END\n   END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_7u4m8x7f6v",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "validate",
      "expression": "# rule_04:\n(price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <= \n    0.5 * price_Ymin1\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_v597husf3y",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head\nrc := {0}\ntmp_relation_to_head := EMPTY\n\nIF relation_to_head ='4'\n THEN   \n\n   IF NOT spouse_id IN DATASET mat_Rule12 (person_id)\n    THEN rc := 1\n     ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )\n\n      IF tmp_relation_to_head /= '3'\n       THEN  rc := 1\n      END\n   END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_1gzt2l09gr",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of \n\nDSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"  \non (DSgp#person-id= DSgc# grandchild_of),\nreturn (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")\n \nDSr:= (DSmerge#gp_age-28) >= DSmerge#age\n\nDSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]\n\n",
      "severity": "error",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_8gq46gf5je",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1 \n\nDSout:=DS[filter season=\"out\"]\nDSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic \n   see page 42 VTL-part1 */\n",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_pllns2hz07",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked\n\nDSr:= DS#hours_worked between 1 and 80\n/* In case a value in hours_worked is NULL the value returned will be NULL */\n.\n",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_sa0fo1yuhp",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "validate",
      "expression": "# rule_04:\n(price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <= \n    0.5 * price_Ymin1\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_i8wia55wk8",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "validate",
      "expression": "# rule_01:\nhours_worked >= 1 & hours_worked <= 80\n",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_66pl1eeaqa",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "validate",
      "expression": "\n# def_ratio\nmeani := mean(price_t)  + (price_tm1 - price_t)/length(price_t)\nratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))\n\n# rule_07\nratio >= 0.9 & ratio <= 1.1\n\n",
      "severity": "warning",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_zq14mjvs29",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "validate",
      "expression": "# rule_04:\n(price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <= \n    0.5 * price_Ymin1\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_6fm49bni0a",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked\n\nDSr:= DS#hours_worked between 1 and 80\n/* In case a value in hours_worked is NULL the value returned will be NULL */\n.\n",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_igx3984pgq",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)\n\n\nDScount := DS[calc 1 as msr_count role \"MEASURE\"]\nDSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] =\nDScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)]\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_ehgbnt4f5z",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight\n\n/*\n * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)\n *\n *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN\n *  x1                      1\t      +\n *  x1.1          x1\t      2\t      +\n *  x1.2          x1\t      2\t      +\n *  x1.3          x1\t      2\t      +\n *  x2                      1       +\n *  x2.1          x2\t      2\t      +\n */\n\nDShierarchy := hierarchy(DS, level, \"HRC\", false)\nDScond := (DShierarchy = DS)[filter weight = \"false\"]\nDSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_unjnj1mpf4",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "validate",
      "expression": "# def_rel_4:\nrel_4 :=  person_id[relation_to_head == 4]\n\n# def_rel_3:\nspouse_of_rel_3 :=  spouse_id[relation_to_head == 3]\n\n# rule_12:\nall(rel_4 %in% spouse_of_rel_3)\n",
      "severity": "error",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_zwyvtfytvk",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier)\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"]\nDScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1]\nDSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0\n",
      "severity": "information",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_7ylwenv9vo",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "validate",
      "expression": "# rule_06:\nif (season == \"out\") price_t == price_tmin1 & quantity_t == \n    quantity_tmin1\n",
      "severity": "information",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_cgc41qglkx",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of \n\nDSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"  \non (DSgp#person-id= DSgc# grandchild_of),\nreturn (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")\n \nDSr:= (DSmerge#gp_age-28) >= DSmerge#age\n\nDSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]\n\n",
      "severity": "error",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_2umlxeahha",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "validate",
      "expression": "# rule 14\nall(table(gender, age_group) >= 1) & \n  all(c(\"male\", \"female\") %in% gender) &\n  all(c(\"child\",\"adult\",\"senior\") %in% age_group)\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_28li6cw4xs",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=household-id(identifier), person-id(identifier)\n\n\nDSmerge:=merge (DShousehold as \"DSh\", DSpersons as \"DSp\" \n        on DSh#household-id=DSp#household-id, \n        return \n        (DSh#household-id as household-id,DSh#person-id as person-id,DSp#members as members))\n \n\nDSout:= DSmerge[filter person-id < 1 or person-id>members][keep (household-id,members)][aggregate count (members)] = 0\n\nDSdist:= DSmerge[rename (person-id) as \"p_id\" role \"measure\"][aggregate count_distinct (p_id)][filter p id <> members]\n[aggregate count (members)] = 0\n\n\nDSr := (DSout and DSdist)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_1ro0jgvvv9",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_5h7j8ln47q",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth\nDS_p= person-id(identifier),person, year_of_birth, gender\n \nDSr:= DS_h#year_of_birth=DS_p#year_of_birth\n",
      "severity": "information",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_i6bbdoqis9",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY)\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_2x06vy73j6",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "validate",
      "expression": "# rule_04:\n(price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <= \n    0.5 * price_Ymin1\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_zthulpt7wo",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )\n  counter := counter + 1\n\n\n    IF counter /= 1\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_25jxjqjza7",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "validate",
      "expression": "# rule_08:\nyear_of_birth == persons$year_of_birth\n",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_mtyrkc68il",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_y0br79q4je",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "validate",
      "expression": "# rule_08:\nyear_of_birth == persons$year_of_birth\n",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_8xow07xgj2",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0\n",
      "severity": "warning",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_gfq47cxu84",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "validate",
      "expression": "# rule_04:\n(price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <= \n    0.5 * price_Ymin1\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_4f09sugodd",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit\nrc,tmp_sum,hit  := {0,0,0}\n\ntmp_AnzSst := FUNCTION LENGTH (level)\n\nIF tmp_AnzSst IN SEQUENCE  (1,3)\n THEN \n\n  FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )\n\n   IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND \n                          FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n   IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND \n                          FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n END\n\n  \"Check\"\n  IF tmp_sum /= weight AND hit = 1\n   THEN rc := 1\n  END\n\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_x09zwcsfox",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "validate",
      "expression": "# rule_02:\ncost + profit == turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_eg7otj93sk",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), spouse-id, relation_to_head\n\nDSfilter := DS[filter relation_to_head = 4]\nDSmerge := merge(DS \"DSx\",DS \"DSy\",\n    on\n    (DSy#spouse-id = DSx#person-id and DSy#relation_to_head = 3 and DSx#relation_to_head = 4)\n    return\n    (DSx#person-id as \"person-id\"))\n\nDSnot_exists := DSfilter not_exists_in DSmerge\n\nDScount := DSnot_exists[calc 1 as \"id\" role \"identifier\"][keep (id, person_id)][aggregate count (person_id)] = 0\n",
      "severity": "information",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_ewnmt72zqd",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of \n\nDSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"  \non (DSgp#person-id= DSgc# grandchild_of),\nreturn (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")\n \nDSr:= (DSmerge#gp_age-28) >= DSmerge#age\n\nDSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]\n\n",
      "severity": "error",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_4q4ixkpjbc",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "validate",
      "expression": "# rule_02:\ncost + profit == turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_gs4eerwq9u",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1\n",
      "severity": "information",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_01lbdcq8k3",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "validate",
      "expression": "# rule_06:\nif (season == \"out\") price_t == price_tmin1 & quantity_t == \n    quantity_tmin1\n",
      "severity": "information",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_a7pgqla7zp",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "Estatistik",
      "expression": "DECLARE rc\nrc := 0\n\n\"Haushalt = household\"\n\nIF NOT  SEQUENCE (person_id , person , year_of_birth) \n IN DATASET Haushalt (person_id , person , year_of_birth)\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_nrpsw752sr",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_city, counter\nrc, counter  := {0,0}\n\n  FOR EVERY tmp_city IN DATASET mat_Rule15 (postcode = postcode ; city )\n   IF city /= tmp_city\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_mluqqmckmo",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "validate",
      "expression": "# def_age_gp:\nage_gp :=  age[match(grandchild_of, person_id)]\n\n# rule_04:\nage_gp - 28 >= age\n",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.562Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_nqeuegxb7j",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_157z487vhw",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth\nDS_p= person-id(identifier),person, year_of_birth, gender\n \nDSr:= DS_h#year_of_birth=DS_p#year_of_birth\n",
      "severity": "information",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_ttte33dec3",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_5gg0b1l3l0",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count\nrc,tmp_undecided, tmp_count := {1,0,0}\ntmp_turnover := EMPTY\n\n  FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )\n\n   IF tmp_turnover  = EMPTY \n    THEN tmp_undecided := 1 \n   \n     ELSE\n      IF tmp_turnover > 1000000\n       THEN tmp_count :=  tmp_count + 1  \n      END\n   END\n END\n\n IF tmp_undecided = 1 OR  tmp_count = 1\n  THEN rc := 0\n END\n\n\n\nRETURN rc",
      "severity": "warning",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_glo6d5isdk",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier)\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"]\nDScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1]\nDSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0\n",
      "severity": "information",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_wfswt5qayd",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth\nDS_p= person-id(identifier),person, year_of_birth, gender\n \nDSr:= DS_h#year_of_birth=DS_p#year_of_birth\n",
      "severity": "information",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_ayydfe70yg",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)\n\nDScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]= \n        DShousehold)[filter members= \"false\"]\nDSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0\n\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_44nzom95yd",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "validate",
      "expression": "# rule_15:\npostcode ~ city\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_bjseecs248",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "validate",
      "expression": "# rule_02:\ncost + profit == turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_13wl146r3i",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "validate",
      "expression": "# def_age_gp:\nage_gp :=  age[match(grandchild_of, person_id)]\n\n# rule_04:\nage_gp - 28 >= age\n",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_apaggrtwie",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier)\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"]\nDScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1]\nDSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0\n",
      "severity": "information",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_dq3ffy8cl2",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "validate",
      "expression": "# def_03:\ncounts :=  table(level)\n\n# rule_03:\ncounts[\"high\"] < 0.1 * sum(counts)\n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_pnmr8ssd6u",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr\nrc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}\n\n\"Count totals SP2 and SP3 across all records\"\n  FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)\n          counter := counter + 1\n          s_t   := s_t + t\n          s_tm1 := s_tm1 + tm1\n\n  END\n\n\"Evaluate result\"\n\nIF counter > 0\n\n  THEN \n    \"Compute previous average\"\n    d_t       := s_t   / counter\n    d_tm1     := s_tm1 / counter\n\t\n    \"Compute new average\"\n    d_t_neu := (s_t - price_t + price_tm1) / counter\n\n    \"Compute relative size of new average\"\n     DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)\n\n  \"Check\"\n  IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)\n   THEN rc := 1\n  END\n\nEND \n \nRETURN rc",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_f3b6bv2zio",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit\nrc,tmp_sum,hit  := {0,0,0}\n\ntmp_AnzSst := FUNCTION LENGTH (level)\n\nIF tmp_AnzSst IN SEQUENCE  (1,3)\n THEN \n\n  FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )\n\n   IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND \n                          FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n   IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND \n                          FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n END\n\n  \"Check\"\n  IF tmp_sum /= weight AND hit = 1\n   THEN rc := 1\n  END\n\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_xgndyq7jrb",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth\nDS_p= person-id(identifier),person, year_of_birth, gender\n \nDSr:= DS_h#year_of_birth=DS_p#year_of_birth\n",
      "severity": "information",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_mbsbmsr70f",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid\nrc,tmp_decided, tmp_invalid := {0,0,0}\ntmp_age := EMPTY\nFOR EVERY tmp_age IN DATASET mat_Rule09 (age)\n\n   IF tmp_age  = EMPTY \n    THEN tmp_decided := 1 \n   \n     ELSE\n      IF NOT tmp_age  IN SEQUENCE (0++113)\n       THEN tmp_invalid := 1  \n      END\n   END\nEND\n\nIF tmp_decided = 0 AND  tmp_invalid = 1\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_7ok34hrexr",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1 \n\nDSout:=DS[filter season=\"out\"]\nDSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic \n   see page 42 VTL-part1 */\n",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_14rmmkc437",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "validate",
      "expression": "# def_age_gp:\nage_gp :=  age[match(grandchild_of, person_id)]\n\n# rule_04:\nage_gp - 28 >= age\n",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_jvkqe2tnzm",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age\n\nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]\n\nDScond:= DScalc[filter age between 0 and 113]\n\nDSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]\n\n",
      "severity": "information",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_x9q6yduwkh",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)\n\nDScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]= \n        DShousehold)[filter members= \"false\"]\nDSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0\n\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_p9ypsatxpc",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid\nrc,tmp_decided, tmp_invalid := {0,0,0}\ntmp_age := EMPTY\nFOR EVERY tmp_age IN DATASET mat_Rule09 (age)\n\n   IF tmp_age  = EMPTY \n    THEN tmp_decided := 1 \n   \n     ELSE\n      IF NOT tmp_age  IN SEQUENCE (0++113)\n       THEN tmp_invalid := 1  \n      END\n   END\nEND\n\nIF tmp_decided = 0 AND  tmp_invalid = 1\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_oq5hzsphfr",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr\nrc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}\n\n\"Count totals SP2 and SP3 across all records\"\n  FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)\n          counter := counter + 1\n          s_t   := s_t + t\n          s_tm1 := s_tm1 + tm1\n\n  END\n\n\"Evaluate result\"\n\nIF counter > 0\n\n  THEN \n    \"Compute previous average\"\n    d_t       := s_t   / counter\n    d_tm1     := s_tm1 / counter\n\t\n    \"Compute new average\"\n    d_t_neu := (s_t - price_t + price_tm1) / counter\n\n    \"Compute relative size of new average\"\n     DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)\n\n  \"Check\"\n  IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)\n   THEN rc := 1\n  END\n\nEND \n \nRETURN rc",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_iwahdb84bi",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age\n\nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]\n\nDScond:= DScalc[filter age between 0 and 113]\n\nDSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]\n\n",
      "severity": "information",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_xdun7icn2b",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "validate",
      "expression": "# rule_04:\n(price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <= \n    0.5 * price_Ymin1\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_ix3qgxt1kz",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "validate",
      "expression": "# rule_04:\n(price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <= \n    0.5 * price_Ymin1\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_86ttky50ad",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "validate",
      "expression": "# rule_04:\n(price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <= \n    0.5 * price_Ymin1\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_4zg9fyos5p",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "validate",
      "expression": "# rule_15:\npostcode ~ city\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_zd9ypcm9ff",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "validate",
      "expression": "# rule_11:\nsum(business_id == 100 & turnover > 1e+06) == 1\n",
      "severity": "error",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_cgy8xokvmn",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count\nrc,tmp_undecided, tmp_count := {1,0,0}\ntmp_turnover := EMPTY\n\n  FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )\n\n   IF tmp_turnover  = EMPTY \n    THEN tmp_undecided := 1 \n   \n     ELSE\n      IF tmp_turnover > 1000000\n       THEN tmp_count :=  tmp_count + 1  \n      END\n   END\n END\n\n IF tmp_undecided = 1 OR  tmp_count = 1\n  THEN rc := 0\n END\n\n\n\nRETURN rc",
      "severity": "warning",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_hi45y5g0o3",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "validate",
      "expression": "# def_counts:\ncounts :=  table(gender, age_group)\n\n# rule_13:\nall(counts <= 1)\n",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_sdf8djc9oj",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,\n    male_child, female_child, male_adult, female_adult, male_senior, female_senior\nrc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}\n\n  FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)\n   IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END\n\n  END\n    IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0 \n     THEN rc := 1\n    END\n\n\nRETURN rc",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set."
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_aywsradgjq",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0\n",
      "severity": "warning",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_ndaz8q983d",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover \nrc := 1\ntmp_turnover := EMPTY\n\nFOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )\n\n\n  IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000\n   THEN rc := 0\n  END\n\nEND\n\nRETURN rc",
      "severity": "information",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_xvrujsygtj",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "validate",
      "expression": "# def_count:\nperson_count :=  table(person$household_id)\n\n# rule17:\nmembers == person_count[household_id]\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_jqlkiu2zmn",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit\nrc,tmp_sum,hit  := {0,0,0}\n\ntmp_AnzSst := FUNCTION LENGTH (level)\n\nIF tmp_AnzSst IN SEQUENCE  (1,3)\n THEN \n\n  FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )\n\n   IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND \n                          FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n   IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND \n                          FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n END\n\n  \"Check\"\n  IF tmp_sum /= weight AND hit = 1\n   THEN rc := 1\n  END\n\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_qzl4hnhwzi",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier)\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"]\nDScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1]\nDSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0\n",
      "severity": "information",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_1k6olj6uwy",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)\n\n\nDScount := DS[calc 1 as msr_count role \"MEASURE\"]\nDSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] =\nDScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)]\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_cepllf1ttw",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_qn92fc71gt",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit\nrc,tmp_sum,hit  := {0,0,0}\n\ntmp_AnzSst := FUNCTION LENGTH (level)\n\nIF tmp_AnzSst IN SEQUENCE  (1,3)\n THEN \n\n  FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )\n\n   IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND \n                          FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n   IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND \n                          FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n END\n\n  \"Check\"\n  IF tmp_sum /= weight AND hit = 1\n   THEN rc := 1\n  END\n\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_lb9ud2p54l",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "validate",
      "expression": "# def_rel_4:\nrel_4 :=  person_id[relation_to_head == 4]\n\n# def_rel_3:\nspouse_of_rel_3 :=  spouse_id[relation_to_head == 3]\n\n# rule_12:\nall(rel_4 %in% spouse_of_rel_3)\n",
      "severity": "error",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_tc1kpv4s7v",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "validate",
      "expression": "# rule_04:\n(price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <= \n    0.5 * price_Ymin1\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_nwfcyzusho",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid\nrc,tmp_decided, tmp_invalid := {0,0,0}\ntmp_age := EMPTY\nFOR EVERY tmp_age IN DATASET mat_Rule09 (age)\n\n   IF tmp_age  = EMPTY \n    THEN tmp_decided := 1 \n   \n     ELSE\n      IF NOT tmp_age  IN SEQUENCE (0++113)\n       THEN tmp_invalid := 1  \n      END\n   END\nEND\n\nIF tmp_decided = 0 AND  tmp_invalid = 1\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_2xhppb7pej",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "validate",
      "expression": "# define parent:\nparents :=  sub(\"\\\\.[0-9]$\",\"\",level)\nis_parent := level %in% parents\n\n# define child sums, by search for parent pattern.\nchild_sums := sapply(level[is_parent], function(x){ \n    sum(weight[grepl(paste0(\"^\",x,\".[0-9]$\"),level)])\n  })\n# rule 16 \nall(weight[is_parent] == child_sums)\n\n",
      "severity": "error",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_q2psxdp9rm",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier)\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"]\nDScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1]\nDSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0\n",
      "severity": "information",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_4gpyglddsi",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "Estatistik",
      "expression": "DECLARE rc\nrc := 0\n\n\"Haushalt = household\"\n\nIF NOT  SEQUENCE (person_id , person , year_of_birth) \n IN DATASET Haushalt (person_id , person , year_of_birth)\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_9tarjavgbp",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total\nrc,z1,total := {0,0,0}\n\nFOR EVERY s1  IN DATASET mat_Rule03 (level1)\n\n   IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"\n   IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"\n\nEND\n\n\"Check relative occurrence of value 'high'\"\n\nIF z1 > total * 0.1 THEN rc := 1 END\n\nRETURN rc",
      "severity": "warning",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_1z9nik23e5",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1 \n\nDSout:=DS[filter season=\"out\"]\nDSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic \n   see page 42 VTL-part1 */\n",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_axmicxprms",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1 \n\nDSout:=DS[filter season=\"out\"]\nDSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic \n   see page 42 VTL-part1 */\n",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_5wchraczhb",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "validate",
      "expression": "# define vector with T/F value for each household\ntest := sapply(1:length(household_id), function(i){\n  hhid <- household_id[i]\n  all(1:members[i] %in% persons$person_id[persons$household_id == hhid])\n})\n\n# rule must hold for all households\nall(test)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_wlzxe3xryj",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "validate",
      "expression": "# def_count:\nperson_count :=  table(person$household_id)\n\n# rule17:\nmembers == person_count[household_id]\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_8xibb8fxx6",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)\n\n\nDScount := DS[calc 1 as msr_count role \"MEASURE\"]\nDSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] =\nDScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)]\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_fgydbq8uo8",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_mrw104np0q",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0\n",
      "severity": "warning",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_ylewmfycxr",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid\nrc,tmp_decided, tmp_invalid := {0,0,0}\ntmp_age := EMPTY\nFOR EVERY tmp_age IN DATASET mat_Rule09 (age)\n\n   IF tmp_age  = EMPTY \n    THEN tmp_decided := 1 \n   \n     ELSE\n      IF NOT tmp_age  IN SEQUENCE (0++113)\n       THEN tmp_invalid := 1  \n      END\n   END\nEND\n\nIF tmp_decided = 0 AND  tmp_invalid = 1\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_rbbhsqq2fl",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )\n   counter := counter + 1\n  END\n\n   IF counter /= members\n     THEN rc := 1\n    END\n\nRETURN rc",
      "severity": "error",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_pijg3zrr94",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), spouse-id, relation_to_head\n\nDSfilter := DS[filter relation_to_head = 4]\nDSmerge := merge(DS \"DSx\",DS \"DSy\",\n    on\n    (DSy#spouse-id = DSx#person-id and DSy#relation_to_head = 3 and DSx#relation_to_head = 4)\n    return\n    (DSx#person-id as \"person-id\"))\n\nDSnot_exists := DSfilter not_exists_in DSmerge\n\nDScount := DSnot_exists[calc 1 as \"id\" role \"identifier\"][keep (id, person_id)][aggregate count (person_id)] = 0\n",
      "severity": "information",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_e6iheutrgq",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "validate",
      "expression": "# rule_04:\n(price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <= \n    0.5 * price_Ymin1\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_dqn13d3mot",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier)\nDSgender= gender(identifier) {male, female}\nDSage =age-group(identifier) {child, adult, senior}\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,\n    on\n    (1 = 1)\n    return\n   (DSgender#gender as \"gender\",DSage #age-group as \"age-group\"))\nDSdiff := DSmerge setdiff DS[keep (gender, age-group)]\nDSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_3rkzhxg9fy",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "validate",
      "expression": "# rule_10:\nany(business_id == 100 & turnover > 1e+06)\n",
      "severity": "information",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_pm5a2c0to4",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr\nrc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}\n\n\"Count totals SP2 and SP3 across all records\"\n  FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)\n          counter := counter + 1\n          s_t   := s_t + t\n          s_tm1 := s_tm1 + tm1\n\n  END\n\n\"Evaluate result\"\n\nIF counter > 0\n\n  THEN \n    \"Compute previous average\"\n    d_t       := s_t   / counter\n    d_tm1     := s_tm1 / counter\n\t\n    \"Compute new average\"\n    d_t_neu := (s_t - price_t + price_tm1) / counter\n\n    \"Compute relative size of new average\"\n     DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)\n\n  \"Check\"\n  IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)\n   THEN rc := 1\n  END\n\nEND \n \nRETURN rc",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_xjg9rdzwsb",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head\nrc := {0}\ntmp_relation_to_head := EMPTY\n\nIF relation_to_head ='4'\n THEN   \n\n   IF NOT spouse_id IN DATASET mat_Rule12 (person_id)\n    THEN rc := 1\n     ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )\n\n      IF tmp_relation_to_head /= '3'\n       THEN  rc := 1\n      END\n   END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_085zyhnxfh",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "validate",
      "expression": "# rule_15:\npostcode ~ city\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_02saft73f4",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1 \n\nDSout:=DS[filter season=\"out\"]\nDSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic \n   see page 42 VTL-part1 */\n",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_537ztgxupx",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "validate",
      "expression": "# rule_10:\nany(business_id == 100 & turnover > 1e+06)\n",
      "severity": "information",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_wxpx6r5oou",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "validate",
      "expression": "# def_counts:\ncounts :=  table(gender, age_group)\n\n# rule_13:\nall(counts <= 1)\n",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_bb1yrr1e7o",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)\n\n\nDScount := DS[calc 1 as msr_count role \"MEASURE\"]\nDSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] =\nDScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)]\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_33yvhn7l83",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_jy1g54r1am",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "VTL 1.0",
      "expression": "DS=level \n \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"]\nDSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1) \n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_2bxielskef",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr\nrc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}\n\n\"Count totals SP2 and SP3 across all records\"\n  FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)\n          counter := counter + 1\n          s_t   := s_t + t\n          s_tm1 := s_tm1 + tm1\n\n  END\n\n\"Evaluate result\"\n\nIF counter > 0\n\n  THEN \n    \"Compute previous average\"\n    d_t       := s_t   / counter\n    d_tm1     := s_tm1 / counter\n\t\n    \"Compute new average\"\n    d_t_neu := (s_t - price_t + price_tm1) / counter\n\n    \"Compute relative size of new average\"\n     DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)\n\n  \"Check\"\n  IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)\n   THEN rc := 1\n  END\n\nEND \n \nRETURN rc",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.563Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_vsrlp4690e",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier)\nDSgender= gender(identifier) {male, female}\nDSage =age-group(identifier) {child, adult, senior}\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,\n    on\n    (1 = 1)\n    return\n   (DSgender#gender as \"gender\",DSage #age-group as \"age-group\"))\nDSdiff := DSmerge setdiff DS[keep (gender, age-group)]\nDSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_wfur4suxpr",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover \nrc := 1\ntmp_turnover := EMPTY\n\nFOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )\n\n\n  IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000\n   THEN rc := 0\n  END\n\nEND\n\nRETURN rc",
      "severity": "information",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_l3m36og8v4",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0\n",
      "severity": "warning",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_4yzdituwsf",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0\n",
      "severity": "warning",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_4eprn1fhqi",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "validate",
      "expression": "# rule_15:\npostcode ~ city\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_tncyfbyfn9",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit\nrc,tmp_sum,hit  := {0,0,0}\n\ntmp_AnzSst := FUNCTION LENGTH (level)\n\nIF tmp_AnzSst IN SEQUENCE  (1,3)\n THEN \n\n  FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )\n\n   IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND \n                          FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n   IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND \n                          FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n END\n\n  \"Check\"\n  IF tmp_sum /= weight AND hit = 1\n   THEN rc := 1\n  END\n\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_xg8t4y2l8z",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "Estatistik",
      "expression": "DECLARE rc\nrc := 0\n\n\"Haushalt = household\"\n\nIF NOT  SEQUENCE (person_id , person , year_of_birth) \n IN DATASET Haushalt (person_id , person , year_of_birth)\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_mwjwpn9fha",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "VTL 1.0",
      "expression": "DS= business-id, cost, profit, turnover \n\nDSr:= (DS#cost + DS#profit) = DS#turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_jjwm51mvb7",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier)\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"]\nDScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1]\nDSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0\n",
      "severity": "information",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_jxiwvzca3h",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total\nrc,z1,total := {0,0,0}\n\nFOR EVERY s1  IN DATASET mat_Rule03 (level1)\n\n   IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"\n   IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"\n\nEND\n\n\"Check relative occurrence of value 'high'\"\n\nIF z1 > total * 0.1 THEN rc := 1 END\n\nRETURN rc",
      "severity": "warning",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_hcc1gj7mwu",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked\n\nDSr:= DS#hours_worked between 1 and 80\n/* In case a value in hours_worked is NULL the value returned will be NULL */\n.\n",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_jaxtattv1m",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of \n\nDSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"  \non (DSgp#person-id= DSgc# grandchild_of),\nreturn (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")\n \nDSr:= (DSmerge#gp_age-28) >= DSmerge#age\n\nDSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]\n\n",
      "severity": "error",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_007nnean08",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "validate",
      "expression": "# def_age_gp:\nage_gp :=  age[match(grandchild_of, person_id)]\n\n# rule_04:\nage_gp - 28 >= age\n",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_cb9hch9z91",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of \n\nDSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"  \non (DSgp#person-id= DSgc# grandchild_of),\nreturn (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")\n \nDSr:= (DSmerge#gp_age-28) >= DSmerge#age\n\nDSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]\n\n",
      "severity": "error",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_2b5v1fird8",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=household-id(identifier), person-id(identifier)\n\n\nDSmerge:=merge (DShousehold as \"DSh\", DSpersons as \"DSp\" \n        on DSh#household-id=DSp#household-id, \n        return \n        (DSh#household-id as household-id,DSh#person-id as person-id,DSp#members as members))\n \n\nDSout:= DSmerge[filter person-id < 1 or person-id>members][keep (household-id,members)][aggregate count (members)] = 0\n\nDSdist:= DSmerge[rename (person-id) as \"p_id\" role \"measure\"][aggregate count_distinct (p_id)][filter p id <> members]\n[aggregate count (members)] = 0\n\n\nDSr := (DSout and DSdist)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_la0sc9g738",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )\n  counter := counter + 1\n\n\n    IF counter /= 1\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_v17dk13m0r",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "validate",
      "expression": "# def_age_gp:\nage_gp :=  age[match(grandchild_of, person_id)]\n\n# rule_04:\nage_gp - 28 >= age\n",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_y62f4a3e08",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0\n",
      "severity": "warning",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_xiixlg7oqi",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )\n   counter := counter + 1\n  END\n\n   IF counter /= members\n     THEN rc := 1\n    END\n\nRETURN rc",
      "severity": "error",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_phva447fe4",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_city, counter\nrc, counter  := {0,0}\n\n  FOR EVERY tmp_city IN DATASET mat_Rule15 (postcode = postcode ; city )\n   IF city /= tmp_city\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_vja689tlzb",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=household-id(identifier), person-id(identifier)\n\n\nDSmerge:=merge (DShousehold as \"DSh\", DSpersons as \"DSp\" \n        on DSh#household-id=DSp#household-id, \n        return \n        (DSh#household-id as household-id,DSh#person-id as person-id,DSp#members as members))\n \n\nDSout:= DSmerge[filter person-id < 1 or person-id>members][keep (household-id,members)][aggregate count (members)] = 0\n\nDSdist:= DSmerge[rename (person-id) as \"p_id\" role \"measure\"][aggregate count_distinct (p_id)][filter p id <> members]\n[aggregate count (members)] = 0\n\n\nDSr := (DSout and DSdist)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_zolxzqon9l",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth\nDS_p= person-id(identifier),person, year_of_birth, gender\n \nDSr:= DS_h#year_of_birth=DS_p#year_of_birth\n",
      "severity": "information",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_wrcp2oacgz",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,\n    male_child, female_child, male_adult, female_adult, male_senior, female_senior\nrc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}\n\n  FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)\n   IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END\n\n  END\n    IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0 \n     THEN rc := 1\n    END\n\n\nRETURN rc",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set."
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_wenjqu6hyu",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0\n",
      "severity": "warning",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_b5divnm4gv",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "Estatistik",
      "expression": "turnover /= cost + profit",
      "severity": "error",
      "description": "cost + profit = turnover"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_1naq8qmon2",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "validate",
      "expression": "# rule_11:\nsum(business_id == 100 & turnover > 1e+06) == 1\n",
      "severity": "error",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_4x53bv6h05",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "validate",
      "expression": "# rule_02:\ncost + profit == turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_bq7060te7y",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age\n\nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]\n\nDScond:= DScalc[filter age between 0 and 113]\n\nDSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]\n\n",
      "severity": "information",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_78ox8nfda0",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1 \n\nDSout:=DS[filter season=\"out\"]\nDSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic \n   see page 42 VTL-part1 */\n",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_e6jizu3tk7",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "validate",
      "expression": "# def_03:\ncounts :=  table(level)\n\n# rule_03:\ncounts[\"high\"] < 0.1 * sum(counts)\n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_wi8w9scz3b",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=household-id(identifier), person-id(identifier)\n\n\nDSmerge:=merge (DShousehold as \"DSh\", DSpersons as \"DSp\" \n        on DSh#household-id=DSp#household-id, \n        return \n        (DSh#household-id as household-id,DSh#person-id as person-id,DSp#members as members))\n \n\nDSout:= DSmerge[filter person-id < 1 or person-id>members][keep (household-id,members)][aggregate count (members)] = 0\n\nDSdist:= DSmerge[rename (person-id) as \"p_id\" role \"measure\"][aggregate count_distinct (p_id)][filter p id <> members]\n[aggregate count (members)] = 0\n\n\nDSr := (DSout and DSdist)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_nwaf1gnn57",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "VTL 1.0",
      "expression": "DS= business-id, cost, profit, turnover \n\nDSr:= (DS#cost + DS#profit) = DS#turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_trbcwcy4jd",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit\nrc,tmp_sum,hit  := {0,0,0}\n\ntmp_AnzSst := FUNCTION LENGTH (level)\n\nIF tmp_AnzSst IN SEQUENCE  (1,3)\n THEN \n\n  FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )\n\n   IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND \n                          FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n   IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND \n                          FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n END\n\n  \"Check\"\n  IF tmp_sum /= weight AND hit = 1\n   THEN rc := 1\n  END\n\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_b5b4edt3kp",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "validate",
      "expression": "# rule_15:\npostcode ~ city\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_7pf994pdkf",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "validate",
      "expression": "# def_rel_4:\nrel_4 :=  person_id[relation_to_head == 4]\n\n# def_rel_3:\nspouse_of_rel_3 :=  spouse_id[relation_to_head == 3]\n\n# rule_12:\nall(rel_4 %in% spouse_of_rel_3)\n",
      "severity": "error",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_rc072eazh8",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier)\nDSgender= gender(identifier) {male, female}\nDSage =age-group(identifier) {child, adult, senior}\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,\n    on\n    (1 = 1)\n    return\n   (DSgender#gender as \"gender\",DSage #age-group as \"age-group\"))\nDSdiff := DSmerge setdiff DS[keep (gender, age-group)]\nDSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_20oyaf63k1",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age\n\nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]\n\nDScond:= DScalc[filter age between 0 and 113]\n\nDSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]\n\n",
      "severity": "information",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_wxv8m7xb61",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1 \n\nDSout:=DS[filter season=\"out\"]\nDSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic \n   see page 42 VTL-part1 */\n",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_qezdjm07nz",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth\nDS_p= person-id(identifier),person, year_of_birth, gender\n \nDSr:= DS_h#year_of_birth=DS_p#year_of_birth\n",
      "severity": "information",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_lo2pbch8xr",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "validate",
      "expression": "# rule_15:\npostcode ~ city\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_3yey6zgkwe",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight\n\n/*\n * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)\n *\n *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN\n *  x1                      1\t      +\n *  x1.1          x1\t      2\t      +\n *  x1.2          x1\t      2\t      +\n *  x1.3          x1\t      2\t      +\n *  x2                      1       +\n *  x2.1          x2\t      2\t      +\n */\n\nDShierarchy := hierarchy(DS, level, \"HRC\", false)\nDScond := (DShierarchy = DS)[filter weight = \"false\"]\nDSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_xpkf1wo683",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_hy1q5gnupm",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)\n\n\nDScount := DS[calc 1 as msr_count role \"MEASURE\"]\nDSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] =\nDScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)]\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_37nz9s4zog",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )\n  counter := counter + 1\n\n\n    IF counter /= 1\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_56zkgryqru",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "validate",
      "expression": "# rule_04:\n(price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <= \n    0.5 * price_Ymin1\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_i5qhx0ihni",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "validate",
      "expression": "# rule_15:\npostcode ~ city\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_o3l7kovycd",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "validate",
      "expression": "# rule_02:\ncost + profit == turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_vuaeqsekd1",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "VTL 1.0",
      "expression": "DS= business-id, cost, profit, turnover \n\nDSr:= (DS#cost + DS#profit) = DS#turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_ppi3cqhm2y",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "validate",
      "expression": "\n# def_ratio\nmeani := mean(price_t)  + (price_tm1 - price_t)/length(price_t)\nratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))\n\n# rule_07\nratio >= 0.9 & ratio <= 1.1\n\n",
      "severity": "warning",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_37yqbbip4p",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1 \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)]\nDSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)]\nDSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)]\nDScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)]\nDSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1\n",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_w61muywk4h",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "validate",
      "expression": "# rule_01:\nhours_worked >= 1 & hours_worked <= 80\n",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_hm9vfpuxdh",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth\nDS_p= person-id(identifier),person, year_of_birth, gender\n \nDSr:= DS_h#year_of_birth=DS_p#year_of_birth\n",
      "severity": "information",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.564Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_fop2mwb5c7",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age\ntmp_age := EMPTY\n\n  tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)\n\nIF tmp_age - 28 < age\n THEN rc := 1\nEND\n\n\nRETURN rc",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_iquoxe86wd",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "validate",
      "expression": "# def_counts:\ncounts :=  table(gender, age_group)\n\n# rule_13:\nall(counts <= 1)\n",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_0p5700ro17",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "validate",
      "expression": "# def_counts:\ncounts :=  table(gender, age_group)\n\n# rule_13:\nall(counts <= 1)\n",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_uy1ecvytuv",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr\nrc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}\n\n\"Count totals SP2 and SP3 across all records\"\n  FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)\n          counter := counter + 1\n          s_t   := s_t + t\n          s_tm1 := s_tm1 + tm1\n\n  END\n\n\"Evaluate result\"\n\nIF counter > 0\n\n  THEN \n    \"Compute previous average\"\n    d_t       := s_t   / counter\n    d_tm1     := s_tm1 / counter\n\t\n    \"Compute new average\"\n    d_t_neu := (s_t - price_t + price_tm1) / counter\n\n    \"Compute relative size of new average\"\n     DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)\n\n  \"Check\"\n  IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)\n   THEN rc := 1\n  END\n\nEND \n \nRETURN rc",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_mkp9byn3m9",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "validate",
      "expression": "# rule_09:\nall(age >= 0 & age <= 113)\n",
      "severity": "error",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_xx3w6r2791",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "validate",
      "expression": "# rule 14\nall(table(gender, age_group) >= 1) & \n  all(c(\"male\", \"female\") %in% gender) &\n  all(c(\"child\",\"adult\",\"senior\") %in% age_group)\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_wujj73gkvh",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY)\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_akqlj22c1c",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "validate",
      "expression": "# define parent:\nparents :=  sub(\"\\\\.[0-9]$\",\"\",level)\nis_parent := level %in% parents\n\n# define child sums, by search for parent pattern.\nchild_sums := sapply(level[is_parent], function(x){ \n    sum(weight[grepl(paste0(\"^\",x,\".[0-9]$\"),level)])\n  })\n# rule 16 \nall(weight[is_parent] == child_sums)\n\n",
      "severity": "error",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_q25o0k5jv4",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight\n\n/*\n * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)\n *\n *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN\n *  x1                      1\t      +\n *  x1.1          x1\t      2\t      +\n *  x1.2          x1\t      2\t      +\n *  x1.3          x1\t      2\t      +\n *  x2                      1       +\n *  x2.1          x2\t      2\t      +\n */\n\nDShierarchy := hierarchy(DS, level, \"HRC\", false)\nDScond := (DShierarchy = DS)[filter weight = \"false\"]\nDSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_50d2c94siv",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "validate",
      "expression": "# rule_04:\n(price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <= \n    0.5 * price_Ymin1\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_2nijhhsvah",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1 \n\nDSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_aixfpprck4",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )\n  counter := counter + 1\n\n\n    IF counter /= 1\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_hxeczdk5e5",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "validate",
      "expression": "# rule_01:\nhours_worked >= 1 & hours_worked <= 80\n",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_9jawu6fenc",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1 \n\nDSout:=DS[filter season=\"out\"]\nDSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic \n   see page 42 VTL-part1 */\n",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_6sqx2007s3",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier)\nDSgender= gender(identifier) {male, female}\nDSage =age-group(identifier) {child, adult, senior}\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,\n    on\n    (1 = 1)\n    return\n   (DSgender#gender as \"gender\",DSage #age-group as \"age-group\"))\nDSdiff := DSmerge setdiff DS[keep (gender, age-group)]\nDSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_hbtozru53k",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_qof32zi994",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "validate",
      "expression": "\n# def_ratio\nmeani := mean(price_t)  + (price_tm1 - price_t)/length(price_t)\nratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))\n\n# rule_07\nratio >= 0.9 & ratio <= 1.1\n\n",
      "severity": "warning",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_wrwtm4ep0n",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1 \n\nDSout:=DS[filter season=\"out\"]\nDSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic \n   see page 42 VTL-part1 */\n",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_reeoe5ccfr",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1\nrc := 0\n\nLOOP FOR x1 := 1 UNTIL x1 > members\n     IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )\n      THEN rc := 1\n     END\n\n  END\n\nRETURN rc",
      "severity": "error",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_1vrq9oomhp",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier)\nDSgender= gender(identifier) {male, female}\nDSage =age-group(identifier) {child, adult, senior}\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,\n    on\n    (1 = 1)\n    return\n   (DSgender#gender as \"gender\",DSage #age-group as \"age-group\"))\nDSdiff := DSmerge setdiff DS[keep (gender, age-group)]\nDSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_ngtai11864",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "validate",
      "expression": "# rule_09:\nall(age >= 0 & age <= 113)\n",
      "severity": "error",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_21gm3qlmmo",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age\ntmp_age := EMPTY\n\n  tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)\n\nIF tmp_age - 28 < age\n THEN rc := 1\nEND\n\n\nRETURN rc",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_xi42gplps6",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1\n",
      "severity": "information",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_4eazq2k8hx",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "Estatistik",
      "expression": "DECLARE rc\nrc := 0\n\n\"Haushalt = household\"\n\nIF NOT  SEQUENCE (person_id , person , year_of_birth) \n IN DATASET Haushalt (person_id , person , year_of_birth)\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_oibx2vejds",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), spouse-id, relation_to_head\n\nDSfilter := DS[filter relation_to_head = 4]\nDSmerge := merge(DS \"DSx\",DS \"DSy\",\n    on\n    (DSy#spouse-id = DSx#person-id and DSy#relation_to_head = 3 and DSx#relation_to_head = 4)\n    return\n    (DSx#person-id as \"person-id\"))\n\nDSnot_exists := DSfilter not_exists_in DSmerge\n\nDScount := DSnot_exists[calc 1 as \"id\" role \"identifier\"][keep (id, person_id)][aggregate count (person_id)] = 0\n",
      "severity": "information",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_3ym81trux6",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight\n\n/*\n * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)\n *\n *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN\n *  x1                      1\t      +\n *  x1.1          x1\t      2\t      +\n *  x1.2          x1\t      2\t      +\n *  x1.3          x1\t      2\t      +\n *  x2                      1       +\n *  x2.1          x2\t      2\t      +\n */\n\nDShierarchy := hierarchy(DS, level, \"HRC\", false)\nDScond := (DShierarchy = DS)[filter weight = \"false\"]\nDSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_ja4qjammdc",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "VTL 1.0",
      "expression": "DS= business-id, cost, profit, turnover \n\nDSr:= (DS#cost + DS#profit) = DS#turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_1v5n82dkqb",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of \n\nDSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"  \non (DSgp#person-id= DSgc# grandchild_of),\nreturn (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")\n \nDSr:= (DSmerge#gp_age-28) >= DSmerge#age\n\nDSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]\n\n",
      "severity": "error",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_3s7ydv6dcn",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1\n",
      "severity": "information",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_86m6fvrkkk",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)\n\n\nDScount := DS[calc 1 as msr_count role \"MEASURE\"]\nDSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] =\nDScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)]\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_j6aggr8ir0",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "validate",
      "expression": "# def_counts:\ncounts :=  table(gender, age_group)\n\n# rule_13:\nall(counts <= 1)\n",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_mw06z1ffnt",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1 \n\nDSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_1rvngywgqa",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth\nDS_p= person-id(identifier),person, year_of_birth, gender\n \nDSr:= DS_h#year_of_birth=DS_p#year_of_birth\n",
      "severity": "information",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_trj0a5k2hg",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "validate",
      "expression": "\n# def_ratio\nmeani := mean(price_t)  + (price_tm1 - price_t)/length(price_t)\nratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))\n\n# rule_07\nratio >= 0.9 & ratio <= 1.1\n\n",
      "severity": "warning",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_tuz97ntrlz",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total\nrc,z1,total := {0,0,0}\n\nFOR EVERY s1  IN DATASET mat_Rule03 (level1)\n\n   IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"\n   IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"\n\nEND\n\n\"Check relative occurrence of value 'high'\"\n\nIF z1 > total * 0.1 THEN rc := 1 END\n\nRETURN rc",
      "severity": "warning",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_n5h2x54wfz",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY)\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_uwhyo64ppg",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1\nrc := 0\n\nLOOP FOR x1 := 1 UNTIL x1 > members\n     IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )\n      THEN rc := 1\n     END\n\n  END\n\nRETURN rc",
      "severity": "error",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_ftcc8y75nu",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_yuavtm6vnb",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_city, counter\nrc, counter  := {0,0}\n\n  FOR EVERY tmp_city IN DATASET mat_Rule15 (postcode = postcode ; city )\n   IF city /= tmp_city\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_ktxavivtu2",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )\n  counter := counter + 1\n\n\n    IF counter /= 1\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_8i7u1wn3mf",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier)\nDSgender= gender(identifier) {male, female}\nDSage =age-group(identifier) {child, adult, senior}\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,\n    on\n    (1 = 1)\n    return\n   (DSgender#gender as \"gender\",DSage #age-group as \"age-group\"))\nDSdiff := DSmerge setdiff DS[keep (gender, age-group)]\nDSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_r8y7plapcn",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "Estatistik",
      "expression": "DECLARE rc\nrc := 0\n\n\"Haushalt = household\"\n\nIF NOT  SEQUENCE (person_id , person , year_of_birth) \n IN DATASET Haushalt (person_id , person , year_of_birth)\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_5pzqka4d43",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "validate",
      "expression": "# rule_02:\ncost + profit == turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_i97hwwwt9p",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age\ntmp_age := EMPTY\n\n  tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)\n\nIF tmp_age - 28 < age\n THEN rc := 1\nEND\n\n\nRETURN rc",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_fofu3czr2n",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier)\nDSgender= gender(identifier) {male, female}\nDSage =age-group(identifier) {child, adult, senior}\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,\n    on\n    (1 = 1)\n    return\n   (DSgender#gender as \"gender\",DSage #age-group as \"age-group\"))\nDSdiff := DSmerge setdiff DS[keep (gender, age-group)]\nDSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_2lo6jh2pxf",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "validate",
      "expression": "# rule 14\nall(table(gender, age_group) >= 1) & \n  all(c(\"male\", \"female\") %in% gender) &\n  all(c(\"child\",\"adult\",\"senior\") %in% age_group)\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_abwr0gdnna",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked\n\nDSr:= DS#hours_worked between 1 and 80\n/* In case a value in hours_worked is NULL the value returned will be NULL */\n.\n",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_mnu9uojo39",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1 \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)]\nDSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)]\nDSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)]\nDScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)]\nDSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1\n",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_wj2osrcf7r",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)\n\n\nDScount := DS[calc 1 as msr_count role \"MEASURE\"]\nDSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] =\nDScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)]\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_lhaplgvwfh",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked\n\nDSr:= DS#hours_worked between 1 and 80\n/* In case a value in hours_worked is NULL the value returned will be NULL */\n.\n",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_j6rdb8vobw",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit\nrc,tmp_sum,hit  := {0,0,0}\n\ntmp_AnzSst := FUNCTION LENGTH (level)\n\nIF tmp_AnzSst IN SEQUENCE  (1,3)\n THEN \n\n  FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )\n\n   IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND \n                          FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n   IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND \n                          FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n END\n\n  \"Check\"\n  IF tmp_sum /= weight AND hit = 1\n   THEN rc := 1\n  END\n\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_w7c515jkjg",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "validate",
      "expression": "# rule_02:\ncost + profit == turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_27quu1i056",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "validate",
      "expression": "# rule_02:\ncost + profit == turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_wkjt4d5xzu",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "validate",
      "expression": "# rule_11:\nsum(business_id == 100 & turnover > 1e+06) == 1\n",
      "severity": "error",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_olo5j3kpyo",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )\n   counter := counter + 1\n  END\n\n   IF counter /= members\n     THEN rc := 1\n    END\n\nRETURN rc",
      "severity": "error",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_cpff1gvkyd",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "validate",
      "expression": "# rule_15:\npostcode ~ city\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_bq5ef04udk",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )\n  counter := counter + 1\n\n\n    IF counter /= 1\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_yhco9tcq7j",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth\nDS_p= person-id(identifier),person, year_of_birth, gender\n \nDSr:= DS_h#year_of_birth=DS_p#year_of_birth\n",
      "severity": "information",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_frkgl0chrn",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "validate",
      "expression": "# def_count:\nperson_count :=  table(person$household_id)\n\n# rule17:\nmembers == person_count[household_id]\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_7gtr5zg22m",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked\n\nDSr:= DS#hours_worked between 1 and 80\n/* In case a value in hours_worked is NULL the value returned will be NULL */\n.\n",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_fxffmire5x",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY)\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_ubq68u5s3n",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0\n",
      "severity": "warning",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_u59l8dzkas",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )\n   counter := counter + 1\n  END\n\n   IF counter /= members\n     THEN rc := 1\n    END\n\nRETURN rc",
      "severity": "error",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_yj6fotghzi",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), spouse-id, relation_to_head\n\nDSfilter := DS[filter relation_to_head = 4]\nDSmerge := merge(DS \"DSx\",DS \"DSy\",\n    on\n    (DSy#spouse-id = DSx#person-id and DSy#relation_to_head = 3 and DSx#relation_to_head = 4)\n    return\n    (DSx#person-id as \"person-id\"))\n\nDSnot_exists := DSfilter not_exists_in DSmerge\n\nDScount := DSnot_exists[calc 1 as \"id\" role \"identifier\"][keep (id, person_id)][aggregate count (person_id)] = 0\n",
      "severity": "information",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_pkdoc2dnxd",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), spouse-id, relation_to_head\n\nDSfilter := DS[filter relation_to_head = 4]\nDSmerge := merge(DS \"DSx\",DS \"DSy\",\n    on\n    (DSy#spouse-id = DSx#person-id and DSy#relation_to_head = 3 and DSx#relation_to_head = 4)\n    return\n    (DSx#person-id as \"person-id\"))\n\nDSnot_exists := DSfilter not_exists_in DSmerge\n\nDScount := DSnot_exists[calc 1 as \"id\" role \"identifier\"][keep (id, person_id)][aggregate count (person_id)] = 0\n",
      "severity": "information",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_4jgjezuk5l",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)\n\n\nDScount := DS[calc 1 as msr_count role \"MEASURE\"]\nDSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] =\nDScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)]\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_yr7hai15rt",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight\n\n/*\n * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)\n *\n *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN\n *  x1                      1\t      +\n *  x1.1          x1\t      2\t      +\n *  x1.2          x1\t      2\t      +\n *  x1.3          x1\t      2\t      +\n *  x2                      1       +\n *  x2.1          x2\t      2\t      +\n */\n\nDShierarchy := hierarchy(DS, level, \"HRC\", false)\nDScond := (DShierarchy = DS)[filter weight = \"false\"]\nDSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_45tfa8yzgu",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier)\nDSgender= gender(identifier) {male, female}\nDSage =age-group(identifier) {child, adult, senior}\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,\n    on\n    (1 = 1)\n    return\n   (DSgender#gender as \"gender\",DSage #age-group as \"age-group\"))\nDSdiff := DSmerge setdiff DS[keep (gender, age-group)]\nDSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_r2y43xqs88",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1\n",
      "severity": "information",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.565Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_75npaqh37w",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight\n\n/*\n * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)\n *\n *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN\n *  x1                      1\t      +\n *  x1.1          x1\t      2\t      +\n *  x1.2          x1\t      2\t      +\n *  x1.3          x1\t      2\t      +\n *  x2                      1       +\n *  x2.1          x2\t      2\t      +\n */\n\nDShierarchy := hierarchy(DS, level, \"HRC\", false)\nDScond := (DShierarchy = DS)[filter weight = \"false\"]\nDSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_lbedhitst0",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "VTL 1.0",
      "expression": "DS= business-id, cost, profit, turnover \n\nDSr:= (DS#cost + DS#profit) = DS#turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_2kyv704u81",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier)\nDSgender= gender(identifier) {male, female}\nDSage =age-group(identifier) {child, adult, senior}\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,\n    on\n    (1 = 1)\n    return\n   (DSgender#gender as \"gender\",DSage #age-group as \"age-group\"))\nDSdiff := DSmerge setdiff DS[keep (gender, age-group)]\nDSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_hhv5r362i4",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "validate",
      "expression": "# define parent:\nparents :=  sub(\"\\\\.[0-9]$\",\"\",level)\nis_parent := level %in% parents\n\n# define child sums, by search for parent pattern.\nchild_sums := sapply(level[is_parent], function(x){ \n    sum(weight[grepl(paste0(\"^\",x,\".[0-9]$\"),level)])\n  })\n# rule 16 \nall(weight[is_parent] == child_sums)\n\n",
      "severity": "error",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_uwm0cul3en",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "validate",
      "expression": "# rule_10:\nany(business_id == 100 & turnover > 1e+06)\n",
      "severity": "information",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_ymi8xkfcha",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1\n",
      "severity": "information",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_olm77p5hwg",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )\n  counter := counter + 1\n\n\n    IF counter /= 1\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_3g28xg4fgg",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_xnejk44rqn",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr\nrc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}\n\n\"Count totals SP2 and SP3 across all records\"\n  FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)\n          counter := counter + 1\n          s_t   := s_t + t\n          s_tm1 := s_tm1 + tm1\n\n  END\n\n\"Evaluate result\"\n\nIF counter > 0\n\n  THEN \n    \"Compute previous average\"\n    d_t       := s_t   / counter\n    d_tm1     := s_tm1 / counter\n\t\n    \"Compute new average\"\n    d_t_neu := (s_t - price_t + price_tm1) / counter\n\n    \"Compute relative size of new average\"\n     DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)\n\n  \"Check\"\n  IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)\n   THEN rc := 1\n  END\n\nEND \n \nRETURN rc",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_dvonmkpybu",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_fyxsi4puj5",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1 \n\nDSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_8rrxdb1pmp",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1\nrc := 0\n\nLOOP FOR x1 := 1 UNTIL x1 > members\n     IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )\n      THEN rc := 1\n     END\n\n  END\n\nRETURN rc",
      "severity": "error",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_sijp8tm152",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age\n\nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]\n\nDScond:= DScalc[filter age between 0 and 113]\n\nDSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]\n\n",
      "severity": "information",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_w56rj7v5xk",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0\n",
      "severity": "warning",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_7wj4vhd98m",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked\n\nDSr:= DS#hours_worked between 1 and 80\n/* In case a value in hours_worked is NULL the value returned will be NULL */\n.\n",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_9q0spxmed0",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)\n\n\nDScount := DS[calc 1 as msr_count role \"MEASURE\"]\nDSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] =\nDScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)]\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_tyj6u3jzw3",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head\nrc := {0}\ntmp_relation_to_head := EMPTY\n\nIF relation_to_head ='4'\n THEN   \n\n   IF NOT spouse_id IN DATASET mat_Rule12 (person_id)\n    THEN rc := 1\n     ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )\n\n      IF tmp_relation_to_head /= '3'\n       THEN  rc := 1\n      END\n   END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_g8aqu99ksf",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )\n   counter := counter + 1\n  END\n\n   IF counter /= members\n     THEN rc := 1\n    END\n\nRETURN rc",
      "severity": "error",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_ysqa9k88xw",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)\n\nDScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]= \n        DShousehold)[filter members= \"false\"]\nDSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0\n\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_oxsp8ld16w",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)\n\n\nDScount := DS[calc 1 as msr_count role \"MEASURE\"]\nDSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] =\nDScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)]\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_b9sxrbz0rt",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit\nrc,tmp_sum,hit  := {0,0,0}\n\ntmp_AnzSst := FUNCTION LENGTH (level)\n\nIF tmp_AnzSst IN SEQUENCE  (1,3)\n THEN \n\n  FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )\n\n   IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND \n                          FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n   IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND \n                          FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n END\n\n  \"Check\"\n  IF tmp_sum /= weight AND hit = 1\n   THEN rc := 1\n  END\n\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_pas9lcm5co",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr\nrc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}\n\n\"Count totals SP2 and SP3 across all records\"\n  FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)\n          counter := counter + 1\n          s_t   := s_t + t\n          s_tm1 := s_tm1 + tm1\n\n  END\n\n\"Evaluate result\"\n\nIF counter > 0\n\n  THEN \n    \"Compute previous average\"\n    d_t       := s_t   / counter\n    d_tm1     := s_tm1 / counter\n\t\n    \"Compute new average\"\n    d_t_neu := (s_t - price_t + price_tm1) / counter\n\n    \"Compute relative size of new average\"\n     DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)\n\n  \"Check\"\n  IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)\n   THEN rc := 1\n  END\n\nEND \n \nRETURN rc",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_rwirimm14m",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "validate",
      "expression": "# def_count:\nperson_count :=  table(person$household_id)\n\n# rule17:\nmembers == person_count[household_id]\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_6p1vc5gq46",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "validate",
      "expression": "# rule_09:\nall(age >= 0 & age <= 113)\n",
      "severity": "error",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_bp4ummtxtg",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth\nDS_p= person-id(identifier),person, year_of_birth, gender\n \nDSr:= DS_h#year_of_birth=DS_p#year_of_birth\n",
      "severity": "information",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_gvn1nbe14t",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "validate",
      "expression": "# rule_08:\nyear_of_birth == persons$year_of_birth\n",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_j77q5b4ahz",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count\nrc,tmp_undecided, tmp_count := {1,0,0}\ntmp_turnover := EMPTY\n\n  FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )\n\n   IF tmp_turnover  = EMPTY \n    THEN tmp_undecided := 1 \n   \n     ELSE\n      IF tmp_turnover > 1000000\n       THEN tmp_count :=  tmp_count + 1  \n      END\n   END\n END\n\n IF tmp_undecided = 1 OR  tmp_count = 1\n  THEN rc := 0\n END\n\n\n\nRETURN rc",
      "severity": "warning",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_y1jxd1zy19",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)\n\nDScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]= \n        DShousehold)[filter members= \"false\"]\nDSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0\n\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_algcej05d7",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,\n    male_child, female_child, male_adult, female_adult, male_senior, female_senior\nrc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}\n\n  FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)\n   IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END\n\n  END\n    IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0 \n     THEN rc := 1\n    END\n\n\nRETURN rc",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set."
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_ic28euqn1l",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of \n\nDSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"  \non (DSgp#person-id= DSgc# grandchild_of),\nreturn (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")\n \nDSr:= (DSmerge#gp_age-28) >= DSmerge#age\n\nDSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]\n\n",
      "severity": "error",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_f86u30eahc",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )\n   counter := counter + 1\n  END\n\n   IF counter /= members\n     THEN rc := 1\n    END\n\nRETURN rc",
      "severity": "error",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_z97fy8oa0s",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1\n",
      "severity": "information",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_hanydhk5sp",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )\n   counter := counter + 1\n  END\n\n   IF counter /= members\n     THEN rc := 1\n    END\n\nRETURN rc",
      "severity": "error",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_fo23u9fbw7",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY)\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_5mofqpci46",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)\n\n\nDScount := DS[calc 1 as msr_count role \"MEASURE\"]\nDSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] =\nDScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)]\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_oomfgjfefh",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_city, counter\nrc, counter  := {0,0}\n\n  FOR EVERY tmp_city IN DATASET mat_Rule15 (postcode = postcode ; city )\n   IF city /= tmp_city\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_vv8ex97djo",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of \n\nDSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"  \non (DSgp#person-id= DSgc# grandchild_of),\nreturn (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")\n \nDSr:= (DSmerge#gp_age-28) >= DSmerge#age\n\nDSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]\n\n",
      "severity": "error",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_m3y0y7kme0",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "VTL 1.0",
      "expression": "DS=level \n \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"]\nDSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1) \n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_u14s5ycair",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1 \n\nDSout:=DS[filter season=\"out\"]\nDSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic \n   see page 42 VTL-part1 */\n",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_bh59hgjr0d",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )\n  counter := counter + 1\n\n\n    IF counter /= 1\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_fao1oez9ya",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "validate",
      "expression": "# define vector with T/F value for each household\ntest := sapply(1:length(household_id), function(i){\n  hhid <- household_id[i]\n  all(1:members[i] %in% persons$person_id[persons$household_id == hhid])\n})\n\n# rule must hold for all households\nall(test)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_jww9b62eu9",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )\n   counter := counter + 1\n  END\n\n   IF counter /= members\n     THEN rc := 1\n    END\n\nRETURN rc",
      "severity": "error",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_ekoh7u2jii",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "Estatistik",
      "expression": "DECLARE rc\nrc := 0\n\n\"Haushalt = household\"\n\nIF NOT  SEQUENCE (person_id , person , year_of_birth) \n IN DATASET Haushalt (person_id , person , year_of_birth)\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_k22c4b1vgn",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1\n",
      "severity": "information",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_wwu86zvh8i",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "validate",
      "expression": "\n# def_ratio\nmeani := mean(price_t)  + (price_tm1 - price_t)/length(price_t)\nratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))\n\n# rule_07\nratio >= 0.9 & ratio <= 1.1\n\n",
      "severity": "warning",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_fyni3fkk8w",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_city, counter\nrc, counter  := {0,0}\n\n  FOR EVERY tmp_city IN DATASET mat_Rule15 (postcode = postcode ; city )\n   IF city /= tmp_city\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_jb9a5vn5c9",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "validate",
      "expression": "# rule_15:\npostcode ~ city\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_terp8z51by",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "validate",
      "expression": "# def_03:\ncounts :=  table(level)\n\n# rule_03:\ncounts[\"high\"] < 0.1 * sum(counts)\n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_ue1oh94h1t",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "validate",
      "expression": "# rule_04:\n(price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <= \n    0.5 * price_Ymin1\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_mvp3wryty6",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "validate",
      "expression": "# rule_08:\nyear_of_birth == persons$year_of_birth\n",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_ysmzpake6o",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1 \n\nDSout:=DS[filter season=\"out\"]\nDSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic \n   see page 42 VTL-part1 */\n",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_ys1wj4dbz8",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier)\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"]\nDScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1]\nDSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0\n",
      "severity": "information",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_uzrywg9qu9",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=household-id(identifier), person-id(identifier)\n\n\nDSmerge:=merge (DShousehold as \"DSh\", DSpersons as \"DSp\" \n        on DSh#household-id=DSp#household-id, \n        return \n        (DSh#household-id as household-id,DSh#person-id as person-id,DSp#members as members))\n \n\nDSout:= DSmerge[filter person-id < 1 or person-id>members][keep (household-id,members)][aggregate count (members)] = 0\n\nDSdist:= DSmerge[rename (person-id) as \"p_id\" role \"measure\"][aggregate count_distinct (p_id)][filter p id <> members]\n[aggregate count (members)] = 0\n\n\nDSr := (DSout and DSdist)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_qyf1yso3ua",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "validate",
      "expression": "# define vector with T/F value for each household\ntest := sapply(1:length(household_id), function(i){\n  hhid <- household_id[i]\n  all(1:members[i] %in% persons$person_id[persons$household_id == hhid])\n})\n\n# rule must hold for all households\nall(test)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_fpk0cz7kpf",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "validate",
      "expression": "# rule_04:\n(price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <= \n    0.5 * price_Ymin1\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_ejqx7yvoup",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1 \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)]\nDSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)]\nDSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)]\nDScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)]\nDSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1\n",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_5czubpgolr",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "validate",
      "expression": "# def_03:\ncounts :=  table(level)\n\n# rule_03:\ncounts[\"high\"] < 0.1 * sum(counts)\n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_c2e1ziy3sm",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )\n   counter := counter + 1\n  END\n\n   IF counter /= members\n     THEN rc := 1\n    END\n\nRETURN rc",
      "severity": "error",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_46l22rr4bz",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "validate",
      "expression": "\n# def_ratio\nmeani := mean(price_t)  + (price_tm1 - price_t)/length(price_t)\nratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))\n\n# rule_07\nratio >= 0.9 & ratio <= 1.1\n\n",
      "severity": "warning",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_iqltbo7iqd",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit\nrc,tmp_sum,hit  := {0,0,0}\n\ntmp_AnzSst := FUNCTION LENGTH (level)\n\nIF tmp_AnzSst IN SEQUENCE  (1,3)\n THEN \n\n  FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )\n\n   IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND \n                          FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n   IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND \n                          FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n END\n\n  \"Check\"\n  IF tmp_sum /= weight AND hit = 1\n   THEN rc := 1\n  END\n\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_gu9cyan7wx",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "validate",
      "expression": "# def_rel_4:\nrel_4 :=  person_id[relation_to_head == 4]\n\n# def_rel_3:\nspouse_of_rel_3 :=  spouse_id[relation_to_head == 3]\n\n# rule_12:\nall(rel_4 %in% spouse_of_rel_3)\n",
      "severity": "error",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_82rneqsy06",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_city, counter\nrc, counter  := {0,0}\n\n  FOR EVERY tmp_city IN DATASET mat_Rule15 (postcode = postcode ; city )\n   IF city /= tmp_city\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_mk5naao60l",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,\n    male_child, female_child, male_adult, female_adult, male_senior, female_senior\nrc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}\n\n  FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)\n   IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END\n\n  END\n    IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0 \n     THEN rc := 1\n    END\n\n\nRETURN rc",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set."
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_77e1wt8t9j",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0\n",
      "severity": "warning",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_u4jby15ed8",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "validate",
      "expression": "# rule_04:\n(price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <= \n    0.5 * price_Ymin1\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_68btdu2hpx",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_4huhuijrnb",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY)\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_hu290v0ey2",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "validate",
      "expression": "# rule_09:\nall(age >= 0 & age <= 113)\n",
      "severity": "error",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_8fl9ltjx26",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight\n\n/*\n * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)\n *\n *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN\n *  x1                      1\t      +\n *  x1.1          x1\t      2\t      +\n *  x1.2          x1\t      2\t      +\n *  x1.3          x1\t      2\t      +\n *  x2                      1       +\n *  x2.1          x2\t      2\t      +\n */\n\nDShierarchy := hierarchy(DS, level, \"HRC\", false)\nDScond := (DShierarchy = DS)[filter weight = \"false\"]\nDSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_0p7m3zr189",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit\nrc,tmp_sum,hit  := {0,0,0}\n\ntmp_AnzSst := FUNCTION LENGTH (level)\n\nIF tmp_AnzSst IN SEQUENCE  (1,3)\n THEN \n\n  FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )\n\n   IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND \n                          FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n   IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND \n                          FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n END\n\n  \"Check\"\n  IF tmp_sum /= weight AND hit = 1\n   THEN rc := 1\n  END\n\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_29idh405a4",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "validate",
      "expression": "# def_count:\nperson_count :=  table(person$household_id)\n\n# rule17:\nmembers == person_count[household_id]\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_bmlcbg8yx8",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)\n\n\nDScount := DS[calc 1 as msr_count role \"MEASURE\"]\nDSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] =\nDScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)]\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_k0pewt6n6c",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age\n\nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]\n\nDScond:= DScalc[filter age between 0 and 113]\n\nDSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]\n\n",
      "severity": "information",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_g6f9156ngm",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "validate",
      "expression": "# define vector with T/F value for each household\ntest := sapply(1:length(household_id), function(i){\n  hhid <- household_id[i]\n  all(1:members[i] %in% persons$person_id[persons$household_id == hhid])\n})\n\n# rule must hold for all households\nall(test)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_x2xm67ghb9",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "VTL 1.0",
      "expression": "DS=level \n \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"]\nDSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1) \n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_19upksricq",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "validate",
      "expression": "# rule_11:\nsum(business_id == 100 & turnover > 1e+06) == 1\n",
      "severity": "error",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_wfgyd9csmx",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover \nrc := 1\ntmp_turnover := EMPTY\n\nFOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )\n\n\n  IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000\n   THEN rc := 0\n  END\n\nEND\n\nRETURN rc",
      "severity": "information",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_njsogrfquq",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1 \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)]\nDSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)]\nDSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)]\nDScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)]\nDSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1\n",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_u4v26v4qdc",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier)\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"]\nDScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1]\nDSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0\n",
      "severity": "information",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_ymhdillcv1",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit\nrc,tmp_sum,hit  := {0,0,0}\n\ntmp_AnzSst := FUNCTION LENGTH (level)\n\nIF tmp_AnzSst IN SEQUENCE  (1,3)\n THEN \n\n  FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )\n\n   IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND \n                          FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n   IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND \n                          FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n END\n\n  \"Check\"\n  IF tmp_sum /= weight AND hit = 1\n   THEN rc := 1\n  END\n\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_m1qof60fg5",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "validate",
      "expression": "# def_age_gp:\nage_gp :=  age[match(grandchild_of, person_id)]\n\n# rule_04:\nage_gp - 28 >= age\n",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_m40cpv8ucr",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "Estatistik",
      "expression": "turnover /= cost + profit",
      "severity": "error",
      "description": "cost + profit = turnover"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_hqb0amj17l",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)\n\n\nDScount := DS[calc 1 as msr_count role \"MEASURE\"]\nDSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] =\nDScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)]\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_tgklndwdmr",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "validate",
      "expression": "# rule_08:\nyear_of_birth == persons$year_of_birth\n",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_flkexk6g7c",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover \nrc := 1\ntmp_turnover := EMPTY\n\nFOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )\n\n\n  IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000\n   THEN rc := 0\n  END\n\nEND\n\nRETURN rc",
      "severity": "information",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_6j1f2cxmgc",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "validate",
      "expression": "# rule_01:\nhours_worked >= 1 & hours_worked <= 80\n",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_rpejnptwuw",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head\nrc := {0}\ntmp_relation_to_head := EMPTY\n\nIF relation_to_head ='4'\n THEN   \n\n   IF NOT spouse_id IN DATASET mat_Rule12 (person_id)\n    THEN rc := 1\n     ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )\n\n      IF tmp_relation_to_head /= '3'\n       THEN  rc := 1\n      END\n   END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_gp19yxkf5o",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of \n\nDSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"  \non (DSgp#person-id= DSgc# grandchild_of),\nreturn (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")\n \nDSr:= (DSmerge#gp_age-28) >= DSmerge#age\n\nDSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]\n\n",
      "severity": "error",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_p9nsx8caoy",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "Estatistik",
      "expression": "DECLARE rc\nrc := 0\n\n\"Haushalt = household\"\n\nIF NOT  SEQUENCE (person_id , person , year_of_birth) \n IN DATASET Haushalt (person_id , person , year_of_birth)\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_rox14h5cjq",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age\ntmp_age := EMPTY\n\n  tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)\n\nIF tmp_age - 28 < age\n THEN rc := 1\nEND\n\n\nRETURN rc",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_gbdjtn7zaw",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0\n",
      "severity": "warning",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_ptv1lowh87",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_xbbuomhfme",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier)\nDSgender= gender(identifier) {male, female}\nDSage =age-group(identifier) {child, adult, senior}\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,\n    on\n    (1 = 1)\n    return\n   (DSgender#gender as \"gender\",DSage #age-group as \"age-group\"))\nDSdiff := DSmerge setdiff DS[keep (gender, age-group)]\nDSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_cwyg14z9gf",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head\nrc := {0}\ntmp_relation_to_head := EMPTY\n\nIF relation_to_head ='4'\n THEN   \n\n   IF NOT spouse_id IN DATASET mat_Rule12 (person_id)\n    THEN rc := 1\n     ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )\n\n      IF tmp_relation_to_head /= '3'\n       THEN  rc := 1\n      END\n   END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_x2041cbcqf",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0\n",
      "severity": "warning",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_xinrwtm8hb",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "validate",
      "expression": "# rule_02:\ncost + profit == turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_8tktwp39r3",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid\nrc,tmp_decided, tmp_invalid := {0,0,0}\ntmp_age := EMPTY\nFOR EVERY tmp_age IN DATASET mat_Rule09 (age)\n\n   IF tmp_age  = EMPTY \n    THEN tmp_decided := 1 \n   \n     ELSE\n      IF NOT tmp_age  IN SEQUENCE (0++113)\n       THEN tmp_invalid := 1  \n      END\n   END\nEND\n\nIF tmp_decided = 0 AND  tmp_invalid = 1\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_6rw12lvfd4",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight\n\n/*\n * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)\n *\n *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN\n *  x1                      1\t      +\n *  x1.1          x1\t      2\t      +\n *  x1.2          x1\t      2\t      +\n *  x1.3          x1\t      2\t      +\n *  x2                      1       +\n *  x2.1          x2\t      2\t      +\n */\n\nDShierarchy := hierarchy(DS, level, \"HRC\", false)\nDScond := (DShierarchy = DS)[filter weight = \"false\"]\nDSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_7lc7rua1g6",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "validate",
      "expression": "# rule_11:\nsum(business_id == 100 & turnover > 1e+06) == 1\n",
      "severity": "error",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_ki46x0t8q3",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "validate",
      "expression": "# rule_10:\nany(business_id == 100 & turnover > 1e+06)\n",
      "severity": "information",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_594jmtuvdm",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,\n    male_child, female_child, male_adult, female_adult, male_senior, female_senior\nrc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}\n\n  FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)\n   IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END\n\n  END\n    IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0 \n     THEN rc := 1\n    END\n\n\nRETURN rc",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set."
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_3y2oxnp667",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr\nrc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}\n\n\"Count totals SP2 and SP3 across all records\"\n  FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)\n          counter := counter + 1\n          s_t   := s_t + t\n          s_tm1 := s_tm1 + tm1\n\n  END\n\n\"Evaluate result\"\n\nIF counter > 0\n\n  THEN \n    \"Compute previous average\"\n    d_t       := s_t   / counter\n    d_tm1     := s_tm1 / counter\n\t\n    \"Compute new average\"\n    d_t_neu := (s_t - price_t + price_tm1) / counter\n\n    \"Compute relative size of new average\"\n     DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)\n\n  \"Check\"\n  IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)\n   THEN rc := 1\n  END\n\nEND \n \nRETURN rc",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_8fxdb47zfo",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "validate",
      "expression": "# def_03:\ncounts :=  table(level)\n\n# rule_03:\ncounts[\"high\"] < 0.1 * sum(counts)\n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_uktwiywoxr",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_city, counter\nrc, counter  := {0,0}\n\n  FOR EVERY tmp_city IN DATASET mat_Rule15 (postcode = postcode ; city )\n   IF city /= tmp_city\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_xvwnx8wxot",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )\n  counter := counter + 1\n\n\n    IF counter /= 1\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_3ewuw58qr3",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "validate",
      "expression": "# rule_06:\nif (season == \"out\") price_t == price_tmin1 & quantity_t == \n    quantity_tmin1\n",
      "severity": "information",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_h0nb52wsvr",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_city, counter\nrc, counter  := {0,0}\n\n  FOR EVERY tmp_city IN DATASET mat_Rule15 (postcode = postcode ; city )\n   IF city /= tmp_city\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_mjkvbmi1kt",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "validate",
      "expression": "# rule_10:\nany(business_id == 100 & turnover > 1e+06)\n",
      "severity": "information",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_7ovosbejzn",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)\n\n\nDScount := DS[calc 1 as msr_count role \"MEASURE\"]\nDSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] =\nDScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)]\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_ik1gvsbmes",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)\n\n\nDScount := DS[calc 1 as msr_count role \"MEASURE\"]\nDSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] =\nDScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)]\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_tfb30l4mm7",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "validate",
      "expression": "# def_counts:\ncounts :=  table(gender, age_group)\n\n# rule_13:\nall(counts <= 1)\n",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_ltvplr7r7c",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "validate",
      "expression": "# rule 14\nall(table(gender, age_group) >= 1) & \n  all(c(\"male\", \"female\") %in% gender) &\n  all(c(\"child\",\"adult\",\"senior\") %in% age_group)\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_h1n3bsu0yd",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid\nrc,tmp_decided, tmp_invalid := {0,0,0}\ntmp_age := EMPTY\nFOR EVERY tmp_age IN DATASET mat_Rule09 (age)\n\n   IF tmp_age  = EMPTY \n    THEN tmp_decided := 1 \n   \n     ELSE\n      IF NOT tmp_age  IN SEQUENCE (0++113)\n       THEN tmp_invalid := 1  \n      END\n   END\nEND\n\nIF tmp_decided = 0 AND  tmp_invalid = 1\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_du5702cyc6",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked\n\nDSr:= DS#hours_worked between 1 and 80\n/* In case a value in hours_worked is NULL the value returned will be NULL */\n.\n",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_es69lqqiec",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total\nrc,z1,total := {0,0,0}\n\nFOR EVERY s1  IN DATASET mat_Rule03 (level1)\n\n   IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"\n   IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"\n\nEND\n\n\"Check relative occurrence of value 'high'\"\n\nIF z1 > total * 0.1 THEN rc := 1 END\n\nRETURN rc",
      "severity": "warning",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_chfzmzyraj",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "validate",
      "expression": "# def_age_gp:\nage_gp :=  age[match(grandchild_of, person_id)]\n\n# rule_04:\nage_gp - 28 >= age\n",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_qtc4ye3y80",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "validate",
      "expression": "# rule_04:\n(price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <= \n    0.5 * price_Ymin1\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_kbmah4330h",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY)\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_7mfnl9714h",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1\nrc := 0\n\nLOOP FOR x1 := 1 UNTIL x1 > members\n     IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )\n      THEN rc := 1\n     END\n\n  END\n\nRETURN rc",
      "severity": "error",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_gublkh0o13",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "validate",
      "expression": "# def_age_gp:\nage_gp :=  age[match(grandchild_of, person_id)]\n\n# rule_04:\nage_gp - 28 >= age\n",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_c0joocsi5o",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age\ntmp_age := EMPTY\n\n  tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)\n\nIF tmp_age - 28 < age\n THEN rc := 1\nEND\n\n\nRETURN rc",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_uikyoj7uri",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier)\nDSgender= gender(identifier) {male, female}\nDSage =age-group(identifier) {child, adult, senior}\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,\n    on\n    (1 = 1)\n    return\n   (DSgender#gender as \"gender\",DSage #age-group as \"age-group\"))\nDSdiff := DSmerge setdiff DS[keep (gender, age-group)]\nDSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_384nm1ftpc",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_laji5ap71s",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )\n  counter := counter + 1\n\n\n    IF counter /= 1\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_rblxuwmo41",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "validate",
      "expression": "# rule_09:\nall(age >= 0 & age <= 113)\n",
      "severity": "error",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_dw4n5w4lgo",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "Estatistik",
      "expression": "DECLARE rc\nrc := 0\n\n\"Haushalt = household\"\n\nIF NOT  SEQUENCE (person_id , person , year_of_birth) \n IN DATASET Haushalt (person_id , person , year_of_birth)\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_q8c7rc5xcl",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of \n\nDSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"  \non (DSgp#person-id= DSgc# grandchild_of),\nreturn (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")\n \nDSr:= (DSmerge#gp_age-28) >= DSmerge#age\n\nDSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]\n\n",
      "severity": "error",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_kaep5mm9dp",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked\n\nDSr:= DS#hours_worked between 1 and 80\n/* In case a value in hours_worked is NULL the value returned will be NULL */\n.\n",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_tvnf2jiob8",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "validate",
      "expression": "# def_03:\ncounts :=  table(level)\n\n# rule_03:\ncounts[\"high\"] < 0.1 * sum(counts)\n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_gpes9p74ui",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_qqf618otht",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)\n\nDScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]= \n        DShousehold)[filter members= \"false\"]\nDSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0\n\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_vqrvwqj6wl",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1\n",
      "severity": "information",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_pnr1pd9iqi",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_q9fijg9aw6",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "validate",
      "expression": "# rule 14\nall(table(gender, age_group) >= 1) & \n  all(c(\"male\", \"female\") %in% gender) &\n  all(c(\"child\",\"adult\",\"senior\") %in% age_group)\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_id6znzbu2o",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "validate",
      "expression": "# def_count:\nperson_count :=  table(person$household_id)\n\n# rule17:\nmembers == person_count[household_id]\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_moejfqkgd9",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "validate",
      "expression": "# rule_08:\nyear_of_birth == persons$year_of_birth\n",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_p975plgo8z",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "validate",
      "expression": "# rule_09:\nall(age >= 0 & age <= 113)\n",
      "severity": "error",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_ieyatj61pt",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of \n\nDSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"  \non (DSgp#person-id= DSgc# grandchild_of),\nreturn (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")\n \nDSr:= (DSmerge#gp_age-28) >= DSmerge#age\n\nDSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]\n\n",
      "severity": "error",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_zz0o4a6sk2",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1 \n\nDSout:=DS[filter season=\"out\"]\nDSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic \n   see page 42 VTL-part1 */\n",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_daky0f1ovt",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover \nrc := 1\ntmp_turnover := EMPTY\n\nFOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )\n\n\n  IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000\n   THEN rc := 0\n  END\n\nEND\n\nRETURN rc",
      "severity": "information",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_9fe69jrxga",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)\n\nDScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]= \n        DShousehold)[filter members= \"false\"]\nDSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0\n\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_0kyc6aypbz",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), spouse-id, relation_to_head\n\nDSfilter := DS[filter relation_to_head = 4]\nDSmerge := merge(DS \"DSx\",DS \"DSy\",\n    on\n    (DSy#spouse-id = DSx#person-id and DSy#relation_to_head = 3 and DSx#relation_to_head = 4)\n    return\n    (DSx#person-id as \"person-id\"))\n\nDSnot_exists := DSfilter not_exists_in DSmerge\n\nDScount := DSnot_exists[calc 1 as \"id\" role \"identifier\"][keep (id, person_id)][aggregate count (person_id)] = 0\n",
      "severity": "information",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_jvr1tmylkk",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "validate",
      "expression": "# rule_04:\n(price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <= \n    0.5 * price_Ymin1\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_57addzf4e1",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), spouse-id, relation_to_head\n\nDSfilter := DS[filter relation_to_head = 4]\nDSmerge := merge(DS \"DSx\",DS \"DSy\",\n    on\n    (DSy#spouse-id = DSx#person-id and DSy#relation_to_head = 3 and DSx#relation_to_head = 4)\n    return\n    (DSx#person-id as \"person-id\"))\n\nDSnot_exists := DSfilter not_exists_in DSmerge\n\nDScount := DSnot_exists[calc 1 as \"id\" role \"identifier\"][keep (id, person_id)][aggregate count (person_id)] = 0\n",
      "severity": "information",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_1l3ueqcots",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age\n\nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]\n\nDScond:= DScalc[filter age between 0 and 113]\n\nDSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]\n\n",
      "severity": "information",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_kpaf67dyvz",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "VTL 1.0",
      "expression": "DS=level \n \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"]\nDSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1) \n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_3ks30h65rb",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,\n    male_child, female_child, male_adult, female_adult, male_senior, female_senior\nrc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}\n\n  FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)\n   IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END\n\n  END\n    IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0 \n     THEN rc := 1\n    END\n\n\nRETURN rc",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set."
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_ir50fw1pkj",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "validate",
      "expression": "# rule_10:\nany(business_id == 100 & turnover > 1e+06)\n",
      "severity": "information",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_z2qldi7t47",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight\n\n/*\n * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)\n *\n *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN\n *  x1                      1\t      +\n *  x1.1          x1\t      2\t      +\n *  x1.2          x1\t      2\t      +\n *  x1.3          x1\t      2\t      +\n *  x2                      1       +\n *  x2.1          x2\t      2\t      +\n */\n\nDShierarchy := hierarchy(DS, level, \"HRC\", false)\nDScond := (DShierarchy = DS)[filter weight = \"false\"]\nDSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_4ttgfv7ny1",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr\nrc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}\n\n\"Count totals SP2 and SP3 across all records\"\n  FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)\n          counter := counter + 1\n          s_t   := s_t + t\n          s_tm1 := s_tm1 + tm1\n\n  END\n\n\"Evaluate result\"\n\nIF counter > 0\n\n  THEN \n    \"Compute previous average\"\n    d_t       := s_t   / counter\n    d_tm1     := s_tm1 / counter\n\t\n    \"Compute new average\"\n    d_t_neu := (s_t - price_t + price_tm1) / counter\n\n    \"Compute relative size of new average\"\n     DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)\n\n  \"Check\"\n  IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)\n   THEN rc := 1\n  END\n\nEND \n \nRETURN rc",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_ypr3ub6yqd",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "VTL 1.0",
      "expression": "DS=level \n \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"]\nDSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1) \n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_kmuwfgz9d5",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight\n\n/*\n * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)\n *\n *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN\n *  x1                      1\t      +\n *  x1.1          x1\t      2\t      +\n *  x1.2          x1\t      2\t      +\n *  x1.3          x1\t      2\t      +\n *  x2                      1       +\n *  x2.1          x2\t      2\t      +\n */\n\nDShierarchy := hierarchy(DS, level, \"HRC\", false)\nDScond := (DShierarchy = DS)[filter weight = \"false\"]\nDSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_meb8u7vooq",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age\ntmp_age := EMPTY\n\n  tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)\n\nIF tmp_age - 28 < age\n THEN rc := 1\nEND\n\n\nRETURN rc",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_g4upi3kmy8",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)\n\n\nDScount := DS[calc 1 as msr_count role \"MEASURE\"]\nDSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] =\nDScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)]\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_ykzt86ry8p",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "validate",
      "expression": "# rule_15:\npostcode ~ city\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_ltk1tgpilb",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "validate",
      "expression": "# def_counts:\ncounts :=  table(gender, age_group)\n\n# rule_13:\nall(counts <= 1)\n",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_2qsirhgh63",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr\nrc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}\n\n\"Count totals SP2 and SP3 across all records\"\n  FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)\n          counter := counter + 1\n          s_t   := s_t + t\n          s_tm1 := s_tm1 + tm1\n\n  END\n\n\"Evaluate result\"\n\nIF counter > 0\n\n  THEN \n    \"Compute previous average\"\n    d_t       := s_t   / counter\n    d_tm1     := s_tm1 / counter\n\t\n    \"Compute new average\"\n    d_t_neu := (s_t - price_t + price_tm1) / counter\n\n    \"Compute relative size of new average\"\n     DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)\n\n  \"Check\"\n  IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)\n   THEN rc := 1\n  END\n\nEND \n \nRETURN rc",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_gnkcx156o5",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid\nrc,tmp_decided, tmp_invalid := {0,0,0}\ntmp_age := EMPTY\nFOR EVERY tmp_age IN DATASET mat_Rule09 (age)\n\n   IF tmp_age  = EMPTY \n    THEN tmp_decided := 1 \n   \n     ELSE\n      IF NOT tmp_age  IN SEQUENCE (0++113)\n       THEN tmp_invalid := 1  \n      END\n   END\nEND\n\nIF tmp_decided = 0 AND  tmp_invalid = 1\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_lu8hj01c7d",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1\n",
      "severity": "information",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_yjqoktig8n",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count\nrc,tmp_undecided, tmp_count := {1,0,0}\ntmp_turnover := EMPTY\n\n  FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )\n\n   IF tmp_turnover  = EMPTY \n    THEN tmp_undecided := 1 \n   \n     ELSE\n      IF tmp_turnover > 1000000\n       THEN tmp_count :=  tmp_count + 1  \n      END\n   END\n END\n\n IF tmp_undecided = 1 OR  tmp_count = 1\n  THEN rc := 0\n END\n\n\n\nRETURN rc",
      "severity": "warning",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_ryy6iw1gy3",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count\nrc,tmp_undecided, tmp_count := {1,0,0}\ntmp_turnover := EMPTY\n\n  FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )\n\n   IF tmp_turnover  = EMPTY \n    THEN tmp_undecided := 1 \n   \n     ELSE\n      IF tmp_turnover > 1000000\n       THEN tmp_count :=  tmp_count + 1  \n      END\n   END\n END\n\n IF tmp_undecided = 1 OR  tmp_count = 1\n  THEN rc := 0\n END\n\n\n\nRETURN rc",
      "severity": "warning",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_805ylqmlfs",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0\n",
      "severity": "warning",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_voo5o746pt",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid\nrc,tmp_decided, tmp_invalid := {0,0,0}\ntmp_age := EMPTY\nFOR EVERY tmp_age IN DATASET mat_Rule09 (age)\n\n   IF tmp_age  = EMPTY \n    THEN tmp_decided := 1 \n   \n     ELSE\n      IF NOT tmp_age  IN SEQUENCE (0++113)\n       THEN tmp_invalid := 1  \n      END\n   END\nEND\n\nIF tmp_decided = 0 AND  tmp_invalid = 1\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_pyg4lytmie",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier)\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"]\nDScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1]\nDSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0\n",
      "severity": "information",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_mhhxug73t2",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight\n\n/*\n * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)\n *\n *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN\n *  x1                      1\t      +\n *  x1.1          x1\t      2\t      +\n *  x1.2          x1\t      2\t      +\n *  x1.3          x1\t      2\t      +\n *  x2                      1       +\n *  x2.1          x2\t      2\t      +\n */\n\nDShierarchy := hierarchy(DS, level, \"HRC\", false)\nDScond := (DShierarchy = DS)[filter weight = \"false\"]\nDSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_6gnxhk8vz3",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1 \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)]\nDSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)]\nDSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)]\nDScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)]\nDSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1\n",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_aabewwvv91",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit\nrc,tmp_sum,hit  := {0,0,0}\n\ntmp_AnzSst := FUNCTION LENGTH (level)\n\nIF tmp_AnzSst IN SEQUENCE  (1,3)\n THEN \n\n  FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )\n\n   IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND \n                          FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n   IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND \n                          FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n END\n\n  \"Check\"\n  IF tmp_sum /= weight AND hit = 1\n   THEN rc := 1\n  END\n\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_mhfeoa8dmw",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1 \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)]\nDSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)]\nDSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)]\nDScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)]\nDSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1\n",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_0tr69vp7dy",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "validate",
      "expression": "# rule_10:\nany(business_id == 100 & turnover > 1e+06)\n",
      "severity": "information",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_knxrp4kud3",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age\ntmp_age := EMPTY\n\n  tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)\n\nIF tmp_age - 28 < age\n THEN rc := 1\nEND\n\n\nRETURN rc",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_7rgnkapoct",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "validate",
      "expression": "# def_age_gp:\nage_gp :=  age[match(grandchild_of, person_id)]\n\n# rule_04:\nage_gp - 28 >= age\n",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_wb5krwmhme",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age\n\nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]\n\nDScond:= DScalc[filter age between 0 and 113]\n\nDSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]\n\n",
      "severity": "information",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_gt40ib6rbz",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age\ntmp_age := EMPTY\n\n  tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)\n\nIF tmp_age - 28 < age\n THEN rc := 1\nEND\n\n\nRETURN rc",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_bg3fnsrydr",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1 \n\nDSout:=DS[filter season=\"out\"]\nDSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic \n   see page 42 VTL-part1 */\n",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_orid6r5z3m",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1 \n\nDSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_k72bp6in3b",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0\n",
      "severity": "warning",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_49ku2331e0",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "Estatistik",
      "expression": "turnover /= cost + profit",
      "severity": "error",
      "description": "cost + profit = turnover"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_tjja5dynve",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "validate",
      "expression": "# rule_04:\n(price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <= \n    0.5 * price_Ymin1\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_kmwyq9waqe",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1 \n\nDSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_a2m4n69u1a",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=household-id(identifier), person-id(identifier)\n\n\nDSmerge:=merge (DShousehold as \"DSh\", DSpersons as \"DSp\" \n        on DSh#household-id=DSp#household-id, \n        return \n        (DSh#household-id as household-id,DSh#person-id as person-id,DSp#members as members))\n \n\nDSout:= DSmerge[filter person-id < 1 or person-id>members][keep (household-id,members)][aggregate count (members)] = 0\n\nDSdist:= DSmerge[rename (person-id) as \"p_id\" role \"measure\"][aggregate count_distinct (p_id)][filter p id <> members]\n[aggregate count (members)] = 0\n\n\nDSr := (DSout and DSdist)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_1jeylqlpz5",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1\n",
      "severity": "information",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_c5mcfv8qhl",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked\n\nDSr:= DS#hours_worked between 1 and 80\n/* In case a value in hours_worked is NULL the value returned will be NULL */\n.\n",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_ckq81bohln",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "validate",
      "expression": "# rule_09:\nall(age >= 0 & age <= 113)\n",
      "severity": "error",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_aognurqrre",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )\n   counter := counter + 1\n  END\n\n   IF counter /= members\n     THEN rc := 1\n    END\n\nRETURN rc",
      "severity": "error",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_ycvd5yomz6",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "validate",
      "expression": "# def_count:\nperson_count :=  table(person$household_id)\n\n# rule17:\nmembers == person_count[household_id]\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_4mrdyf4iai",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "validate",
      "expression": "# def_counts:\ncounts :=  table(gender, age_group)\n\n# rule_13:\nall(counts <= 1)\n",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_6z5f1ujffb",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "validate",
      "expression": "# define parent:\nparents :=  sub(\"\\\\.[0-9]$\",\"\",level)\nis_parent := level %in% parents\n\n# define child sums, by search for parent pattern.\nchild_sums := sapply(level[is_parent], function(x){ \n    sum(weight[grepl(paste0(\"^\",x,\".[0-9]$\"),level)])\n  })\n# rule 16 \nall(weight[is_parent] == child_sums)\n\n",
      "severity": "error",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_folpks3wjp",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "VTL 1.0",
      "expression": "DS=level \n \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"]\nDSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1) \n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_x4ikw6uy11",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "validate",
      "expression": "# rule_15:\npostcode ~ city\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_ab30wkpca5",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count\nrc,tmp_undecided, tmp_count := {1,0,0}\ntmp_turnover := EMPTY\n\n  FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )\n\n   IF tmp_turnover  = EMPTY \n    THEN tmp_undecided := 1 \n   \n     ELSE\n      IF tmp_turnover > 1000000\n       THEN tmp_count :=  tmp_count + 1  \n      END\n   END\n END\n\n IF tmp_undecided = 1 OR  tmp_count = 1\n  THEN rc := 0\n END\n\n\n\nRETURN rc",
      "severity": "warning",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_50t7nkof54",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)\n\nDScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]= \n        DShousehold)[filter members= \"false\"]\nDSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0\n\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_e06zddw6pn",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1\n",
      "severity": "information",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_2qc30v9rct",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total\nrc,z1,total := {0,0,0}\n\nFOR EVERY s1  IN DATASET mat_Rule03 (level1)\n\n   IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"\n   IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"\n\nEND\n\n\"Check relative occurrence of value 'high'\"\n\nIF z1 > total * 0.1 THEN rc := 1 END\n\nRETURN rc",
      "severity": "warning",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_sjbonro8tw",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked\n\nDSr:= DS#hours_worked between 1 and 80\n/* In case a value in hours_worked is NULL the value returned will be NULL */\n.\n",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_6oigzvg5pl",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "VTL 1.0",
      "expression": "DS= business-id, cost, profit, turnover \n\nDSr:= (DS#cost + DS#profit) = DS#turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_ireewmf6bj",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0\n",
      "severity": "warning",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_ujmregx176",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "validate",
      "expression": "# rule_10:\nany(business_id == 100 & turnover > 1e+06)\n",
      "severity": "information",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_qylid83f3b",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age\ntmp_age := EMPTY\n\n  tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)\n\nIF tmp_age - 28 < age\n THEN rc := 1\nEND\n\n\nRETURN rc",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_yrliefo29q",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit\nrc,tmp_sum,hit  := {0,0,0}\n\ntmp_AnzSst := FUNCTION LENGTH (level)\n\nIF tmp_AnzSst IN SEQUENCE  (1,3)\n THEN \n\n  FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )\n\n   IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND \n                          FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n   IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND \n                          FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n END\n\n  \"Check\"\n  IF tmp_sum /= weight AND hit = 1\n   THEN rc := 1\n  END\n\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_4qqvgda37j",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "Estatistik",
      "expression": "turnover /= cost + profit",
      "severity": "error",
      "description": "cost + profit = turnover"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_0q20obra4q",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1 \n\nDSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_jhi4upc2kl",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=household-id(identifier), person-id(identifier)\n\n\nDSmerge:=merge (DShousehold as \"DSh\", DSpersons as \"DSp\" \n        on DSh#household-id=DSp#household-id, \n        return \n        (DSh#household-id as household-id,DSh#person-id as person-id,DSp#members as members))\n \n\nDSout:= DSmerge[filter person-id < 1 or person-id>members][keep (household-id,members)][aggregate count (members)] = 0\n\nDSdist:= DSmerge[rename (person-id) as \"p_id\" role \"measure\"][aggregate count_distinct (p_id)][filter p id <> members]\n[aggregate count (members)] = 0\n\n\nDSr := (DSout and DSdist)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_qs20v8d8n4",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)\n\n\nDScount := DS[calc 1 as msr_count role \"MEASURE\"]\nDSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] =\nDScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)]\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_82j34o4371",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth\nDS_p= person-id(identifier),person, year_of_birth, gender\n \nDSr:= DS_h#year_of_birth=DS_p#year_of_birth\n",
      "severity": "information",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_iox2fodv0r",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1 \n\nDSout:=DS[filter season=\"out\"]\nDSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic \n   see page 42 VTL-part1 */\n",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_fz7et2b30z",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "validate",
      "expression": "# rule_02:\ncost + profit == turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_20ml8kjsly",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_7864h5bz38",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1\n",
      "severity": "information",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_jwt4718npl",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age\ntmp_age := EMPTY\n\n  tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)\n\nIF tmp_age - 28 < age\n THEN rc := 1\nEND\n\n\nRETURN rc",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_ag2r65hjqd",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head\nrc := {0}\ntmp_relation_to_head := EMPTY\n\nIF relation_to_head ='4'\n THEN   \n\n   IF NOT spouse_id IN DATASET mat_Rule12 (person_id)\n    THEN rc := 1\n     ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )\n\n      IF tmp_relation_to_head /= '3'\n       THEN  rc := 1\n      END\n   END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_96igzk9tsh",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "validate",
      "expression": "# def_03:\ncounts :=  table(level)\n\n# rule_03:\ncounts[\"high\"] < 0.1 * sum(counts)\n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_mwmclkwleb",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0\n",
      "severity": "warning",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_9u028srytu",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover \nrc := 1\ntmp_turnover := EMPTY\n\nFOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )\n\n\n  IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000\n   THEN rc := 0\n  END\n\nEND\n\nRETURN rc",
      "severity": "information",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_lok78avwuv",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "validate",
      "expression": "# rule_01:\nhours_worked >= 1 & hours_worked <= 80\n",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_nck10vnhxj",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1 \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)]\nDSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)]\nDSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)]\nDScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)]\nDSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1\n",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_t1z8nz2iwi",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "validate",
      "expression": "# rule_01:\nhours_worked >= 1 & hours_worked <= 80\n",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_r3bw4zdsrn",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=household-id(identifier), person-id(identifier)\n\n\nDSmerge:=merge (DShousehold as \"DSh\", DSpersons as \"DSp\" \n        on DSh#household-id=DSp#household-id, \n        return \n        (DSh#household-id as household-id,DSh#person-id as person-id,DSp#members as members))\n \n\nDSout:= DSmerge[filter person-id < 1 or person-id>members][keep (household-id,members)][aggregate count (members)] = 0\n\nDSdist:= DSmerge[rename (person-id) as \"p_id\" role \"measure\"][aggregate count_distinct (p_id)][filter p id <> members]\n[aggregate count (members)] = 0\n\n\nDSr := (DSout and DSdist)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_xrr87xntid",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "validate",
      "expression": "# rule_06:\nif (season == \"out\") price_t == price_tmin1 & quantity_t == \n    quantity_tmin1\n",
      "severity": "information",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_fpxd6bkign",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )\n  counter := counter + 1\n\n\n    IF counter /= 1\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_brc59662l2",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1 \n\nDSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_wrdm401skk",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "validate",
      "expression": "# def_03:\ncounts :=  table(level)\n\n# rule_03:\ncounts[\"high\"] < 0.1 * sum(counts)\n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_4zmgiw76ti",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total\nrc,z1,total := {0,0,0}\n\nFOR EVERY s1  IN DATASET mat_Rule03 (level1)\n\n   IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"\n   IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"\n\nEND\n\n\"Check relative occurrence of value 'high'\"\n\nIF z1 > total * 0.1 THEN rc := 1 END\n\nRETURN rc",
      "severity": "warning",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_7m9ueu643l",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY)\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_o0erh28bfx",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age\ntmp_age := EMPTY\n\n  tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)\n\nIF tmp_age - 28 < age\n THEN rc := 1\nEND\n\n\nRETURN rc",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_6cqi380noa",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier)\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"]\nDScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1]\nDSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0\n",
      "severity": "information",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_12n1whnvp4",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "validate",
      "expression": "# def_age_gp:\nage_gp :=  age[match(grandchild_of, person_id)]\n\n# rule_04:\nage_gp - 28 >= age\n",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_sv1kn1da9l",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1\nrc := 0\n\nLOOP FOR x1 := 1 UNTIL x1 > members\n     IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )\n      THEN rc := 1\n     END\n\n  END\n\nRETURN rc",
      "severity": "error",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_bdxuthakv6",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "validate",
      "expression": "# def_counts:\ncounts :=  table(gender, age_group)\n\n# rule_13:\nall(counts <= 1)\n",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_cf0zhtd3d8",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY)\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_hpfkbxr0bb",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age\n\nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]\n\nDScond:= DScalc[filter age between 0 and 113]\n\nDSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]\n\n",
      "severity": "information",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_gstcz6f99c",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "validate",
      "expression": "# def_counts:\ncounts :=  table(gender, age_group)\n\n# rule_13:\nall(counts <= 1)\n",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_toghliewjv",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "validate",
      "expression": "# rule_11:\nsum(business_id == 100 & turnover > 1e+06) == 1\n",
      "severity": "error",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_sx5el1yjue",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,\n    male_child, female_child, male_adult, female_adult, male_senior, female_senior\nrc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}\n\n  FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)\n   IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END\n\n  END\n    IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0 \n     THEN rc := 1\n    END\n\n\nRETURN rc",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set."
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_grvjccdgrd",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "validate",
      "expression": "# def_counts:\ncounts :=  table(gender, age_group)\n\n# rule_13:\nall(counts <= 1)\n",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_oviu0hs123",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "Estatistik",
      "expression": "DECLARE rc\nrc := 0\n\n\"Haushalt = household\"\n\nIF NOT  SEQUENCE (person_id , person , year_of_birth) \n IN DATASET Haushalt (person_id , person , year_of_birth)\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_qxvgnuznua",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "validate",
      "expression": "# rule_02:\ncost + profit == turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_5vztwqlo4l",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "Estatistik",
      "expression": "turnover /= cost + profit",
      "severity": "error",
      "description": "cost + profit = turnover"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_aaqhc59f97",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "validate",
      "expression": "# def_counts:\ncounts :=  table(gender, age_group)\n\n# rule_13:\nall(counts <= 1)\n",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_4s71yk9l9z",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "validate",
      "expression": "# rule_04:\n(price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <= \n    0.5 * price_Ymin1\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_ntiszziwx8",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_raiui6w04i",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)\n\n\nDScount := DS[calc 1 as msr_count role \"MEASURE\"]\nDSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] =\nDScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)]\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_yoex0skj9y",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_j414w9cuj0",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "validate",
      "expression": "# rule_06:\nif (season == \"out\") price_t == price_tmin1 & quantity_t == \n    quantity_tmin1\n",
      "severity": "information",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_r8ef50d94m",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "validate",
      "expression": "# def_counts:\ncounts :=  table(gender, age_group)\n\n# rule_13:\nall(counts <= 1)\n",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_btxh874dmk",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth\nDS_p= person-id(identifier),person, year_of_birth, gender\n \nDSr:= DS_h#year_of_birth=DS_p#year_of_birth\n",
      "severity": "information",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_ae5rd0f6b2",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier)\nDSgender= gender(identifier) {male, female}\nDSage =age-group(identifier) {child, adult, senior}\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,\n    on\n    (1 = 1)\n    return\n   (DSgender#gender as \"gender\",DSage #age-group as \"age-group\"))\nDSdiff := DSmerge setdiff DS[keep (gender, age-group)]\nDSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_nfhrejfhgw",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "VTL 1.0",
      "expression": "DS=level \n \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"]\nDSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1) \n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_ax1q2oksso",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=household-id(identifier), person-id(identifier)\n\n\nDSmerge:=merge (DShousehold as \"DSh\", DSpersons as \"DSp\" \n        on DSh#household-id=DSp#household-id, \n        return \n        (DSh#household-id as household-id,DSh#person-id as person-id,DSp#members as members))\n \n\nDSout:= DSmerge[filter person-id < 1 or person-id>members][keep (household-id,members)][aggregate count (members)] = 0\n\nDSdist:= DSmerge[rename (person-id) as \"p_id\" role \"measure\"][aggregate count_distinct (p_id)][filter p id <> members]\n[aggregate count (members)] = 0\n\n\nDSr := (DSout and DSdist)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_pei8127sk9",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1 \n\nDSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_dm1yd65y1i",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier)\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"]\nDScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1]\nDSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0\n",
      "severity": "information",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_1nuk9w7lbp",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1 \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)]\nDSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)]\nDSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)]\nDScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)]\nDSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1\n",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_iej0mv5ggl",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "validate",
      "expression": "# def_03:\ncounts :=  table(level)\n\n# rule_03:\ncounts[\"high\"] < 0.1 * sum(counts)\n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_tidedlzywr",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth\nDS_p= person-id(identifier),person, year_of_birth, gender\n \nDSr:= DS_h#year_of_birth=DS_p#year_of_birth\n",
      "severity": "information",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_t85wa28u72",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,\n    male_child, female_child, male_adult, female_adult, male_senior, female_senior\nrc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}\n\n  FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)\n   IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END\n\n  END\n    IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0 \n     THEN rc := 1\n    END\n\n\nRETURN rc",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set."
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_s7pny09f5n",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth\nDS_p= person-id(identifier),person, year_of_birth, gender\n \nDSr:= DS_h#year_of_birth=DS_p#year_of_birth\n",
      "severity": "information",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_osj3givwew",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "validate",
      "expression": "# rule 14\nall(table(gender, age_group) >= 1) & \n  all(c(\"male\", \"female\") %in% gender) &\n  all(c(\"child\",\"adult\",\"senior\") %in% age_group)\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_tavlomig6x",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )\n  counter := counter + 1\n\n\n    IF counter /= 1\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_0p8jyqsdb3",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "validate",
      "expression": "# define parent:\nparents :=  sub(\"\\\\.[0-9]$\",\"\",level)\nis_parent := level %in% parents\n\n# define child sums, by search for parent pattern.\nchild_sums := sapply(level[is_parent], function(x){ \n    sum(weight[grepl(paste0(\"^\",x,\".[0-9]$\"),level)])\n  })\n# rule 16 \nall(weight[is_parent] == child_sums)\n\n",
      "severity": "error",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_w7ds1ph01i",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "validate",
      "expression": "# rule_15:\npostcode ~ city\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_htoh58eovd",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count\nrc,tmp_undecided, tmp_count := {1,0,0}\ntmp_turnover := EMPTY\n\n  FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )\n\n   IF tmp_turnover  = EMPTY \n    THEN tmp_undecided := 1 \n   \n     ELSE\n      IF tmp_turnover > 1000000\n       THEN tmp_count :=  tmp_count + 1  \n      END\n   END\n END\n\n IF tmp_undecided = 1 OR  tmp_count = 1\n  THEN rc := 0\n END\n\n\n\nRETURN rc",
      "severity": "warning",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_j1gok9otdo",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "validate",
      "expression": "# def_age_gp:\nage_gp :=  age[match(grandchild_of, person_id)]\n\n# rule_04:\nage_gp - 28 >= age\n",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_y67sjw3g3v",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "validate",
      "expression": "# rule_10:\nany(business_id == 100 & turnover > 1e+06)\n",
      "severity": "information",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_5do44oz18d",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of \n\nDSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"  \non (DSgp#person-id= DSgc# grandchild_of),\nreturn (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")\n \nDSr:= (DSmerge#gp_age-28) >= DSmerge#age\n\nDSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]\n\n",
      "severity": "error",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_kfroe89t72",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total\nrc,z1,total := {0,0,0}\n\nFOR EVERY s1  IN DATASET mat_Rule03 (level1)\n\n   IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"\n   IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"\n\nEND\n\n\"Check relative occurrence of value 'high'\"\n\nIF z1 > total * 0.1 THEN rc := 1 END\n\nRETURN rc",
      "severity": "warning",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_tovt169sob",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "validate",
      "expression": "# rule_10:\nany(business_id == 100 & turnover > 1e+06)\n",
      "severity": "information",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_ybd1tuwidb",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "Estatistik",
      "expression": "turnover /= cost + profit",
      "severity": "error",
      "description": "cost + profit = turnover"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_vpbfq0997r",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)\n\n\nDScount := DS[calc 1 as msr_count role \"MEASURE\"]\nDSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] =\nDScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)]\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_h7ocf92kow",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "validate",
      "expression": "# def_03:\ncounts :=  table(level)\n\n# rule_03:\ncounts[\"high\"] < 0.1 * sum(counts)\n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_9203xktxyt",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "validate",
      "expression": "# rule_04:\n(price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <= \n    0.5 * price_Ymin1\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_up23mm4pe8",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1 \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)]\nDSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)]\nDSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)]\nDScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)]\nDSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1\n",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_2ldnqeu7dj",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "validate",
      "expression": "# rule_01:\nhours_worked >= 1 & hours_worked <= 80\n",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_gv7882yi1",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "validate",
      "expression": "# def_age_gp:\nage_gp :=  age[match(grandchild_of, person_id)]\n\n# rule_04:\nage_gp - 28 >= age\n",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_09avb0qauj",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count\nrc,tmp_undecided, tmp_count := {1,0,0}\ntmp_turnover := EMPTY\n\n  FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )\n\n   IF tmp_turnover  = EMPTY \n    THEN tmp_undecided := 1 \n   \n     ELSE\n      IF tmp_turnover > 1000000\n       THEN tmp_count :=  tmp_count + 1  \n      END\n   END\n END\n\n IF tmp_undecided = 1 OR  tmp_count = 1\n  THEN rc := 0\n END\n\n\n\nRETURN rc",
      "severity": "warning",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_idgewt7w1h",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "validate",
      "expression": "# def_age_gp:\nage_gp :=  age[match(grandchild_of, person_id)]\n\n# rule_04:\nage_gp - 28 >= age\n",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_2sffxa4ynk",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit\nrc,tmp_sum,hit  := {0,0,0}\n\ntmp_AnzSst := FUNCTION LENGTH (level)\n\nIF tmp_AnzSst IN SEQUENCE  (1,3)\n THEN \n\n  FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )\n\n   IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND \n                          FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n   IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND \n                          FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n END\n\n  \"Check\"\n  IF tmp_sum /= weight AND hit = 1\n   THEN rc := 1\n  END\n\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_ssw9o0i4l0",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit\nrc,tmp_sum,hit  := {0,0,0}\n\ntmp_AnzSst := FUNCTION LENGTH (level)\n\nIF tmp_AnzSst IN SEQUENCE  (1,3)\n THEN \n\n  FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )\n\n   IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND \n                          FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n   IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND \n                          FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3) \n     THEN tmp_sum:= tmp_sum + tmp_weight  \n          hit := 1\n    END\n\n END\n\n  \"Check\"\n  IF tmp_sum /= weight AND hit = 1\n   THEN rc := 1\n  END\n\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_m2a83b58sv",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head\nrc := {0}\ntmp_relation_to_head := EMPTY\n\nIF relation_to_head ='4'\n THEN   \n\n   IF NOT spouse_id IN DATASET mat_Rule12 (person_id)\n    THEN rc := 1\n     ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )\n\n      IF tmp_relation_to_head /= '3'\n       THEN  rc := 1\n      END\n   END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_glxkwqrmbt",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "validate",
      "expression": "# def_age_gp:\nage_gp :=  age[match(grandchild_of, person_id)]\n\n# rule_04:\nage_gp - 28 >= age\n",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_i1yvu9bvb9",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1 \n\nDSout:=DS[filter season=\"out\"]\nDSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic \n   see page 42 VTL-part1 */\n",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_skgcvr69qs",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid\nrc,tmp_decided, tmp_invalid := {0,0,0}\ntmp_age := EMPTY\nFOR EVERY tmp_age IN DATASET mat_Rule09 (age)\n\n   IF tmp_age  = EMPTY \n    THEN tmp_decided := 1 \n   \n     ELSE\n      IF NOT tmp_age  IN SEQUENCE (0++113)\n       THEN tmp_invalid := 1  \n      END\n   END\nEND\n\nIF tmp_decided = 0 AND  tmp_invalid = 1\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_77nyxpwbn9",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "validate",
      "expression": "# rule_08:\nyear_of_birth == persons$year_of_birth\n",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_wusldq9gve",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "Estatistik",
      "expression": "DECLARE rc\nrc := 0\n\n\"Haushalt = household\"\n\nIF NOT  SEQUENCE (person_id , person , year_of_birth) \n IN DATASET Haushalt (person_id , person , year_of_birth)\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_55zdbm7rkk",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid\nrc,tmp_decided, tmp_invalid := {0,0,0}\ntmp_age := EMPTY\nFOR EVERY tmp_age IN DATASET mat_Rule09 (age)\n\n   IF tmp_age  = EMPTY \n    THEN tmp_decided := 1 \n   \n     ELSE\n      IF NOT tmp_age  IN SEQUENCE (0++113)\n       THEN tmp_invalid := 1  \n      END\n   END\nEND\n\nIF tmp_decided = 0 AND  tmp_invalid = 1\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_08e75davvp",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total\nrc,z1,total := {0,0,0}\n\nFOR EVERY s1  IN DATASET mat_Rule03 (level1)\n\n   IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"\n   IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"\n\nEND\n\n\"Check relative occurrence of value 'high'\"\n\nIF z1 > total * 0.1 THEN rc := 1 END\n\nRETURN rc",
      "severity": "warning",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_ob2kjr4lk1",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)\n\n\nDScount := DS[calc 1 as msr_count role \"MEASURE\"]\nDSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] =\nDScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)]\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_udz55fwwhf",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total\nrc,z1,total := {0,0,0}\n\nFOR EVERY s1  IN DATASET mat_Rule03 (level1)\n\n   IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"\n   IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"\n\nEND\n\n\"Check relative occurrence of value 'high'\"\n\nIF z1 > total * 0.1 THEN rc := 1 END\n\nRETURN rc",
      "severity": "warning",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_ogphp3gw83",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "VTL 1.0",
      "expression": "DS= business-id, cost, profit, turnover \n\nDSr:= (DS#cost + DS#profit) = DS#turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_dgosk9107r",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "validate",
      "expression": "# define parent:\nparents :=  sub(\"\\\\.[0-9]$\",\"\",level)\nis_parent := level %in% parents\n\n# define child sums, by search for parent pattern.\nchild_sums := sapply(level[is_parent], function(x){ \n    sum(weight[grepl(paste0(\"^\",x,\".[0-9]$\"),level)])\n  })\n# rule 16 \nall(weight[is_parent] == child_sums)\n\n",
      "severity": "error",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_u5ez0yddpb",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight\n\n/*\n * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)\n *\n *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN\n *  x1                      1\t      +\n *  x1.1          x1\t      2\t      +\n *  x1.2          x1\t      2\t      +\n *  x1.3          x1\t      2\t      +\n *  x2                      1       +\n *  x2.1          x2\t      2\t      +\n */\n\nDShierarchy := hierarchy(DS, level, \"HRC\", false)\nDScond := (DShierarchy = DS)[filter weight = \"false\"]\nDSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_j6kohhxzdk",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "validate",
      "expression": "# def_counts:\ncounts :=  table(gender, age_group)\n\n# rule_13:\nall(counts <= 1)\n",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_fxz9c1zpuj",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age\ntmp_age := EMPTY\n\n  tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)\n\nIF tmp_age - 28 < age\n THEN rc := 1\nEND\n\n\nRETURN rc",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_op9aw77hf9",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1\n",
      "severity": "information",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_pk339czv5i",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head\nrc := {0}\ntmp_relation_to_head := EMPTY\n\nIF relation_to_head ='4'\n THEN   \n\n   IF NOT spouse_id IN DATASET mat_Rule12 (person_id)\n    THEN rc := 1\n     ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )\n\n      IF tmp_relation_to_head /= '3'\n       THEN  rc := 1\n      END\n   END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_7aa8ytj7h1",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier)\nDSgender= gender(identifier) {male, female}\nDSage =age-group(identifier) {child, adult, senior}\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,\n    on\n    (1 = 1)\n    return\n   (DSgender#gender as \"gender\",DSage #age-group as \"age-group\"))\nDSdiff := DSmerge setdiff DS[keep (gender, age-group)]\nDSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_6p8cd3mpzd",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "validate",
      "expression": "# def_count:\nperson_count :=  table(person$household_id)\n\n# rule17:\nmembers == person_count[household_id]\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_i4gy0bhhgr",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "validate",
      "expression": "# def_03:\ncounts :=  table(level)\n\n# rule_03:\ncounts[\"high\"] < 0.1 * sum(counts)\n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_gkaz2s9fpj",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY)\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_f7xcvp0c04",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_5znpr691pk",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total\nrc,z1,total := {0,0,0}\n\nFOR EVERY s1  IN DATASET mat_Rule03 (level1)\n\n   IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"\n   IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"\n\nEND\n\n\"Check relative occurrence of value 'high'\"\n\nIF z1 > total * 0.1 THEN rc := 1 END\n\nRETURN rc",
      "severity": "warning",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_ivhdr5jdr3",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)\n\nDScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]= \n        DShousehold)[filter members= \"false\"]\nDSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0\n\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_o3xjdxqpf6",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of \n\nDSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"  \non (DSgp#person-id= DSgc# grandchild_of),\nreturn (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")\n \nDSr:= (DSmerge#gp_age-28) >= DSmerge#age\n\nDSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]\n\n",
      "severity": "error",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_5xawrm7uhk",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age\ntmp_age := EMPTY\n\n  tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)\n\nIF tmp_age - 28 < age\n THEN rc := 1\nEND\n\n\nRETURN rc",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_o2m8v9db2z",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,\n    male_child, female_child, male_adult, female_adult, male_senior, female_senior\nrc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}\n\n  FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)\n   IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END\n\n  END\n    IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0 \n     THEN rc := 1\n    END\n\n\nRETURN rc",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set."
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_pfidht3fc3",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0\n",
      "severity": "warning",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_5c8ze054zp",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth\nDS_p= person-id(identifier),person, year_of_birth, gender\n \nDSr:= DS_h#year_of_birth=DS_p#year_of_birth\n",
      "severity": "information",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_prgnzo2thm",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "validate",
      "expression": "# rule_08:\nyear_of_birth == persons$year_of_birth\n",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_wwac9flt7t",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )\n  counter := counter + 1\n\n\n    IF counter /= 1\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_lgatmeepsd",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)\n\n\nDScount := DS[calc 1 as msr_count role \"MEASURE\"]\nDSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] =\nDScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)]\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_4e7xpeuzft",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "validate",
      "expression": "# rule_02:\ncost + profit == turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_qe4ji4poq4",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "validate",
      "expression": "# def_age_gp:\nage_gp :=  age[match(grandchild_of, person_id)]\n\n# rule_04:\nage_gp - 28 >= age\n",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_lxncb1ykz4",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "validate",
      "expression": "# def_age_gp:\nage_gp :=  age[match(grandchild_of, person_id)]\n\n# rule_04:\nage_gp - 28 >= age\n",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_wys39mxbs1",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,\n    male_child, female_child, male_adult, female_adult, male_senior, female_senior\nrc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}\n\n  FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)\n   IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END\n\n  END\n    IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0 \n     THEN rc := 1\n    END\n\n\nRETURN rc",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set."
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_32oa8uuqtg",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier)\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"]\nDScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1]\nDSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0\n",
      "severity": "information",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_i3ymgdzx9j",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "validate",
      "expression": "# rule_08:\nyear_of_birth == persons$year_of_birth\n",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_pr3nowj4k",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier)\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"]\nDScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1]\nDSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0\n",
      "severity": "information",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_8m9npxifbm",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,\n    male_child, female_child, male_adult, female_adult, male_senior, female_senior\nrc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}\n\n  FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)\n   IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END\n   IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END\n   IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END\n\n  END\n    IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0 \n     THEN rc := 1\n    END\n\n\nRETURN rc",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set."
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_oi8rtq8fk9",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total\nrc,z1,total := {0,0,0}\n\nFOR EVERY s1  IN DATASET mat_Rule03 (level1)\n\n   IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"\n   IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"\n\nEND\n\n\"Check relative occurrence of value 'high'\"\n\nIF z1 > total * 0.1 THEN rc := 1 END\n\nRETURN rc",
      "severity": "warning",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_f7ix4bc16p",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "VTL 1.0",
      "expression": "DS= business-id, cost, profit, turnover \n\nDSr:= (DS#cost + DS#profit) = DS#turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_bifp0uaf42",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "validate",
      "expression": "# rule_09:\nall(age >= 0 & age <= 113)\n",
      "severity": "error",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_uhsdsdmqh4",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "validate",
      "expression": "# rule_15:\npostcode ~ city\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_hh7hermy87",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1 \n\nDSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_6n6bdyball",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age\ntmp_age := EMPTY\n\n  tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)\n\nIF tmp_age - 28 < age\n THEN rc := 1\nEND\n\n\nRETURN rc",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_a9zdk70cgj",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total\nrc,z1,total := {0,0,0}\n\nFOR EVERY s1  IN DATASET mat_Rule03 (level1)\n\n   IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"\n   IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"\n\nEND\n\n\"Check relative occurrence of value 'high'\"\n\nIF z1 > total * 0.1 THEN rc := 1 END\n\nRETURN rc",
      "severity": "warning",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_cvakwm7nz7",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1\n",
      "severity": "information",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_fi5wxheegt",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr\nrc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}\n\n\"Count totals SP2 and SP3 across all records\"\n  FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)\n          counter := counter + 1\n          s_t   := s_t + t\n          s_tm1 := s_tm1 + tm1\n\n  END\n\n\"Evaluate result\"\n\nIF counter > 0\n\n  THEN \n    \"Compute previous average\"\n    d_t       := s_t   / counter\n    d_tm1     := s_tm1 / counter\n\t\n    \"Compute new average\"\n    d_t_neu := (s_t - price_t + price_tm1) / counter\n\n    \"Compute relative size of new average\"\n     DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)\n\n  \"Check\"\n  IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)\n   THEN rc := 1\n  END\n\nEND \n \nRETURN rc",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_3ggcvj51sz",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "validate",
      "expression": "\n# def_ratio\nmeani := mean(price_t)  + (price_tm1 - price_t)/length(price_t)\nratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))\n\n# rule_07\nratio >= 0.9 & ratio <= 1.1\n\n",
      "severity": "warning",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_l1yucpuvgp",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0\n",
      "severity": "warning",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_crlyjzacb4",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1 \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)]\nDSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)]\nDSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)]\nDScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)]\nDSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1\n",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_1umhb2lwi2",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "validate",
      "expression": "# rule_11:\nsum(business_id == 100 & turnover > 1e+06) == 1\n",
      "severity": "error",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_oiwazsfkn1",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "validate",
      "expression": "# def_age_gp:\nage_gp :=  age[match(grandchild_of, person_id)]\n\n# rule_04:\nage_gp - 28 >= age\n",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_2w5iyr0oda",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )\n   counter := counter + 1\n  END\n\n   IF counter /= members\n     THEN rc := 1\n    END\n\nRETURN rc",
      "severity": "error",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_35d80qgwe4",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight\n\n/*\n * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)\n *\n *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN\n *  x1                      1\t      +\n *  x1.1          x1\t      2\t      +\n *  x1.2          x1\t      2\t      +\n *  x1.3          x1\t      2\t      +\n *  x2                      1       +\n *  x2.1          x2\t      2\t      +\n */\n\nDShierarchy := hierarchy(DS, level, \"HRC\", false)\nDScond := (DShierarchy = DS)[filter weight = \"false\"]\nDSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_e42ekumnwi",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked\n\nDSr:= DS#hours_worked between 1 and 80\n/* In case a value in hours_worked is NULL the value returned will be NULL */\n.\n",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_hvfduapdwq",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )\n   counter := counter + 1\n  END\n\n   IF counter /= members\n     THEN rc := 1\n    END\n\nRETURN rc",
      "severity": "error",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_dnmn2egm5n",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "VTL 1.0",
      "expression": "DS= business-id, cost, profit, turnover \n\nDSr:= (DS#cost + DS#profit) = DS#turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_zpd0nw6di2",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count\nrc,tmp_undecided, tmp_count := {1,0,0}\ntmp_turnover := EMPTY\n\n  FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )\n\n   IF tmp_turnover  = EMPTY \n    THEN tmp_undecided := 1 \n   \n     ELSE\n      IF tmp_turnover > 1000000\n       THEN tmp_count :=  tmp_count + 1  \n      END\n   END\n END\n\n IF tmp_undecided = 1 OR  tmp_count = 1\n  THEN rc := 0\n END\n\n\n\nRETURN rc",
      "severity": "warning",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_aezirjtji8",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )\n  counter := counter + 1\n\n\n    IF counter /= 1\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_g26cm0dfjl",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr\nrc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}\n\n\"Count totals SP2 and SP3 across all records\"\n  FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)\n          counter := counter + 1\n          s_t   := s_t + t\n          s_tm1 := s_tm1 + tm1\n\n  END\n\n\"Evaluate result\"\n\nIF counter > 0\n\n  THEN \n    \"Compute previous average\"\n    d_t       := s_t   / counter\n    d_tm1     := s_tm1 / counter\n\t\n    \"Compute new average\"\n    d_t_neu := (s_t - price_t + price_tm1) / counter\n\n    \"Compute relative size of new average\"\n     DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)\n\n  \"Check\"\n  IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)\n   THEN rc := 1\n  END\n\nEND \n \nRETURN rc",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_qxt2f6ul5d",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "validate",
      "expression": "# rule 14\nall(table(gender, age_group) >= 1) & \n  all(c(\"male\", \"female\") %in% gender) &\n  all(c(\"child\",\"adult\",\"senior\") %in% age_group)\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_nqbw3jnblx",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid\nrc,tmp_decided, tmp_invalid := {0,0,0}\ntmp_age := EMPTY\nFOR EVERY tmp_age IN DATASET mat_Rule09 (age)\n\n   IF tmp_age  = EMPTY \n    THEN tmp_decided := 1 \n   \n     ELSE\n      IF NOT tmp_age  IN SEQUENCE (0++113)\n       THEN tmp_invalid := 1  \n      END\n   END\nEND\n\nIF tmp_decided = 0 AND  tmp_invalid = 1\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_kf9s6k0up9",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)\n\n\nDScount := DS[calc 1 as msr_count role \"MEASURE\"]\nDSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] =\nDScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)]\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_szml49m40o",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_city, counter\nrc, counter  := {0,0}\n\n  FOR EVERY tmp_city IN DATASET mat_Rule15 (postcode = postcode ; city )\n   IF city /= tmp_city\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_1ec8mbbcjm",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age\n\nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]\n\nDScond:= DScalc[filter age between 0 and 113]\n\nDSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]\n\n",
      "severity": "information",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_649hv0ue9u",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "validate",
      "expression": "# rule_04:\n(price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <= \n    0.5 * price_Ymin1\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_ndsavlwj5z",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of \n\nDSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"  \non (DSgp#person-id= DSgc# grandchild_of),\nreturn (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")\n \nDSr:= (DSmerge#gp_age-28) >= DSmerge#age\n\nDSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]\n\n",
      "severity": "error",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_qvssz33qa6",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_city, counter\nrc, counter  := {0,0}\n\n  FOR EVERY tmp_city IN DATASET mat_Rule15 (postcode = postcode ; city )\n   IF city /= tmp_city\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_hxqy0uja0r",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "validate",
      "expression": "# rule_06:\nif (season == \"out\") price_t == price_tmin1 & quantity_t == \n    quantity_tmin1\n",
      "severity": "information",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_56lk40ypvk",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY)\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_sn5avzua1t",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1 \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)]\nDSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)]\nDSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)]\nDScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)]\nDSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1\n",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_48c2ihsogf",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1 \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)]\nDSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)]\nDSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)]\nDScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)]\nDSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1\n",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_2yt092pt3i",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "validate",
      "expression": "# rule_15:\npostcode ~ city\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_ec6oc0shg9",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total\nrc,z1,total := {0,0,0}\n\nFOR EVERY s1  IN DATASET mat_Rule03 (level1)\n\n   IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"\n   IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"\n\nEND\n\n\"Check relative occurrence of value 'high'\"\n\nIF z1 > total * 0.1 THEN rc := 1 END\n\nRETURN rc",
      "severity": "warning",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_m9g0l7gthn",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1 \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)]\nDSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)]\nDSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)]\nDScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)]\nDSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1\n",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_y9h2cgi65l",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1\nrc := 0\n\nLOOP FOR x1 := 1 UNTIL x1 > members\n     IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )\n      THEN rc := 1\n     END\n\n  END\n\nRETURN rc",
      "severity": "error",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_zilirjkps3",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "VTL 1.0",
      "expression": "DS= business-id, cost, profit, turnover \n\nDSr:= (DS#cost + DS#profit) = DS#turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_2k2frq8e98",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_xhccm3aaba",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )\n  counter := counter + 1\n\n\n    IF counter /= 1\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_59gu9c8q8l",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head\nrc := {0}\ntmp_relation_to_head := EMPTY\n\nIF relation_to_head ='4'\n THEN   \n\n   IF NOT spouse_id IN DATASET mat_Rule12 (person_id)\n    THEN rc := 1\n     ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )\n\n      IF tmp_relation_to_head /= '3'\n       THEN  rc := 1\n      END\n   END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_h36lzbi4i4",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid\nrc,tmp_decided, tmp_invalid := {0,0,0}\ntmp_age := EMPTY\nFOR EVERY tmp_age IN DATASET mat_Rule09 (age)\n\n   IF tmp_age  = EMPTY \n    THEN tmp_decided := 1 \n   \n     ELSE\n      IF NOT tmp_age  IN SEQUENCE (0++113)\n       THEN tmp_invalid := 1  \n      END\n   END\nEND\n\nIF tmp_decided = 0 AND  tmp_invalid = 1\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_5ild7fb0ho",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)\n\nDScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]= \n        DShousehold)[filter members= \"false\"]\nDSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0\n\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_u9wiobvrxo",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total\nrc,z1,total := {0,0,0}\n\nFOR EVERY s1  IN DATASET mat_Rule03 (level1)\n\n   IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"\n   IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"\n\nEND\n\n\"Check relative occurrence of value 'high'\"\n\nIF z1 > total * 0.1 THEN rc := 1 END\n\nRETURN rc",
      "severity": "warning",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_x1899svvnl",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1 \n\nDSout:=DS[filter season=\"out\"]\nDSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic \n   see page 42 VTL-part1 */\n",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_37ovdake1j",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1 \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)]\nDSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)]\nDSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)]\nDScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)]\nDSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1\n",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_vuxfe9q6ic",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "validate",
      "expression": "\n# def_ratio\nmeani := mean(price_t)  + (price_tm1 - price_t)/length(price_t)\nratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))\n\n# rule_07\nratio >= 0.9 & ratio <= 1.1\n\n",
      "severity": "warning",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_27fwh3qx9m",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "validate",
      "expression": "# rule_02:\ncost + profit == turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_wlxcxmn79o",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "validate",
      "expression": "# rule_04:\n(price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <= \n    0.5 * price_Ymin1\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_37jkjoicjy",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1\nrc := 0\n\nLOOP FOR x1 := 1 UNTIL x1 > members\n     IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )\n      THEN rc := 1\n     END\n\n  END\n\nRETURN rc",
      "severity": "error",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_vynij82yxp",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)\n\nDScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]= \n        DShousehold)[filter members= \"false\"]\nDSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0\n\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_j1all2o7qf",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "validate",
      "expression": "# rule_08:\nyear_of_birth == persons$year_of_birth\n",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_76siu4xhis",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "validate",
      "expression": "# rule_08:\nyear_of_birth == persons$year_of_birth\n",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_mqcadc6xh9",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "validate",
      "expression": "\n# def_ratio\nmeani := mean(price_t)  + (price_tm1 - price_t)/length(price_t)\nratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))\n\n# rule_07\nratio >= 0.9 & ratio <= 1.1\n\n",
      "severity": "warning",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_1zxstony4b",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "Estatistik",
      "expression": "DECLARE rc\nrc := 0\n\n\"Haushalt = household\"\n\nIF NOT  SEQUENCE (person_id , person , year_of_birth) \n IN DATASET Haushalt (person_id , person , year_of_birth)\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_louc74r1b5",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "validate",
      "expression": "\n# def_ratio\nmeani := mean(price_t)  + (price_tm1 - price_t)/length(price_t)\nratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))\n\n# rule_07\nratio >= 0.9 & ratio <= 1.1\n\n",
      "severity": "warning",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_abca0zodl6",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth\nDS_p= person-id(identifier),person, year_of_birth, gender\n \nDSr:= DS_h#year_of_birth=DS_p#year_of_birth\n",
      "severity": "information",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_c6r4bbpu1p",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight\n\n/*\n * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)\n *\n *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN\n *  x1                      1\t      +\n *  x1.1          x1\t      2\t      +\n *  x1.2          x1\t      2\t      +\n *  x1.3          x1\t      2\t      +\n *  x2                      1       +\n *  x2.1          x2\t      2\t      +\n */\n\nDShierarchy := hierarchy(DS, level, \"HRC\", false)\nDScond := (DShierarchy = DS)[filter weight = \"false\"]\nDSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_tekrb0fka7",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of \n\nDSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"  \non (DSgp#person-id= DSgc# grandchild_of),\nreturn (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")\n \nDSr:= (DSmerge#gp_age-28) >= DSmerge#age\n\nDSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]\n\n",
      "severity": "error",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_regk05uim6",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head\nrc := {0}\ntmp_relation_to_head := EMPTY\n\nIF relation_to_head ='4'\n THEN   \n\n   IF NOT spouse_id IN DATASET mat_Rule12 (person_id)\n    THEN rc := 1\n     ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )\n\n      IF tmp_relation_to_head /= '3'\n       THEN  rc := 1\n      END\n   END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_bl1hwgofzi",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "validate",
      "expression": "# rule_01:\nhours_worked >= 1 & hours_worked <= 80\n",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_zuzqw3tdo9",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of \n\nDSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"  \non (DSgp#person-id= DSgc# grandchild_of),\nreturn (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")\n \nDSr:= (DSmerge#gp_age-28) >= DSmerge#age\n\nDSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]\n\n",
      "severity": "error",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_8cqhpfjy2i",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age\ntmp_age := EMPTY\n\n  tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)\n\nIF tmp_age - 28 < age\n THEN rc := 1\nEND\n\n\nRETURN rc",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_8lufy239lp",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth\nDS_p= person-id(identifier),person, year_of_birth, gender\n \nDSr:= DS_h#year_of_birth=DS_p#year_of_birth\n",
      "severity": "information",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_r5wzz9jc8f",
    "type": "validation",
    "rule": {
      "id": "Rule 15",
      "language": "validate",
      "expression": "# define parent:\nparents :=  sub(\"\\\\.[0-9]$\",\"\",level)\nis_parent := level %in% parents\n\n# define child sums, by search for parent pattern.\nchild_sums := sapply(level[is_parent], function(x){ \n    sum(weight[grepl(paste0(\"^\",x,\".[0-9]$\"),level)])\n  })\n# rule 16 \nall(weight[is_parent] == child_sums)\n\n",
      "severity": "error",
      "description": "A check on hierarchical aggreggation.\n\n forall k >= 1: w(x1. ... .xk) equals the sum of\n w(x1. ... .xk.i) forall i >= 0"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_mpsf1uvph4",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "validate",
      "expression": "# def_count:\nperson_count :=  table(person$household_id)\n\n# rule17:\nmembers == person_count[household_id]\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_21pm2qimv8",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_city, counter\nrc, counter  := {0,0}\n\n  FOR EVERY tmp_city IN DATASET mat_Rule15 (postcode = postcode ; city )\n   IF city /= tmp_city\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "warning",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_l6ell7scoi",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid\nrc,tmp_decided, tmp_invalid := {0,0,0}\ntmp_age := EMPTY\nFOR EVERY tmp_age IN DATASET mat_Rule09 (age)\n\n   IF tmp_age  = EMPTY \n    THEN tmp_decided := 1 \n   \n     ELSE\n      IF NOT tmp_age  IN SEQUENCE (0++113)\n       THEN tmp_invalid := 1  \n      END\n   END\nEND\n\nIF tmp_decided = 0 AND  tmp_invalid = 1\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_2x1b2fzqqt",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "validate",
      "expression": "# define vector with T/F value for each household\ntest := sapply(1:length(household_id), function(i){\n  hhid <- household_id[i]\n  all(1:members[i] %in% persons$person_id[persons$household_id == hhid])\n})\n\n# rule must hold for all households\nall(test)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_l07cjlb3lp",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "validate",
      "expression": "# define vector with T/F value for each household\ntest := sapply(1:length(household_id), function(i){\n  hhid <- household_id[i]\n  all(1:members[i] %in% persons$person_id[persons$household_id == hhid])\n})\n\n# rule must hold for all households\nall(test)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_wmyqqgoo0y",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth\nDS_p= person-id(identifier),person, year_of_birth, gender\n \nDSr:= DS_h#year_of_birth=DS_p#year_of_birth\n",
      "severity": "information",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_8btpdwj4yr",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "validate",
      "expression": "# rule_02:\ncost + profit == turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_cxoxo9n0m4",
    "type": "validation",
    "rule": {
      "id": "Rule 14",
      "language": "validate",
      "expression": "# rule_15:\npostcode ~ city\n",
      "severity": "information",
      "description": "If two records have the same postal code, they must have the same value for city (a functional dependency).",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_bbu02y1nah",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "validate",
      "expression": "# rule_11:\nsum(business_id == 100 & turnover > 1e+06) == 1\n",
      "severity": "error",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_sysetxnoqq",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "validate",
      "expression": "# rule_04:\n(price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <= \n    0.5 * price_Ymin1\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_kkl94otdcl",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY)\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5\nOR\nFUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_toyjl3ti1f",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "validate",
      "expression": "# def_counts:\ncounts :=  table(gender, age_group)\n\n# rule_13:\nall(counts <= 1)\n",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_gj9dqv2llx",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "validate",
      "expression": "# define vector with T/F value for each household\ntest := sapply(1:length(household_id), function(i){\n  hhid <- household_id[i]\n  all(1:members[i] %in% persons$person_id[persons$household_id == hhid])\n})\n\n# rule must hold for all households\nall(test)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_6465djpxka",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked\n\nDSr:= DS#hours_worked between 1 and 80\n/* In case a value in hours_worked is NULL the value returned will be NULL */\n.\n",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_5fh2i81mjc",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=household-id(identifier), person-id(identifier)\n\n\nDSmerge:=merge (DShousehold as \"DSh\", DSpersons as \"DSp\" \n        on DSh#household-id=DSp#household-id, \n        return \n        (DSh#household-id as household-id,DSh#person-id as person-id,DSp#members as members))\n \n\nDSout:= DSmerge[filter person-id < 1 or person-id>members][keep (household-id,members)][aggregate count (members)] = 0\n\nDSdist:= DSmerge[rename (person-id) as \"p_id\" role \"measure\"][aggregate count_distinct (p_id)][filter p id <> members]\n[aggregate count (members)] = 0\n\n\nDSr := (DSout and DSdist)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_1e9ssg65kq",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "validate",
      "expression": "# define vector with T/F value for each household\ntest := sapply(1:length(household_id), function(i){\n  hhid <- household_id[i]\n  all(1:members[i] %in% persons$person_id[persons$household_id == hhid])\n})\n\n# rule must hold for all households\nall(test)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_6qw2sg8zij",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "VTL 1.0",
      "expression": "DS= business-id, cost, profit, turnover \n\nDSr:= (DS#cost + DS#profit) = DS#turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_1snl7oox1y",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth\nDS_p= person-id(identifier),person, year_of_birth, gender\n \nDSr:= DS_h#year_of_birth=DS_p#year_of_birth\n",
      "severity": "information",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_kjok35k9hv",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "Estatistik",
      "expression": "DECLARE rc\nrc := 0\n\n\"Haushalt = household\"\n\nIF NOT  SEQUENCE (person_id , person , year_of_birth) \n IN DATASET Haushalt (person_id , person , year_of_birth)\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_mhszf6rpyz",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "validate",
      "expression": "# rule_11:\nsum(business_id == 100 & turnover > 1e+06) == 1\n",
      "severity": "error",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_jhd08ctaam",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_0jgs7iu847",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier)\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"]\nDScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1]\nDSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0\n",
      "severity": "information",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_qs01d1y8us",
    "type": "validation",
    "rule": {
      "id": "Rule 3",
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1 \n\nDSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */\n",
      "severity": "error",
      "description": "Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%).\nThe same must hold for the price change between the current month and the same month last year.",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_57r3htwjy9",
    "type": "validation",
    "rule": {
      "id": "Rule 4",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age\ntmp_age := EMPTY\n\n  tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)\n\nIF tmp_age - 28 < age\n THEN rc := 1\nEND\n\n\nRETURN rc",
      "severity": "information",
      "description": "Age of grandparents â€“ 28 >= age of their grandchildren",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_xuskyfs29c",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )\n  counter := counter + 1\n\n\n    IF counter /= 1\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_0nv0qvn81o",
    "type": "validation",
    "rule": {
      "id": "Rule 7",
      "language": "validate",
      "expression": "# rule_08:\nyear_of_birth == persons$year_of_birth\n",
      "severity": "warning",
      "description": "Year of birth in household questionnaire must equal year of birth in individual questionnaire",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_7u2kuufum2",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1\nrc := 0\n\nLOOP FOR x1 := 1 UNTIL x1 > members\n     IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )\n      THEN rc := 1\n     END\n\n  END\n\nRETURN rc",
      "severity": "error",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_u920kfxixr",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0\n",
      "severity": "warning",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_wjmach0nqs",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count\nrc,tmp_undecided, tmp_count := {1,0,0}\ntmp_turnover := EMPTY\n\n  FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )\n\n   IF tmp_turnover  = EMPTY \n    THEN tmp_undecided := 1 \n   \n     ELSE\n      IF tmp_turnover > 1000000\n       THEN tmp_count :=  tmp_count + 1  \n      END\n   END\n END\n\n IF tmp_undecided = 1 OR  tmp_count = 1\n  THEN rc := 0\n END\n\n\n\nRETURN rc",
      "severity": "warning",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_hkotr9s7os",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )\n  counter := counter + 1\n\n\n    IF counter /= 1\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_m8f4b6rycz",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)\n\nDScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]= \n        DShousehold)[filter members= \"false\"]\nDSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0\n\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_om7hpgrqe9",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1 \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)]\nDSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)]\nDSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)]\nDScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)]\nDSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1\n",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_krjzgog84g",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "validate",
      "expression": "# rule 14\nall(table(gender, age_group) >= 1) & \n  all(c(\"male\", \"female\") %in% gender) &\n  all(c(\"child\",\"adult\",\"senior\") %in% age_group)\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_fzary8e2ay",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "validate",
      "expression": "# rule_06:\nif (season == \"out\") price_t == price_tmin1 & quantity_t == \n    quantity_tmin1\n",
      "severity": "information",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_mllofmk1go",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr\nrc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}\n\n\"Count totals SP2 and SP3 across all records\"\n  FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)\n          counter := counter + 1\n          s_t   := s_t + t\n          s_tm1 := s_tm1 + tm1\n\n  END\n\n\"Evaluate result\"\n\nIF counter > 0\n\n  THEN \n    \"Compute previous average\"\n    d_t       := s_t   / counter\n    d_tm1     := s_tm1 / counter\n\t\n    \"Compute new average\"\n    d_t_neu := (s_t - price_t + price_tm1) / counter\n\n    \"Compute relative size of new average\"\n     DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)\n\n  \"Check\"\n  IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)\n   THEN rc := 1\n  END\n\nEND \n \nRETURN rc",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_ykwh8lh95b",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_lznws9jd6c",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "validate",
      "expression": "# def_rel_4:\nrel_4 :=  person_id[relation_to_head == 4]\n\n# def_rel_3:\nspouse_of_rel_3 :=  spouse_id[relation_to_head == 3]\n\n# rule_12:\nall(rel_4 %in% spouse_of_rel_3)\n",
      "severity": "error",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_s8es5133p4",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "validate",
      "expression": "# def_03:\ncounts :=  table(level)\n\n# rule_03:\ncounts[\"high\"] < 0.1 * sum(counts)\n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_3ulp07yi45",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "validate",
      "expression": "# rule_06:\nif (season == \"out\") price_t == price_tmin1 & quantity_t == \n    quantity_tmin1\n",
      "severity": "information",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_1oc602kk4s",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "VTL 1.0",
      "expression": "DS=level \n \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"]\nDSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1) \n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_ib921aompc",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1 \n\nDSout:=DS[filter season=\"out\"]\nDSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic \n   see page 42 VTL-part1 */\n",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_cs6kp9mt7x",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)\n\nDScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]= \n        DShousehold)[filter members= \"false\"]\nDSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0\n\n",
      "severity": "warning",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_ddhbjfi4px",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "validate",
      "expression": "# define vector with T/F value for each household\ntest := sapply(1:length(household_id), function(i){\n  hhid <- household_id[i]\n  all(1:members[i] %in% persons$person_id[persons$household_id == hhid])\n})\n\n# rule must hold for all households\nall(test)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_w6rs93tqtx",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid\nrc,tmp_decided, tmp_invalid := {0,0,0}\ntmp_age := EMPTY\nFOR EVERY tmp_age IN DATASET mat_Rule09 (age)\n\n   IF tmp_age  = EMPTY \n    THEN tmp_decided := 1 \n   \n     ELSE\n      IF NOT tmp_age  IN SEQUENCE (0++113)\n       THEN tmp_invalid := 1  \n      END\n   END\nEND\n\nIF tmp_decided = 0 AND  tmp_invalid = 1\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_l8y8i0l8lf",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid\nrc,tmp_decided, tmp_invalid := {0,0,0}\ntmp_age := EMPTY\nFOR EVERY tmp_age IN DATASET mat_Rule09 (age)\n\n   IF tmp_age  = EMPTY \n    THEN tmp_decided := 1 \n   \n     ELSE\n      IF NOT tmp_age  IN SEQUENCE (0++113)\n       THEN tmp_invalid := 1  \n      END\n   END\nEND\n\nIF tmp_decided = 0 AND  tmp_invalid = 1\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_dfrszljccx",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0\n",
      "severity": "warning",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_q52tdl6mxx",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "validate",
      "expression": "# def_counts:\ncounts :=  table(gender, age_group)\n\n# rule_13:\nall(counts <= 1)\n",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_fh0qe2bjsm",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1 \n\nDSout:=DS[filter season=\"out\"]\nDSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)\n\n/* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic \n   see page 42 VTL-part1 */\n",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_htum9ib6e1",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "validate",
      "expression": "# rule_09:\nall(age >= 0 & age <= 113)\n",
      "severity": "error",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_ou1g8l6ui8",
    "type": "validation",
    "rule": {
      "id": "Rule 9",
      "language": "validate",
      "expression": "# rule_10:\nany(business_id == 100 & turnover > 1e+06)\n",
      "severity": "information",
      "description": "exists x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_no77s1nshp",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count\nrc,tmp_undecided, tmp_count := {1,0,0}\ntmp_turnover := EMPTY\n\n  FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )\n\n   IF tmp_turnover  = EMPTY \n    THEN tmp_undecided := 1 \n   \n     ELSE\n      IF tmp_turnover > 1000000\n       THEN tmp_count :=  tmp_count + 1  \n      END\n   END\n END\n\n IF tmp_undecided = 1 OR  tmp_count = 1\n  THEN rc := 0\n END\n\n\n\nRETURN rc",
      "severity": "warning",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_ubfpbawsck",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), spouse-id, relation_to_head\n\nDSfilter := DS[filter relation_to_head = 4]\nDSmerge := merge(DS \"DSx\",DS \"DSy\",\n    on\n    (DSy#spouse-id = DSx#person-id and DSy#relation_to_head = 3 and DSx#relation_to_head = 4)\n    return\n    (DSx#person-id as \"person-id\"))\n\nDSnot_exists := DSfilter not_exists_in DSmerge\n\nDScount := DSnot_exists[calc 1 as \"id\" role \"identifier\"][keep (id, person_id)][aggregate count (person_id)] = 0\n",
      "severity": "information",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_jidu0vj6my",
    "type": "validation",
    "rule": {
      "id": "Rule 6",
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1 \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)]\nDSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)]\nDSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)]\nDScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)]\nDSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1\n",
      "severity": "error",
      "description": "The price change of a single item may not influence the change in the mean prices by more than 10%, upwards or downwards",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_sqh1emvjfv",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier)\nDSgender= gender(identifier) {male, female}\nDSage =age-group(identifier) {child, adult, senior}\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,\n    on\n    (1 = 1)\n    return\n   (DSgender#gender as \"gender\",DSage #age-group as \"age-group\"))\nDSdiff := DSmerge setdiff DS[keep (gender, age-group)]\nDSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_v7l8btm87d",
    "type": "validation",
    "rule": {
      "id": "Rule 12",
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )\n  counter := counter + 1\n\n\n    IF counter /= 1\n     THEN rc := 1\n    END\n\nEND\nRETURN rc",
      "severity": "error",
      "description": "The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_rcfv86jvh8",
    "type": "validation",
    "rule": {
      "id": "Rule 1",
      "language": "validate",
      "expression": "# rule_02:\ncost + profit == turnover\n",
      "severity": "warning",
      "description": "cost + profit = turnover",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_g19yknm4p4",
    "type": "validation",
    "rule": {
      "id": "Rule 17",
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members\nDSpersons=household-id(identifier), person-id(identifier)\n\n\nDSmerge:=merge (DShousehold as \"DSh\", DSpersons as \"DSp\" \n        on DSh#household-id=DSp#household-id, \n        return \n        (DSh#household-id as household-id,DSh#person-id as person-id,DSp#members as members))\n \n\nDSout:= DSmerge[filter person-id < 1 or person-id>members][keep (household-id,members)][aggregate count (members)] = 0\n\nDSdist:= DSmerge[rename (person-id) as \"p_id\" role \"measure\"][aggregate count_distinct (p_id)][filter p id <> members]\n[aggregate count (members)] = 0\n\n\nDSr := (DSout and DSdist)\n\n",
      "severity": "warning",
      "description": "forall x: forall n:\n  IF 1 <= n <= x.no_of_household_members\n  THEN exists y: \n    x.household-id = y.household-id AND y.person-id = n",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_6sqols73du",
    "type": "validation",
    "rule": {
      "id": "Rule 0",
      "language": "validate",
      "expression": "# rule_01:\nhours_worked >= 1 & hours_worked <= 80\n",
      "severity": "warning",
      "description": "Number of hours per week usually worked should be between 1 and 80",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_hqihk96ton",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "validate",
      "expression": "# def_03:\ncounts :=  table(level)\n\n# rule_03:\ncounts[\"high\"] < 0.1 * sum(counts)\n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_2hz9a3xjrg",
    "type": "validation",
    "rule": {
      "id": "Rule 2",
      "language": "VTL 1.0",
      "expression": "DS=level \n \nDScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"]\nDSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1) \n",
      "severity": "error",
      "description": "Check whether the relative occurrence of the category high in a column containing values low, high, medium does not exceed 10%",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_8m4ohff8br",
    "type": "validation",
    "rule": {
      "id": "Rule 10",
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"] \nDScond:= DScalc[filter  business_id=100 and turnover>1000000] \nDSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1\n",
      "severity": "information",
      "description": "exists! x: x.business-id = 100 AND x.turnover > 1.000.000",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": [],
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_k5yh90ltrk",
    "type": "validation",
    "rule": {
      "id": "Rule 5",
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "warning",
      "description": "If a product is out of season, the price and quantity must be the same as last month's values",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_sbh58vj3mw",
    "type": "validation",
    "rule": {
      "id": "Rule 8",
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid\nrc,tmp_decided, tmp_invalid := {0,0,0}\ntmp_age := EMPTY\nFOR EVERY tmp_age IN DATASET mat_Rule09 (age)\n\n   IF tmp_age  = EMPTY \n    THEN tmp_decided := 1 \n   \n     ELSE\n      IF NOT tmp_age  IN SEQUENCE (0++113)\n       THEN tmp_invalid := 1  \n      END\n   END\nEND\n\nIF tmp_decided = 0 AND  tmp_invalid = 1\n THEN rc := 1\nEND\n\nRETURN rc",
      "severity": "warning",
      "description": "forall x: x.age >= 0 AND x.age <= 113",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_zwpaxyylb1",
    "type": "validation",
    "rule": {
      "id": "Rule 16",
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter\nrc, counter  := {0,0}\n\n  FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )\n   counter := counter + 1\n  END\n\n   IF counter /= members\n     THEN rc := 1\n    END\n\nRETURN rc",
      "severity": "error",
      "description": "The value for no_of_household_members must equal the number of records for each household",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_jhesaq3dvx",
    "type": "validation",
    "rule": {
      "id": "Rule 11",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), spouse-id, relation_to_head\n\nDSfilter := DS[filter relation_to_head = 4]\nDSmerge := merge(DS \"DSx\",DS \"DSy\",\n    on\n    (DSy#spouse-id = DSx#person-id and DSy#relation_to_head = 3 and DSx#relation_to_head = 4)\n    return\n    (DSx#person-id as \"person-id\"))\n\nDSnot_exists := DSfilter not_exists_in DSmerge\n\nDScount := DSnot_exists[calc 1 as \"id\" role \"identifier\"][keep (id, person_id)][aggregate count (person_id)] = 0\n",
      "severity": "information",
      "description": "forall x: \n  IF x.relation_to_head = 4 \n  THEN exists y:\n    x.spouse-id = y.person-id AND y.relation_to_head = 3",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": [],
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_am1rmpsxuu",
    "type": "validation",
    "rule": {
      "id": "Rule 13",
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier)\nDSgender= gender(identifier) {male, female}\nDSage =age-group(identifier) {child, adult, senior}\n/*\n * gender: male, female\n * age-groups: child, adult, senior\n */\nDSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,\n    on\n    (1 = 1)\n    return\n   (DSgender#gender as \"gender\",DSage #age-group as \"age-group\"))\nDSdiff := DSmerge setdiff DS[keep (gender, age-group)]\nDSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0\n",
      "severity": "warning",
      "description": "Every combination of sex and age group occurs at least once in the data set.",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-10-24T15:20:37.566Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": [],
      "description": "synthetic income data"
    },
    "value": "1"
  }
]
