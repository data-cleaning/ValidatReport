[
  {
    "id": "id_dw6htg8maq",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_11: sum(business_id == 100 & turnover > 1e+06) == 1 ",
      "severity": "information",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_iok8cif551",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1   DSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */ ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_ytr3htu502",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter rc, counter  := {0,0}    FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )    counter := counter + 1   END     IF counter /= members      THEN rc := 1     END  RETURN rc",
      "severity": "information",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_qkblvlpj3w",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head rc := {0} tmp_relation_to_head := EMPTY  IF relation_to_head ='4'  THEN        IF NOT spouse_id IN DATASET mat_Rule12 (person_id)     THEN rc := 1      ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )        IF tmp_relation_to_head /= '3'        THEN  rc := 1       END    END  END RETURN rc",
      "severity": "error",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_r51r1tvyea",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_03: counts :=  table(level)  # rule_03: counts[\"high\"] < 0.1 * sum(counts) ",
      "severity": "information",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_wj2xavwpfz",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_10: any(business_id == 100 & turnover > 1e+06) ",
      "severity": "warning",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_up6bjzubrg",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_city, counter rc, counter  := {0,0}    FOR EVERY tmp_city IN DATASET mat_Rule15 (postcode = postcode ; city )    IF city /= tmp_city      THEN rc := 1     END  END RETURN rc",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_hawgszog26",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter rc, counter  := {0,0}    FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )   counter := counter + 1       IF counter /= 1      THEN rc := 1     END  END RETURN rc",
      "severity": "warning",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_gitqmw92ha",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_04: (price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <=      0.5 * price_Ymin1 ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_0hx143ocqy",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_10: any(business_id == 100 & turnover > 1e+06) ",
      "severity": "warning",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_gmfpmlnxzu",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_city, counter rc, counter  := {0,0}    FOR EVERY tmp_city IN DATASET mat_Rule15 (postcode = postcode ; city )    IF city /= tmp_city      THEN rc := 1     END  END RETURN rc",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_irm54o947z",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier) DSgender= gender(identifier) {male, female} DSage =age-group(identifier) {child, adult, senior} /*  * gender: male, female  * age-groups: child, adult, senior  */ DSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,     on     (1 = 1)     return    (DSgender#gender as \"gender\",DSage #age-group as \"age-group\")) DSdiff := DSmerge setdiff DS[keep (gender, age-group)] DSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0 ",
      "severity": "information",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_f2w8ithvcv",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit rc,tmp_sum,hit  := {0,0,0}  tmp_AnzSst := FUNCTION LENGTH (level)  IF tmp_AnzSst IN SEQUENCE  (1,3)  THEN     FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )     IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND                            FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END     IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND                            FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END   END    \"Check\"   IF tmp_sum /= weight AND hit = 1    THEN rc := 1   END  END  RETURN rc",
      "severity": "error",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_csri344pti",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": " # def_ratio meani := mean(price_t)  + (price_tm1 - price_t)/length(price_t) ratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))  # rule_07 ratio >= 0.9 & ratio <= 1.1  ",
      "severity": "warning",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_3juns1me8i",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]  DScond:= DScalc[filter age between 0 and 113]  DSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]  ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_tp5lgjizto",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total rc,z1,total := {0,0,0}  FOR EVERY s1  IN DATASET mat_Rule03 (level1)     IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"    IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"  END  \"Check relative occurrence of value 'high'\"  IF z1 > total * 0.1 THEN rc := 1 END  RETURN rc",
      "severity": "error",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_9q1roiw9np",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_11: sum(business_id == 100 & turnover > 1e+06) == 1 ",
      "severity": "information",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_avqrc2rn9n",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_rel_4: rel_4 :=  person_id[relation_to_head == 4]  # def_rel_3: spouse_of_rel_3 :=  spouse_id[relation_to_head == 3]  # rule_12: all(rel_4 %in% spouse_of_rel_3) ",
      "severity": "information",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_kzaupqq7zx",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": " # def_ratio meani := mean(price_t)  + (price_tm1 - price_t)/length(price_t) ratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))  # rule_07 ratio >= 0.9 & ratio <= 1.1  ",
      "severity": "warning",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_ie28qqczld",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_age_gp: age_gp :=  age[match(grandchild_of, person_id)]  # rule_04: age_gp - 28 >= age ",
      "severity": "error",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_ctbpeuits",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_rel_4: rel_4 :=  person_id[relation_to_head == 4]  # def_rel_3: spouse_of_rel_3 :=  spouse_id[relation_to_head == 3]  # rule_12: all(rel_4 %in% spouse_of_rel_3) ",
      "severity": "information",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_bz4d7h2rup",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define parent: parents :=  sub(\"\\\\.[0-9]$\",\"\",level) is_parent := level %in% parents  # define child sums, by search for parent pattern. child_sums := sapply(level[is_parent], function(x){      sum(weight[grepl(paste0(\"^\",x,\".[0-9]$\"),level)])   }) # rule 16  all(weight[is_parent] == child_sums)  ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_5dtdqj2w58",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_11: sum(business_id == 100 & turnover > 1e+06) == 1 ",
      "severity": "information",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_u3nqe5o5vp",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": " # def_ratio meani := mean(price_t)  + (price_tm1 - price_t)/length(price_t) ratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))  # rule_07 ratio >= 0.9 & ratio <= 1.1  ",
      "severity": "warning",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_6vart8bkve",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of   DSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"   on (DSgp#person-id= DSgc# grandchild_of), return (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")   DSr:= (DSmerge#gp_age-28) >= DSmerge#age  DSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]  ",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_0ucgyffpn7",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)   DScount := DS[calc 1 as msr_count role \"MEASURE\"] DSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] = DScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)] ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_9d3v9jcgus",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1   DSout:=DS[filter season=\"out\"] DSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic     see page 42 VTL-part1 */ ",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_65khlq2tv3",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_01: hours_worked >= 1 & hours_worked <= 80 ",
      "severity": "warning",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_iwnfg6l8yr",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter rc, counter  := {0,0}    FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )    counter := counter + 1   END     IF counter /= members      THEN rc := 1     END  RETURN rc",
      "severity": "information",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_hqshhpwb31",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit rc,tmp_sum,hit  := {0,0,0}  tmp_AnzSst := FUNCTION LENGTH (level)  IF tmp_AnzSst IN SEQUENCE  (1,3)  THEN     FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )     IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND                            FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END     IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND                            FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END   END    \"Check\"   IF tmp_sum /= weight AND hit = 1    THEN rc := 1   END  END  RETURN rc",
      "severity": "error",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_z4jf8f6un7",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_03: counts :=  table(level)  # rule_03: counts[\"high\"] < 0.1 * sum(counts) ",
      "severity": "information",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_putfek8a1e",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter rc, counter  := {0,0}    FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )    counter := counter + 1   END     IF counter /= members      THEN rc := 1     END  RETURN rc",
      "severity": "information",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_3jp0r2p5dm",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked  DSr:= DS#hours_worked between 1 and 80 /* In case a value in hours_worked is NULL the value returned will be NULL */ . ",
      "severity": "information",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_xhciwzikf3",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of   DSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"   on (DSgp#person-id= DSgc# grandchild_of), return (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")   DSr:= (DSmerge#gp_age-28) >= DSmerge#age  DSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]  ",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_vcnokqa6j2",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1   DSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */ ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_9svdvixsn3",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_11: sum(business_id == 100 & turnover > 1e+06) == 1 ",
      "severity": "information",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_hiv9gt0ra7",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter rc, counter  := {0,0}    FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )   counter := counter + 1       IF counter /= 1      THEN rc := 1     END  END RETURN rc",
      "severity": "warning",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_nl280ar3fx",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members DSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)  DScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]=          DShousehold)[filter members= \"false\"] DSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0  ",
      "severity": "error",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_ppjm0vgznw",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_u2g9ud26ew",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members DSpersons=household-id(identifier), person-id(identifier)   DSmerge:=merge (DShousehold as \"DSh\", DSpersons as \"DSp\"          on DSh#household-id=DSp#household-id,          return          (DSh#household-id as household-id,DSh#person-id as person-id,DSp#members as members))    DSout:= DSmerge[filter person-id < 1 or person-id>members][keep (household-id,members)][aggregate count (members)] = 0  DSdist:= DSmerge[rename (person-id) as \"p_id\" role \"measure\"][aggregate count_distinct (p_id)][filter p id <> members] [aggregate count (members)] = 0   DSr := (DSout and DSdist)  ",
      "severity": "error",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_xc2pz4svp5",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of   DSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"   on (DSgp#person-id= DSgc# grandchild_of), return (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")   DSr:= (DSmerge#gp_age-28) >= DSmerge#age  DSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]  ",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_6xrnno1ndp",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total rc,z1,total := {0,0,0}  FOR EVERY s1  IN DATASET mat_Rule03 (level1)     IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"    IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"  END  \"Check relative occurrence of value 'high'\"  IF z1 > total * 0.1 THEN rc := 1 END  RETURN rc",
      "severity": "error",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_tyekeadama",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1   DSout:=DS[filter season=\"out\"] DSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic     see page 42 VTL-part1 */ ",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_pr4lqaim3a",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "turnover /= cost + profit",
      "severity": "information",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_l11zyj5vkt",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_06: if (season == \"out\") price_t == price_tmin1 & quantity_t ==      quantity_tmin1 ",
      "severity": "warning",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_9jrd7a9bik",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members DSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)  DScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]=          DShousehold)[filter members= \"false\"] DSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0  ",
      "severity": "error",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_7imojhocy0",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": " # def_ratio meani := mean(price_t)  + (price_tm1 - price_t)/length(price_t) ratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))  # rule_07 ratio >= 0.9 & ratio <= 1.1  ",
      "severity": "warning",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_a7rk3w07rn",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1   DSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */ ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_vpm52gxd1u",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier) /*  * gender: male, female  * age-groups: child, adult, senior  */ DScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"] DScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1] DSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0 ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_wkclrty477",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_09: all(age >= 0 & age <= 113) ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_sc6645j29u",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover  rc := 1 tmp_turnover := EMPTY  FOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )     IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000    THEN rc := 0   END  END  RETURN rc",
      "severity": "error",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_ka86ko8qfp",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_15: postcode ~ city ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_fa97se7awr",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_15: postcode ~ city ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_mp2y6arnx4",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "turnover /= cost + profit",
      "severity": "information",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_mg895s8m01",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total rc,z1,total := {0,0,0}  FOR EVERY s1  IN DATASET mat_Rule03 (level1)     IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"    IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"  END  \"Check relative occurrence of value 'high'\"  IF z1 > total * 0.1 THEN rc := 1 END  RETURN rc",
      "severity": "error",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_7pzcggsz9m",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)   DScount := DS[calc 1 as msr_count role \"MEASURE\"] DSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] = DScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)] ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_a6v7agy2oc",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY) OR FUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5 OR FUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_51s2xl37y0",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_city, counter rc, counter  := {0,0}    FOR EVERY tmp_city IN DATASET mat_Rule15 (postcode = postcode ; city )    IF city /= tmp_city      THEN rc := 1     END  END RETURN rc",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_4cwd7143nu",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members DSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)  DScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]=          DShousehold)[filter members= \"false\"] DSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0  ",
      "severity": "error",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_cjsqwjtvjo",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define parent: parents :=  sub(\"\\\\.[0-9]$\",\"\",level) is_parent := level %in% parents  # define child sums, by search for parent pattern. child_sums := sapply(level[is_parent], function(x){      sum(weight[grepl(paste0(\"^\",x,\".[0-9]$\"),level)])   }) # rule 16  all(weight[is_parent] == child_sums)  ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_i090w62hv0",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0 ",
      "severity": "information",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_2c5lprz5ja",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= business-id, cost, profit, turnover   DSr:= (DS#cost + DS#profit) = DS#turnover ",
      "severity": "error",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_i7jds8wotd",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define parent: parents :=  sub(\"\\\\.[0-9]$\",\"\",level) is_parent := level %in% parents  # define child sums, by search for parent pattern. child_sums := sapply(level[is_parent], function(x){      sum(weight[grepl(paste0(\"^\",x,\".[0-9]$\"),level)])   }) # rule 16  all(weight[is_parent] == child_sums)  ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_clo83d2njj",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier) DSgender= gender(identifier) {male, female} DSage =age-group(identifier) {child, adult, senior} /*  * gender: male, female  * age-groups: child, adult, senior  */ DSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,     on     (1 = 1)     return    (DSgender#gender as \"gender\",DSage #age-group as \"age-group\")) DSdiff := DSmerge setdiff DS[keep (gender, age-group)] DSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0 ",
      "severity": "information",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_ocxizm421d",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_xseg7bf2sr",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head rc := {0} tmp_relation_to_head := EMPTY  IF relation_to_head ='4'  THEN        IF NOT spouse_id IN DATASET mat_Rule12 (person_id)     THEN rc := 1      ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )        IF tmp_relation_to_head /= '3'        THEN  rc := 1       END    END  END RETURN rc",
      "severity": "error",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_hnn40kfeky",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier) DSgender= gender(identifier) {male, female} DSage =age-group(identifier) {child, adult, senior} /*  * gender: male, female  * age-groups: child, adult, senior  */ DSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,     on     (1 = 1)     return    (DSgender#gender as \"gender\",DSage #age-group as \"age-group\")) DSdiff := DSmerge setdiff DS[keep (gender, age-group)] DSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0 ",
      "severity": "information",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_otxorrdaen",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head rc := {0} tmp_relation_to_head := EMPTY  IF relation_to_head ='4'  THEN        IF NOT spouse_id IN DATASET mat_Rule12 (person_id)     THEN rc := 1      ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )        IF tmp_relation_to_head /= '3'        THEN  rc := 1       END    END  END RETURN rc",
      "severity": "error",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_clql1xsb5j",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY) OR FUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5 OR FUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_3mdbes0p59",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1 ",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_qgt8bx8t93",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_02: cost + profit == turnover ",
      "severity": "error",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_pah0afgfyh",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count rc,tmp_undecided, tmp_count := {1,0,0} tmp_turnover := EMPTY    FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )     IF tmp_turnover  = EMPTY      THEN tmp_undecided := 1           ELSE       IF tmp_turnover > 1000000        THEN tmp_count :=  tmp_count + 1         END    END  END   IF tmp_undecided = 1 OR  tmp_count = 1   THEN rc := 0  END    RETURN rc",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_hxrcd5iyst",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define parent: parents :=  sub(\"\\\\.[0-9]$\",\"\",level) is_parent := level %in% parents  # define child sums, by search for parent pattern. child_sums := sapply(level[is_parent], function(x){      sum(weight[grepl(paste0(\"^\",x,\".[0-9]$\"),level)])   }) # rule 16  all(weight[is_parent] == child_sums)  ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_y1498dhyif",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_15: postcode ~ city ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_mrg605cxna",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_rel_4: rel_4 :=  person_id[relation_to_head == 4]  # def_rel_3: spouse_of_rel_3 :=  spouse_id[relation_to_head == 3]  # rule_12: all(rel_4 %in% spouse_of_rel_3) ",
      "severity": "information",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_1mgke1f8dz",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count rc,tmp_undecided, tmp_count := {1,0,0} tmp_turnover := EMPTY    FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )     IF tmp_turnover  = EMPTY      THEN tmp_undecided := 1           ELSE       IF tmp_turnover > 1000000        THEN tmp_count :=  tmp_count + 1         END    END  END   IF tmp_undecided = 1 OR  tmp_count = 1   THEN rc := 0  END    RETURN rc",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_0gff1ej5zw",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover  rc := 1 tmp_turnover := EMPTY  FOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )     IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000    THEN rc := 0   END  END  RETURN rc",
      "severity": "error",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_xwvc6al2il",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth DS_p= person-id(identifier),person, year_of_birth, gender   DSr:= DS_h#year_of_birth=DS_p#year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_snyi8lbson",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total rc,z1,total := {0,0,0}  FOR EVERY s1  IN DATASET mat_Rule03 (level1)     IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"    IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"  END  \"Check relative occurrence of value 'high'\"  IF z1 > total * 0.1 THEN rc := 1 END  RETURN rc",
      "severity": "error",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_az0dfmz821",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_09: all(age >= 0 & age <= 113) ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_64hb1cognu",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "turnover /= cost + profit",
      "severity": "information",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_7jxvqixifn",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)   DScount := DS[calc 1 as msr_count role \"MEASURE\"] DSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] = DScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)] ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_zvo4nptkwb",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_06: if (season == \"out\") price_t == price_tmin1 & quantity_t ==      quantity_tmin1 ",
      "severity": "warning",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_w9k7n0urgi",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define vector with T/F value for each household test := sapply(1:length(household_id), function(i){   hhid <- household_id[i]   all(1:members[i] %in% persons$person_id[persons$household_id == hhid]) })  # rule must hold for all households all(test)  ",
      "severity": "error",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_sn4yv332pg",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_counts: counts :=  table(gender, age_group)  # rule_13: all(counts <= 1) ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_x9k06sqfsh",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members DSpersons=household-id(identifier), person-id(identifier)   DSmerge:=merge (DShousehold as \"DSh\", DSpersons as \"DSp\"          on DSh#household-id=DSp#household-id,          return          (DSh#household-id as household-id,DSh#person-id as person-id,DSp#members as members))    DSout:= DSmerge[filter person-id < 1 or person-id>members][keep (household-id,members)][aggregate count (members)] = 0  DSdist:= DSmerge[rename (person-id) as \"p_id\" role \"measure\"][aggregate count_distinct (p_id)][filter p id <> members] [aggregate count (members)] = 0   DSr := (DSout and DSdist)  ",
      "severity": "error",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_tdxaj64bqe",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1   DSout:=DS[filter season=\"out\"] DSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic     see page 42 VTL-part1 */ ",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_lzochyrn12",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1 ",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_66mydxjrhb",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=level    DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"] DSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1)  ",
      "severity": "warning",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_gd3u7r4cnv",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count rc,tmp_undecided, tmp_count := {1,0,0} tmp_turnover := EMPTY    FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )     IF tmp_turnover  = EMPTY      THEN tmp_undecided := 1           ELSE       IF tmp_turnover > 1000000        THEN tmp_count :=  tmp_count + 1         END    END  END   IF tmp_undecided = 1 OR  tmp_count = 1   THEN rc := 0  END    RETURN rc",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_5efhdnn3ci",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,     male_child, female_child, male_adult, female_adult, male_senior, female_senior rc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}    FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)    IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END    IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END    IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END    END     IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0       THEN rc := 1     END   RETURN rc",
      "severity": "error",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_2f67sek4xp",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members DSpersons=household-id(identifier), person-id(identifier)   DSmerge:=merge (DShousehold as \"DSh\", DSpersons as \"DSp\"          on DSh#household-id=DSp#household-id,          return          (DSh#household-id as household-id,DSh#person-id as person-id,DSp#members as members))    DSout:= DSmerge[filter person-id < 1 or person-id>members][keep (household-id,members)][aggregate count (members)] = 0  DSdist:= DSmerge[rename (person-id) as \"p_id\" role \"measure\"][aggregate count_distinct (p_id)][filter p id <> members] [aggregate count (members)] = 0   DSr := (DSout and DSdist)  ",
      "severity": "error",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_zm3nuu8emn",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_10: any(business_id == 100 & turnover > 1e+06) ",
      "severity": "warning",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_hkibnhpvqq",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_11: sum(business_id == 100 & turnover > 1e+06) == 1 ",
      "severity": "information",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_jbqico0gln",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members DSpersons=household-id(identifier), person-id(identifier)   DSmerge:=merge (DShousehold as \"DSh\", DSpersons as \"DSp\"          on DSh#household-id=DSp#household-id,          return          (DSh#household-id as household-id,DSh#person-id as person-id,DSp#members as members))    DSout:= DSmerge[filter person-id < 1 or person-id>members][keep (household-id,members)][aggregate count (members)] = 0  DSdist:= DSmerge[rename (person-id) as \"p_id\" role \"measure\"][aggregate count_distinct (p_id)][filter p id <> members] [aggregate count (members)] = 0   DSr := (DSout and DSdist)  ",
      "severity": "error",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_y79mnusb6o",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=level    DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"] DSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1)  ",
      "severity": "warning",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_3w9b1u83zx",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_bnbh1pfu1k",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)] DSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)] DSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)] DScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)] DSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1 ",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_hzl8cwn2zs",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover  rc := 1 tmp_turnover := EMPTY  FOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )     IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000    THEN rc := 0   END  END  RETURN rc",
      "severity": "error",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_ktubovifa4",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_bok69lqu96",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= business-id, cost, profit, turnover   DSr:= (DS#cost + DS#profit) = DS#turnover ",
      "severity": "error",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_0yj2zaho0j",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_02: cost + profit == turnover ",
      "severity": "error",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_9dbfmhicro",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_04: (price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <=      0.5 * price_Ymin1 ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_rj2nwiyw8p",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]  DScond:= DScalc[filter age between 0 and 113]  DSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]  ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_0mxt71imhd",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter rc, counter  := {0,0}    FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )    counter := counter + 1   END     IF counter /= members      THEN rc := 1     END  RETURN rc",
      "severity": "information",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_lgazhc98ms",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)] DSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)] DSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)] DScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)] DSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1 ",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_5c1n6b5zu6",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_87d082la6p",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_10: any(business_id == 100 & turnover > 1e+06) ",
      "severity": "warning",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_clr05skvrd",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter rc, counter  := {0,0}    FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )    counter := counter + 1   END     IF counter /= members      THEN rc := 1     END  RETURN rc",
      "severity": "information",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_y884ci3q55",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_01: hours_worked >= 1 & hours_worked <= 80 ",
      "severity": "warning",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_exb7o36ral",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight  /*  * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)  *  *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN  *  x1                      1\t      +  *  x1.1          x1\t      2\t      +  *  x1.2          x1\t      2\t      +  *  x1.3          x1\t      2\t      +  *  x2                      1       +  *  x2.1          x2\t      2\t      +  */  DShierarchy := hierarchy(DS, level, \"HRC\", false) DScond := (DShierarchy = DS)[filter weight = \"false\"] DSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0 ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_ol3kmjz1h6",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked  DSr:= DS#hours_worked between 1 and 80 /* In case a value in hours_worked is NULL the value returned will be NULL */ . ",
      "severity": "information",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_9wqysr4maz",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight  /*  * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)  *  *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN  *  x1                      1\t      +  *  x1.1          x1\t      2\t      +  *  x1.2          x1\t      2\t      +  *  x1.3          x1\t      2\t      +  *  x2                      1       +  *  x2.1          x2\t      2\t      +  */  DShierarchy := hierarchy(DS, level, \"HRC\", false) DScond := (DShierarchy = DS)[filter weight = \"false\"] DSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0 ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_s1zi73xhgf",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1   DSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */ ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_1kno2e5eay",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=level    DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"] DSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1)  ",
      "severity": "warning",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_4inv7z138q",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier) DSgender= gender(identifier) {male, female} DSage =age-group(identifier) {child, adult, senior} /*  * gender: male, female  * age-groups: child, adult, senior  */ DSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,     on     (1 = 1)     return    (DSgender#gender as \"gender\",DSage #age-group as \"age-group\")) DSdiff := DSmerge setdiff DS[keep (gender, age-group)] DSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0 ",
      "severity": "information",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_7m3pyabq42",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_age_gp: age_gp :=  age[match(grandchild_of, person_id)]  # rule_04: age_gp - 28 >= age ",
      "severity": "error",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_tqo1b5kyl1",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define vector with T/F value for each household test := sapply(1:length(household_id), function(i){   hhid <- household_id[i]   all(1:members[i] %in% persons$person_id[persons$household_id == hhid]) })  # rule must hold for all households all(test)  ",
      "severity": "error",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_1x0tbkyi9o",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_10: any(business_id == 100 & turnover > 1e+06) ",
      "severity": "warning",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_esw529t69t",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_city, counter rc, counter  := {0,0}    FOR EVERY tmp_city IN DATASET mat_Rule15 (postcode = postcode ; city )    IF city /= tmp_city      THEN rc := 1     END  END RETURN rc",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_pn4f09pbh3",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1 rc := 0  LOOP FOR x1 := 1 UNTIL x1 > members      IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )       THEN rc := 1      END    END  RETURN rc",
      "severity": "information",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_e6fehbuelk",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_count: person_count :=  table(person$household_id)  # rule17: members == person_count[household_id] ",
      "severity": "warning",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_tfh7zqbd4c",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_x3sg33dctx",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define vector with T/F value for each household test := sapply(1:length(household_id), function(i){   hhid <- household_id[i]   all(1:members[i] %in% persons$person_id[persons$household_id == hhid]) })  # rule must hold for all households all(test)  ",
      "severity": "error",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_j3aygk2hgz",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_08: year_of_birth == persons$year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_zfh8jzptzu",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1   DSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */ ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_hglk4kpguq",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY) OR FUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5 OR FUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_n05i07wbns",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_counts: counts :=  table(gender, age_group)  # rule_13: all(counts <= 1) ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_0qt4j1y49f",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)] DSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)] DSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)] DScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)] DSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1 ",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_f1gq3ideii",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define parent: parents :=  sub(\"\\\\.[0-9]$\",\"\",level) is_parent := level %in% parents  # define child sums, by search for parent pattern. child_sums := sapply(level[is_parent], function(x){      sum(weight[grepl(paste0(\"^\",x,\".[0-9]$\"),level)])   }) # rule 16  all(weight[is_parent] == child_sums)  ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_0t0ftxnam6",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_count: person_count :=  table(person$household_id)  # rule17: members == person_count[household_id] ",
      "severity": "warning",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_ta8t5ixopo",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]  DScond:= DScalc[filter age between 0 and 113]  DSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]  ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_tia6emvx5r",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,     male_child, female_child, male_adult, female_adult, male_senior, female_senior rc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}    FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)    IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END    IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END    IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END    END     IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0       THEN rc := 1     END   RETURN rc",
      "severity": "error",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_v22qzcq4pa",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc rc := 0  \"Haushalt = household\"  IF NOT  SEQUENCE (person_id , person , year_of_birth)   IN DATASET Haushalt (person_id , person , year_of_birth)  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_a5ja6ddlqy",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight  /*  * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)  *  *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN  *  x1                      1\t      +  *  x1.1          x1\t      2\t      +  *  x1.2          x1\t      2\t      +  *  x1.3          x1\t      2\t      +  *  x2                      1       +  *  x2.1          x2\t      2\t      +  */  DShierarchy := hierarchy(DS, level, \"HRC\", false) DScond := (DShierarchy = DS)[filter weight = \"false\"] DSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0 ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_0ebcx37n03",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1 rc := 0  LOOP FOR x1 := 1 UNTIL x1 > members      IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )       THEN rc := 1      END    END  RETURN rc",
      "severity": "information",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_l63zaqrwle",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_08: year_of_birth == persons$year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_cs73g8ndar",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_11: sum(business_id == 100 & turnover > 1e+06) == 1 ",
      "severity": "information",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_fsiof1p07o",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define parent: parents :=  sub(\"\\\\.[0-9]$\",\"\",level) is_parent := level %in% parents  # define child sums, by search for parent pattern. child_sums := sapply(level[is_parent], function(x){      sum(weight[grepl(paste0(\"^\",x,\".[0-9]$\"),level)])   }) # rule 16  all(weight[is_parent] == child_sums)  ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_l8jrck1uy8",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1 ",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_yysajb2fg5",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_counts: counts :=  table(gender, age_group)  # rule_13: all(counts <= 1) ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_zi24ihrz2r",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter rc, counter  := {0,0}    FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )   counter := counter + 1       IF counter /= 1      THEN rc := 1     END  END RETURN rc",
      "severity": "warning",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_s6f4h0xrpz",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_03: counts :=  table(level)  # rule_03: counts[\"high\"] < 0.1 * sum(counts) ",
      "severity": "information",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_1wnnc4kc92",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age tmp_age := EMPTY    tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)  IF tmp_age - 28 < age  THEN rc := 1 END   RETURN rc",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_y76p9mosbg",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight  /*  * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)  *  *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN  *  x1                      1\t      +  *  x1.1          x1\t      2\t      +  *  x1.2          x1\t      2\t      +  *  x1.3          x1\t      2\t      +  *  x2                      1       +  *  x2.1          x2\t      2\t      +  */  DShierarchy := hierarchy(DS, level, \"HRC\", false) DScond := (DShierarchy = DS)[filter weight = \"false\"] DSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0 ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_1ofibdk4qi",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1   DSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */ ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_kpddjb1exp",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_count: person_count :=  table(person$household_id)  # rule17: members == person_count[household_id] ",
      "severity": "warning",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_u7k3lvzomr",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_counts: counts :=  table(gender, age_group)  # rule_13: all(counts <= 1) ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_hfz4gon2wl",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit rc,tmp_sum,hit  := {0,0,0}  tmp_AnzSst := FUNCTION LENGTH (level)  IF tmp_AnzSst IN SEQUENCE  (1,3)  THEN     FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )     IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND                            FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END     IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND                            FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END   END    \"Check\"   IF tmp_sum /= weight AND hit = 1    THEN rc := 1   END  END  RETURN rc",
      "severity": "error",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_hjzanfldal",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "turnover /= cost + profit",
      "severity": "information",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_sh4fagnf8",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count rc,tmp_undecided, tmp_count := {1,0,0} tmp_turnover := EMPTY    FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )     IF tmp_turnover  = EMPTY      THEN tmp_undecided := 1           ELSE       IF tmp_turnover > 1000000        THEN tmp_count :=  tmp_count + 1         END    END  END   IF tmp_undecided = 1 OR  tmp_count = 1   THEN rc := 0  END    RETURN rc",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_p8mqpg21ez",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter rc, counter  := {0,0}    FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )    counter := counter + 1   END     IF counter /= members      THEN rc := 1     END  RETURN rc",
      "severity": "information",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_xig9tomen7",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_04: (price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <=      0.5 * price_Ymin1 ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_nw62mtwlwn",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc rc := 0  \"Haushalt = household\"  IF NOT  SEQUENCE (person_id , person , year_of_birth)   IN DATASET Haushalt (person_id , person , year_of_birth)  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_ta73xikjhn",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_03: counts :=  table(level)  # rule_03: counts[\"high\"] < 0.1 * sum(counts) ",
      "severity": "information",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_si0cust7jv",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid rc,tmp_decided, tmp_invalid := {0,0,0} tmp_age := EMPTY FOR EVERY tmp_age IN DATASET mat_Rule09 (age)     IF tmp_age  = EMPTY      THEN tmp_decided := 1           ELSE       IF NOT tmp_age  IN SEQUENCE (0++113)        THEN tmp_invalid := 1         END    END END  IF tmp_decided = 0 AND  tmp_invalid = 1  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_v1tuliwdvt",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier) /*  * gender: male, female  * age-groups: child, adult, senior  */ DScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"] DScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1] DSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0 ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_s1uabaieff",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover  rc := 1 tmp_turnover := EMPTY  FOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )     IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000    THEN rc := 0   END  END  RETURN rc",
      "severity": "error",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_1gu6z9pu03",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members DSpersons=household-id(identifier), person-id(identifier)   DSmerge:=merge (DShousehold as \"DSh\", DSpersons as \"DSp\"          on DSh#household-id=DSp#household-id,          return          (DSh#household-id as household-id,DSh#person-id as person-id,DSp#members as members))    DSout:= DSmerge[filter person-id < 1 or person-id>members][keep (household-id,members)][aggregate count (members)] = 0  DSdist:= DSmerge[rename (person-id) as \"p_id\" role \"measure\"][aggregate count_distinct (p_id)][filter p id <> members] [aggregate count (members)] = 0   DSr := (DSout and DSdist)  ",
      "severity": "error",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_6ko9kdv95o",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_69406q8zs7",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "turnover /= cost + profit",
      "severity": "information",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_o1pngos3xt",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1   DSout:=DS[filter season=\"out\"] DSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic     see page 42 VTL-part1 */ ",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_ot9eqrhaiz",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)   DScount := DS[calc 1 as msr_count role \"MEASURE\"] DSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] = DScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)] ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_agjqb6vhpt",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= business-id, cost, profit, turnover   DSr:= (DS#cost + DS#profit) = DS#turnover ",
      "severity": "error",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_emkwptrdrv",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)   DScount := DS[calc 1 as msr_count role \"MEASURE\"] DSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] = DScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)] ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_wy2o782jtt",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total rc,z1,total := {0,0,0}  FOR EVERY s1  IN DATASET mat_Rule03 (level1)     IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"    IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"  END  \"Check relative occurrence of value 'high'\"  IF z1 > total * 0.1 THEN rc := 1 END  RETURN rc",
      "severity": "error",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_vbt7ih3k8p",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "turnover /= cost + profit",
      "severity": "information",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_66z3iypaod",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total rc,z1,total := {0,0,0}  FOR EVERY s1  IN DATASET mat_Rule03 (level1)     IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"    IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"  END  \"Check relative occurrence of value 'high'\"  IF z1 > total * 0.1 THEN rc := 1 END  RETURN rc",
      "severity": "error",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_9poi9jflt9",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter rc, counter  := {0,0}    FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )    counter := counter + 1   END     IF counter /= members      THEN rc := 1     END  RETURN rc",
      "severity": "information",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_ddv71gf488",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=level    DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"] DSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1)  ",
      "severity": "warning",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_f6vbhlx4uw",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1 ",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_3guf4nm38e",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_age_gp: age_gp :=  age[match(grandchild_of, person_id)]  # rule_04: age_gp - 28 >= age ",
      "severity": "error",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_fgp47cjdec",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_15: postcode ~ city ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_a19lkno1ew",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= business-id, cost, profit, turnover   DSr:= (DS#cost + DS#profit) = DS#turnover ",
      "severity": "error",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_scgbspzl1s",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule 14 all(table(gender, age_group) >= 1) &    all(c(\"male\", \"female\") %in% gender) &   all(c(\"child\",\"adult\",\"senior\") %in% age_group) ",
      "severity": "error",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_tfpys37d46",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_28hl0m0uxg",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_rel_4: rel_4 :=  person_id[relation_to_head == 4]  # def_rel_3: spouse_of_rel_3 :=  spouse_id[relation_to_head == 3]  # rule_12: all(rel_4 %in% spouse_of_rel_3) ",
      "severity": "information",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_0d2nnf48va",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter rc, counter  := {0,0}    FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )   counter := counter + 1       IF counter /= 1      THEN rc := 1     END  END RETURN rc",
      "severity": "warning",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_eh0oc3rzy7",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1   DSout:=DS[filter season=\"out\"] DSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic     see page 42 VTL-part1 */ ",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_obtoswkswj",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= business-id, cost, profit, turnover   DSr:= (DS#cost + DS#profit) = DS#turnover ",
      "severity": "error",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_q0n4gq1irn",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)] DSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)] DSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)] DScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)] DSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1 ",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_q3krtfeprx",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,     male_child, female_child, male_adult, female_adult, male_senior, female_senior rc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}    FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)    IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END    IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END    IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END    END     IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0       THEN rc := 1     END   RETURN rc",
      "severity": "error",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_n8usloygg9",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc rc := 0  \"Haushalt = household\"  IF NOT  SEQUENCE (person_id , person , year_of_birth)   IN DATASET Haushalt (person_id , person , year_of_birth)  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_jgf161zio5",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_08: year_of_birth == persons$year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_qd4ho83d1v",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define vector with T/F value for each household test := sapply(1:length(household_id), function(i){   hhid <- household_id[i]   all(1:members[i] %in% persons$person_id[persons$household_id == hhid]) })  # rule must hold for all households all(test)  ",
      "severity": "error",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_kt5w246v9a",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age tmp_age := EMPTY    tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)  IF tmp_age - 28 < age  THEN rc := 1 END   RETURN rc",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_ws0lck3usq",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_age_gp: age_gp :=  age[match(grandchild_of, person_id)]  # rule_04: age_gp - 28 >= age ",
      "severity": "error",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_72o207nrkj",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight  /*  * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)  *  *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN  *  x1                      1\t      +  *  x1.1          x1\t      2\t      +  *  x1.2          x1\t      2\t      +  *  x1.3          x1\t      2\t      +  *  x2                      1       +  *  x2.1          x2\t      2\t      +  */  DShierarchy := hierarchy(DS, level, \"HRC\", false) DScond := (DShierarchy = DS)[filter weight = \"false\"] DSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0 ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_xigpw7nq2w",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": " # def_ratio meani := mean(price_t)  + (price_tm1 - price_t)/length(price_t) ratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))  # rule_07 ratio >= 0.9 & ratio <= 1.1  ",
      "severity": "warning",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_nde5qk0mx1",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= business-id, cost, profit, turnover   DSr:= (DS#cost + DS#profit) = DS#turnover ",
      "severity": "error",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_f2xe1lnq57",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_rel_4: rel_4 :=  person_id[relation_to_head == 4]  # def_rel_3: spouse_of_rel_3 :=  spouse_id[relation_to_head == 3]  # rule_12: all(rel_4 %in% spouse_of_rel_3) ",
      "severity": "information",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_lxsz1gdcj6",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_03: counts :=  table(level)  # rule_03: counts[\"high\"] < 0.1 * sum(counts) ",
      "severity": "information",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_8nazq34f24",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_counts: counts :=  table(gender, age_group)  # rule_13: all(counts <= 1) ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_nblgud81qj",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_pioy60hxpj",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_11: sum(business_id == 100 & turnover > 1e+06) == 1 ",
      "severity": "information",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_fc1u6a1ann",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]  DScond:= DScalc[filter age between 0 and 113]  DSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]  ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_re2tez07qj",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age tmp_age := EMPTY    tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)  IF tmp_age - 28 < age  THEN rc := 1 END   RETURN rc",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_sdyjvq9i59",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth DS_p= person-id(identifier),person, year_of_birth, gender   DSr:= DS_h#year_of_birth=DS_p#year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_baxqqflf4o",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1 ",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_mkt37ua6q1",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_06: if (season == \"out\") price_t == price_tmin1 & quantity_t ==      quantity_tmin1 ",
      "severity": "warning",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_bt4ts9dh5g",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)   DScount := DS[calc 1 as msr_count role \"MEASURE\"] DSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] = DScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)] ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_bec9x09t7d",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth DS_p= person-id(identifier),person, year_of_birth, gender   DSr:= DS_h#year_of_birth=DS_p#year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_oaci9p18v1",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), spouse-id, relation_to_head  DSfilter := DS[filter relation_to_head = 4] DSmerge := merge(DS \"DSx\",DS \"DSy\",     on     (DSy#spouse-id = DSx#person-id and DSy#relation_to_head = 3 and DSx#relation_to_head = 4)     return     (DSx#person-id as \"person-id\"))  DSnot_exists := DSfilter not_exists_in DSmerge  DScount := DSnot_exists[calc 1 as \"id\" role \"identifier\"][keep (id, person_id)][aggregate count (person_id)] = 0 ",
      "severity": "warning",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_upsmbs1w78",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_03: counts :=  table(level)  # rule_03: counts[\"high\"] < 0.1 * sum(counts) ",
      "severity": "information",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_3ylkh8yegq",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0 ",
      "severity": "information",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_55i680ahh1",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter rc, counter  := {0,0}    FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )   counter := counter + 1       IF counter /= 1      THEN rc := 1     END  END RETURN rc",
      "severity": "warning",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_4h04u9risr",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": " # def_ratio meani := mean(price_t)  + (price_tm1 - price_t)/length(price_t) ratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))  # rule_07 ratio >= 0.9 & ratio <= 1.1  ",
      "severity": "warning",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_vv6h7h2gbz",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth DS_p= person-id(identifier),person, year_of_birth, gender   DSr:= DS_h#year_of_birth=DS_p#year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_xuzvn89ygi",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_age_gp: age_gp :=  age[match(grandchild_of, person_id)]  # rule_04: age_gp - 28 >= age ",
      "severity": "error",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_95l1cihf6a",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_rel_4: rel_4 :=  person_id[relation_to_head == 4]  # def_rel_3: spouse_of_rel_3 :=  spouse_id[relation_to_head == 3]  # rule_12: all(rel_4 %in% spouse_of_rel_3) ",
      "severity": "information",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_vzqrvz1pjc",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_02: cost + profit == turnover ",
      "severity": "error",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_w03ekbglod",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_09: all(age >= 0 & age <= 113) ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_b8ucfz9nga",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members DSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)  DScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]=          DShousehold)[filter members= \"false\"] DSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0  ",
      "severity": "error",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_8l2ahivrzq",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight  /*  * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)  *  *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN  *  x1                      1\t      +  *  x1.1          x1\t      2\t      +  *  x1.2          x1\t      2\t      +  *  x1.3          x1\t      2\t      +  *  x2                      1       +  *  x2.1          x2\t      2\t      +  */  DShierarchy := hierarchy(DS, level, \"HRC\", false) DScond := (DShierarchy = DS)[filter weight = \"false\"] DSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0 ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_iaxc79vjkx",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_04: (price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <=      0.5 * price_Ymin1 ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_kdawowoz6g",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": " # def_ratio meani := mean(price_t)  + (price_tm1 - price_t)/length(price_t) ratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))  # rule_07 ratio >= 0.9 & ratio <= 1.1  ",
      "severity": "warning",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_uo6nb0xbtn",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1 ",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_tbx48d2zpu",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)   DScount := DS[calc 1 as msr_count role \"MEASURE\"] DSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] = DScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)] ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_y6qngsw2pm",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_08: year_of_birth == persons$year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_ylv2elloil",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1   DSout:=DS[filter season=\"out\"] DSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic     see page 42 VTL-part1 */ ",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_coj6gcuc38",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_10: any(business_id == 100 & turnover > 1e+06) ",
      "severity": "warning",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_lgxr92rh2z",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1   DSout:=DS[filter season=\"out\"] DSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic     see page 42 VTL-part1 */ ",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_vpd63085rj",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_5ddomg9q07",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked  DSr:= DS#hours_worked between 1 and 80 /* In case a value in hours_worked is NULL the value returned will be NULL */ . ",
      "severity": "information",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_sms7jiiip9",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members DSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)  DScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]=          DShousehold)[filter members= \"false\"] DSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0  ",
      "severity": "error",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_sh0s1dbcfc",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total rc,z1,total := {0,0,0}  FOR EVERY s1  IN DATASET mat_Rule03 (level1)     IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"    IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"  END  \"Check relative occurrence of value 'high'\"  IF z1 > total * 0.1 THEN rc := 1 END  RETURN rc",
      "severity": "error",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_0s1382yv2u",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1   DSout:=DS[filter season=\"out\"] DSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic     see page 42 VTL-part1 */ ",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_cy50y4p7w3",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_01: hours_worked >= 1 & hours_worked <= 80 ",
      "severity": "warning",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_j7ymrncnr6",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1 rc := 0  LOOP FOR x1 := 1 UNTIL x1 > members      IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )       THEN rc := 1      END    END  RETURN rc",
      "severity": "information",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_wxnd1oo0p1",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked  DSr:= DS#hours_worked between 1 and 80 /* In case a value in hours_worked is NULL the value returned will be NULL */ . ",
      "severity": "information",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_euct5why57",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}  \"Count totals SP2 and SP3 across all records\"   FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)           counter := counter + 1           s_t   := s_t + t           s_tm1 := s_tm1 + tm1    END  \"Evaluate result\"  IF counter > 0    THEN      \"Compute previous average\"     d_t       := s_t   / counter     d_tm1     := s_tm1 / counter \t     \"Compute new average\"     d_t_neu := (s_t - price_t + price_tm1) / counter      \"Compute relative size of new average\"      DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)    \"Check\"   IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)    THEN rc := 1   END  END    RETURN rc",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_75b7m7az61",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth DS_p= person-id(identifier),person, year_of_birth, gender   DSr:= DS_h#year_of_birth=DS_p#year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_7crkyadcwk",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_count: person_count :=  table(person$household_id)  # rule17: members == person_count[household_id] ",
      "severity": "warning",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_xtbwe5ewrb",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define parent: parents :=  sub(\"\\\\.[0-9]$\",\"\",level) is_parent := level %in% parents  # define child sums, by search for parent pattern. child_sums := sapply(level[is_parent], function(x){      sum(weight[grepl(paste0(\"^\",x,\".[0-9]$\"),level)])   }) # rule 16  all(weight[is_parent] == child_sums)  ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_3lf16v5nc3",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head rc := {0} tmp_relation_to_head := EMPTY  IF relation_to_head ='4'  THEN        IF NOT spouse_id IN DATASET mat_Rule12 (person_id)     THEN rc := 1      ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )        IF tmp_relation_to_head /= '3'        THEN  rc := 1       END    END  END RETURN rc",
      "severity": "error",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_u96c5wx6s8",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter rc, counter  := {0,0}    FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )   counter := counter + 1       IF counter /= 1      THEN rc := 1     END  END RETURN rc",
      "severity": "warning",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_nriw4bcp6w",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]  DScond:= DScalc[filter age between 0 and 113]  DSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]  ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_yoav71sy5d",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=level    DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"] DSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1)  ",
      "severity": "warning",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_ccd7cjlmzs",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_08: year_of_birth == persons$year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_hp0o5jbvzb",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=level    DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"] DSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1)  ",
      "severity": "warning",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_azjso1abdz",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid rc,tmp_decided, tmp_invalid := {0,0,0} tmp_age := EMPTY FOR EVERY tmp_age IN DATASET mat_Rule09 (age)     IF tmp_age  = EMPTY      THEN tmp_decided := 1           ELSE       IF NOT tmp_age  IN SEQUENCE (0++113)        THEN tmp_invalid := 1         END    END END  IF tmp_decided = 0 AND  tmp_invalid = 1  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_7mc7qyptsq",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked  DSr:= DS#hours_worked between 1 and 80 /* In case a value in hours_worked is NULL the value returned will be NULL */ . ",
      "severity": "information",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_zo5613vozc",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc rc := 0  \"Haushalt = household\"  IF NOT  SEQUENCE (person_id , person , year_of_birth)   IN DATASET Haushalt (person_id , person , year_of_birth)  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_t7wdjy6b2j",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight  /*  * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)  *  *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN  *  x1                      1\t      +  *  x1.1          x1\t      2\t      +  *  x1.2          x1\t      2\t      +  *  x1.3          x1\t      2\t      +  *  x2                      1       +  *  x2.1          x2\t      2\t      +  */  DShierarchy := hierarchy(DS, level, \"HRC\", false) DScond := (DShierarchy = DS)[filter weight = \"false\"] DSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0 ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_rthlw492av",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), spouse-id, relation_to_head  DSfilter := DS[filter relation_to_head = 4] DSmerge := merge(DS \"DSx\",DS \"DSy\",     on     (DSy#spouse-id = DSx#person-id and DSy#relation_to_head = 3 and DSx#relation_to_head = 4)     return     (DSx#person-id as \"person-id\"))  DSnot_exists := DSfilter not_exists_in DSmerge  DScount := DSnot_exists[calc 1 as \"id\" role \"identifier\"][keep (id, person_id)][aggregate count (person_id)] = 0 ",
      "severity": "warning",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_xfvl806v1h",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier) DSgender= gender(identifier) {male, female} DSage =age-group(identifier) {child, adult, senior} /*  * gender: male, female  * age-groups: child, adult, senior  */ DSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,     on     (1 = 1)     return    (DSgender#gender as \"gender\",DSage #age-group as \"age-group\")) DSdiff := DSmerge setdiff DS[keep (gender, age-group)] DSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0 ",
      "severity": "information",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_prlrvodfmq",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members DSpersons=household-id(identifier), person-id(identifier)   DSmerge:=merge (DShousehold as \"DSh\", DSpersons as \"DSp\"          on DSh#household-id=DSp#household-id,          return          (DSh#household-id as household-id,DSh#person-id as person-id,DSp#members as members))    DSout:= DSmerge[filter person-id < 1 or person-id>members][keep (household-id,members)][aggregate count (members)] = 0  DSdist:= DSmerge[rename (person-id) as \"p_id\" role \"measure\"][aggregate count_distinct (p_id)][filter p id <> members] [aggregate count (members)] = 0   DSr := (DSout and DSdist)  ",
      "severity": "error",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_skbpmd6czh",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight  /*  * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)  *  *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN  *  x1                      1\t      +  *  x1.1          x1\t      2\t      +  *  x1.2          x1\t      2\t      +  *  x1.3          x1\t      2\t      +  *  x2                      1       +  *  x2.1          x2\t      2\t      +  */  DShierarchy := hierarchy(DS, level, \"HRC\", false) DScond := (DShierarchy = DS)[filter weight = \"false\"] DSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0 ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_bbvr7oo83l",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit rc,tmp_sum,hit  := {0,0,0}  tmp_AnzSst := FUNCTION LENGTH (level)  IF tmp_AnzSst IN SEQUENCE  (1,3)  THEN     FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )     IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND                            FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END     IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND                            FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END   END    \"Check\"   IF tmp_sum /= weight AND hit = 1    THEN rc := 1   END  END  RETURN rc",
      "severity": "error",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_671dpw7s0n",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), spouse-id, relation_to_head  DSfilter := DS[filter relation_to_head = 4] DSmerge := merge(DS \"DSx\",DS \"DSy\",     on     (DSy#spouse-id = DSx#person-id and DSy#relation_to_head = 3 and DSx#relation_to_head = 4)     return     (DSx#person-id as \"person-id\"))  DSnot_exists := DSfilter not_exists_in DSmerge  DScount := DSnot_exists[calc 1 as \"id\" role \"identifier\"][keep (id, person_id)][aggregate count (person_id)] = 0 ",
      "severity": "warning",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_4xvgraz9cn",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define vector with T/F value for each household test := sapply(1:length(household_id), function(i){   hhid <- household_id[i]   all(1:members[i] %in% persons$person_id[persons$household_id == hhid]) })  # rule must hold for all households all(test)  ",
      "severity": "error",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_vnkmbi8fnn",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1   DSout:=DS[filter season=\"out\"] DSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic     see page 42 VTL-part1 */ ",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_y60zxbvnj9",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_02: cost + profit == turnover ",
      "severity": "error",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_gtiznikdzo",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth DS_p= person-id(identifier),person, year_of_birth, gender   DSr:= DS_h#year_of_birth=DS_p#year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_mix5ev70wt",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age tmp_age := EMPTY    tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)  IF tmp_age - 28 < age  THEN rc := 1 END   RETURN rc",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_kiunsew0gk",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight  /*  * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)  *  *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN  *  x1                      1\t      +  *  x1.1          x1\t      2\t      +  *  x1.2          x1\t      2\t      +  *  x1.3          x1\t      2\t      +  *  x2                      1       +  *  x2.1          x2\t      2\t      +  */  DShierarchy := hierarchy(DS, level, \"HRC\", false) DScond := (DShierarchy = DS)[filter weight = \"false\"] DSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0 ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_pvhhy8mhum",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_10: any(business_id == 100 & turnover > 1e+06) ",
      "severity": "warning",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_wkdj07f023",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]  DScond:= DScalc[filter age between 0 and 113]  DSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]  ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_lj3rmzdvd5",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_6xz1f5t2x0",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid rc,tmp_decided, tmp_invalid := {0,0,0} tmp_age := EMPTY FOR EVERY tmp_age IN DATASET mat_Rule09 (age)     IF tmp_age  = EMPTY      THEN tmp_decided := 1           ELSE       IF NOT tmp_age  IN SEQUENCE (0++113)        THEN tmp_invalid := 1         END    END END  IF tmp_decided = 0 AND  tmp_invalid = 1  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_jy31sl9vwa",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head rc := {0} tmp_relation_to_head := EMPTY  IF relation_to_head ='4'  THEN        IF NOT spouse_id IN DATASET mat_Rule12 (person_id)     THEN rc := 1      ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )        IF tmp_relation_to_head /= '3'        THEN  rc := 1       END    END  END RETURN rc",
      "severity": "error",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_hog305pfcu",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_06: if (season == \"out\") price_t == price_tmin1 & quantity_t ==      quantity_tmin1 ",
      "severity": "warning",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_ogzvpze79t",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1 ",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_iunb8mznzx",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age tmp_age := EMPTY    tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)  IF tmp_age - 28 < age  THEN rc := 1 END   RETURN rc",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_gg0mk4ux8d",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=level    DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"] DSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1)  ",
      "severity": "warning",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_694czjxkfz",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count rc,tmp_undecided, tmp_count := {1,0,0} tmp_turnover := EMPTY    FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )     IF tmp_turnover  = EMPTY      THEN tmp_undecided := 1           ELSE       IF tmp_turnover > 1000000        THEN tmp_count :=  tmp_count + 1         END    END  END   IF tmp_undecided = 1 OR  tmp_count = 1   THEN rc := 0  END    RETURN rc",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_62stz29z9r",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_10: any(business_id == 100 & turnover > 1e+06) ",
      "severity": "warning",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_jvcbno67q2",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)   DScount := DS[calc 1 as msr_count role \"MEASURE\"] DSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] = DScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)] ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_iy4oaym1zl",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_15: postcode ~ city ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_uznr1wd8bw",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": " # def_ratio meani := mean(price_t)  + (price_tm1 - price_t)/length(price_t) ratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))  # rule_07 ratio >= 0.9 & ratio <= 1.1  ",
      "severity": "warning",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_2o31hg4t1r",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier) /*  * gender: male, female  * age-groups: child, adult, senior  */ DScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"] DScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1] DSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0 ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_wabyy45c2o",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define parent: parents :=  sub(\"\\\\.[0-9]$\",\"\",level) is_parent := level %in% parents  # define child sums, by search for parent pattern. child_sums := sapply(level[is_parent], function(x){      sum(weight[grepl(paste0(\"^\",x,\".[0-9]$\"),level)])   }) # rule 16  all(weight[is_parent] == child_sums)  ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_bs14yqz0om",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter rc, counter  := {0,0}    FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )   counter := counter + 1       IF counter /= 1      THEN rc := 1     END  END RETURN rc",
      "severity": "warning",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_jtzpze3fxb",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0 ",
      "severity": "information",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_z9tlqwv2eo",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth DS_p= person-id(identifier),person, year_of_birth, gender   DSr:= DS_h#year_of_birth=DS_p#year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_xskee834fb",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY) OR FUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5 OR FUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_pbzg52yciy",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)] DSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)] DSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)] DScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)] DSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1 ",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_hrqvo79oqg",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule 14 all(table(gender, age_group) >= 1) &    all(c(\"male\", \"female\") %in% gender) &   all(c(\"child\",\"adult\",\"senior\") %in% age_group) ",
      "severity": "error",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_ib5pom0knd",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)] DSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)] DSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)] DScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)] DSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1 ",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_tcj6a1z577",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1 rc := 0  LOOP FOR x1 := 1 UNTIL x1 > members      IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )       THEN rc := 1      END    END  RETURN rc",
      "severity": "information",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_ejaqai6pf8",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1 rc := 0  LOOP FOR x1 := 1 UNTIL x1 > members      IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )       THEN rc := 1      END    END  RETURN rc",
      "severity": "information",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_sap6fa2c77",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_15: postcode ~ city ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_xnbwvh8nsl",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_03: counts :=  table(level)  # rule_03: counts[\"high\"] < 0.1 * sum(counts) ",
      "severity": "information",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_xps1vnimvf",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover  rc := 1 tmp_turnover := EMPTY  FOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )     IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000    THEN rc := 0   END  END  RETURN rc",
      "severity": "error",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_1kloquzi62",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth DS_p= person-id(identifier),person, year_of_birth, gender   DSr:= DS_h#year_of_birth=DS_p#year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_xigvoskpzt",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_03: counts :=  table(level)  # rule_03: counts[\"high\"] < 0.1 * sum(counts) ",
      "severity": "information",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_jgozljfeqm",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY) OR FUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5 OR FUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_nlo4h4papf",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY) OR FUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5 OR FUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_9cum3qqqnd",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}  \"Count totals SP2 and SP3 across all records\"   FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)           counter := counter + 1           s_t   := s_t + t           s_tm1 := s_tm1 + tm1    END  \"Evaluate result\"  IF counter > 0    THEN      \"Compute previous average\"     d_t       := s_t   / counter     d_tm1     := s_tm1 / counter \t     \"Compute new average\"     d_t_neu := (s_t - price_t + price_tm1) / counter      \"Compute relative size of new average\"      DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)    \"Check\"   IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)    THEN rc := 1   END  END    RETURN rc",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_q7xiytuwtr",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight  /*  * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)  *  *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN  *  x1                      1\t      +  *  x1.1          x1\t      2\t      +  *  x1.2          x1\t      2\t      +  *  x1.3          x1\t      2\t      +  *  x2                      1       +  *  x2.1          x2\t      2\t      +  */  DShierarchy := hierarchy(DS, level, \"HRC\", false) DScond := (DShierarchy = DS)[filter weight = \"false\"] DSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0 ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_lujpb8csrd",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_age_gp: age_gp :=  age[match(grandchild_of, person_id)]  # rule_04: age_gp - 28 >= age ",
      "severity": "error",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_lfv1c95iiz",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of   DSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"   on (DSgp#person-id= DSgc# grandchild_of), return (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")   DSr:= (DSmerge#gp_age-28) >= DSmerge#age  DSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]  ",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_ccdlm583cb",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "turnover /= cost + profit",
      "severity": "information",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_z3lfr5h270",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_06: if (season == \"out\") price_t == price_tmin1 & quantity_t ==      quantity_tmin1 ",
      "severity": "warning",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_yxvl78o5ac",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), spouse-id, relation_to_head  DSfilter := DS[filter relation_to_head = 4] DSmerge := merge(DS \"DSx\",DS \"DSy\",     on     (DSy#spouse-id = DSx#person-id and DSy#relation_to_head = 3 and DSx#relation_to_head = 4)     return     (DSx#person-id as \"person-id\"))  DSnot_exists := DSfilter not_exists_in DSmerge  DScount := DSnot_exists[calc 1 as \"id\" role \"identifier\"][keep (id, person_id)][aggregate count (person_id)] = 0 ",
      "severity": "warning",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_bb61969m4o",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": " # def_ratio meani := mean(price_t)  + (price_tm1 - price_t)/length(price_t) ratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))  # rule_07 ratio >= 0.9 & ratio <= 1.1  ",
      "severity": "warning",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_l3w84aarj3",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head rc := {0} tmp_relation_to_head := EMPTY  IF relation_to_head ='4'  THEN        IF NOT spouse_id IN DATASET mat_Rule12 (person_id)     THEN rc := 1      ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )        IF tmp_relation_to_head /= '3'        THEN  rc := 1       END    END  END RETURN rc",
      "severity": "error",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_xolu2gcxos",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_xb9h20knc2",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1   DSout:=DS[filter season=\"out\"] DSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic     see page 42 VTL-part1 */ ",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_hcda2wm0of",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age tmp_age := EMPTY    tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)  IF tmp_age - 28 < age  THEN rc := 1 END   RETURN rc",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_fdzmo63ej1",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit rc,tmp_sum,hit  := {0,0,0}  tmp_AnzSst := FUNCTION LENGTH (level)  IF tmp_AnzSst IN SEQUENCE  (1,3)  THEN     FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )     IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND                            FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END     IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND                            FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END   END    \"Check\"   IF tmp_sum /= weight AND hit = 1    THEN rc := 1   END  END  RETURN rc",
      "severity": "error",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_m8m8sjz1hb",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_count: person_count :=  table(person$household_id)  # rule17: members == person_count[household_id] ",
      "severity": "warning",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_ytyaamhp1l",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count rc,tmp_undecided, tmp_count := {1,0,0} tmp_turnover := EMPTY    FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )     IF tmp_turnover  = EMPTY      THEN tmp_undecided := 1           ELSE       IF tmp_turnover > 1000000        THEN tmp_count :=  tmp_count + 1         END    END  END   IF tmp_undecided = 1 OR  tmp_count = 1   THEN rc := 0  END    RETURN rc",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_s3ud1bi10e",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_15: postcode ~ city ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_hsoe0nvt9o",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_age_gp: age_gp :=  age[match(grandchild_of, person_id)]  # rule_04: age_gp - 28 >= age ",
      "severity": "error",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_zfqi3sdid3",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid rc,tmp_decided, tmp_invalid := {0,0,0} tmp_age := EMPTY FOR EVERY tmp_age IN DATASET mat_Rule09 (age)     IF tmp_age  = EMPTY      THEN tmp_decided := 1           ELSE       IF NOT tmp_age  IN SEQUENCE (0++113)        THEN tmp_invalid := 1         END    END END  IF tmp_decided = 0 AND  tmp_invalid = 1  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_nz6nhwi90d",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1   DSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */ ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_3e8rrlc7fl",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_l3f1ej4boy",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_15: postcode ~ city ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_qu95j6qfij",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]  DScond:= DScalc[filter age between 0 and 113]  DSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]  ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_vobptt3rlj",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked  DSr:= DS#hours_worked between 1 and 80 /* In case a value in hours_worked is NULL the value returned will be NULL */ . ",
      "severity": "information",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_jle7sy1ymt",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_03: counts :=  table(level)  # rule_03: counts[\"high\"] < 0.1 * sum(counts) ",
      "severity": "information",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_elzfu7edar",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}  \"Count totals SP2 and SP3 across all records\"   FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)           counter := counter + 1           s_t   := s_t + t           s_tm1 := s_tm1 + tm1    END  \"Evaluate result\"  IF counter > 0    THEN      \"Compute previous average\"     d_t       := s_t   / counter     d_tm1     := s_tm1 / counter \t     \"Compute new average\"     d_t_neu := (s_t - price_t + price_tm1) / counter      \"Compute relative size of new average\"      DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)    \"Check\"   IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)    THEN rc := 1   END  END    RETURN rc",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_7kgtxmg65u",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_city, counter rc, counter  := {0,0}    FOR EVERY tmp_city IN DATASET mat_Rule15 (postcode = postcode ; city )    IF city /= tmp_city      THEN rc := 1     END  END RETURN rc",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_1khtkj92z6",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_08: year_of_birth == persons$year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_ky0fzzu5w2",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_counts: counts :=  table(gender, age_group)  # rule_13: all(counts <= 1) ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_m2to4qsimk",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members DSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)  DScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]=          DShousehold)[filter members= \"false\"] DSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0  ",
      "severity": "error",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_8jmzlug7mr",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier) DSgender= gender(identifier) {male, female} DSage =age-group(identifier) {child, adult, senior} /*  * gender: male, female  * age-groups: child, adult, senior  */ DSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,     on     (1 = 1)     return    (DSgender#gender as \"gender\",DSage #age-group as \"age-group\")) DSdiff := DSmerge setdiff DS[keep (gender, age-group)] DSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0 ",
      "severity": "information",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_kilurbern6",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}  \"Count totals SP2 and SP3 across all records\"   FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)           counter := counter + 1           s_t   := s_t + t           s_tm1 := s_tm1 + tm1    END  \"Evaluate result\"  IF counter > 0    THEN      \"Compute previous average\"     d_t       := s_t   / counter     d_tm1     := s_tm1 / counter \t     \"Compute new average\"     d_t_neu := (s_t - price_t + price_tm1) / counter      \"Compute relative size of new average\"      DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)    \"Check\"   IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)    THEN rc := 1   END  END    RETURN rc",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_gsc40nqc2n",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count rc,tmp_undecided, tmp_count := {1,0,0} tmp_turnover := EMPTY    FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )     IF tmp_turnover  = EMPTY      THEN tmp_undecided := 1           ELSE       IF tmp_turnover > 1000000        THEN tmp_count :=  tmp_count + 1         END    END  END   IF tmp_undecided = 1 OR  tmp_count = 1   THEN rc := 0  END    RETURN rc",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_76cxfustfs",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked  DSr:= DS#hours_worked between 1 and 80 /* In case a value in hours_worked is NULL the value returned will be NULL */ . ",
      "severity": "information",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_anm6uavt7k",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit rc,tmp_sum,hit  := {0,0,0}  tmp_AnzSst := FUNCTION LENGTH (level)  IF tmp_AnzSst IN SEQUENCE  (1,3)  THEN     FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )     IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND                            FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END     IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND                            FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END   END    \"Check\"   IF tmp_sum /= weight AND hit = 1    THEN rc := 1   END  END  RETURN rc",
      "severity": "error",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_oes03uv6kl",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth DS_p= person-id(identifier),person, year_of_birth, gender   DSr:= DS_h#year_of_birth=DS_p#year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_42yfc50kaa",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_11: sum(business_id == 100 & turnover > 1e+06) == 1 ",
      "severity": "information",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_h96fr7bwbe",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid rc,tmp_decided, tmp_invalid := {0,0,0} tmp_age := EMPTY FOR EVERY tmp_age IN DATASET mat_Rule09 (age)     IF tmp_age  = EMPTY      THEN tmp_decided := 1           ELSE       IF NOT tmp_age  IN SEQUENCE (0++113)        THEN tmp_invalid := 1         END    END END  IF tmp_decided = 0 AND  tmp_invalid = 1  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_4d2op7g2z0",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc rc := 0  \"Haushalt = household\"  IF NOT  SEQUENCE (person_id , person , year_of_birth)   IN DATASET Haushalt (person_id , person , year_of_birth)  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_xx14qarssp",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_08: year_of_birth == persons$year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_mcn3aztg1k",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1 rc := 0  LOOP FOR x1 := 1 UNTIL x1 > members      IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )       THEN rc := 1      END    END  RETURN rc",
      "severity": "information",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_t1wtl8s42n",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth DS_p= person-id(identifier),person, year_of_birth, gender   DSr:= DS_h#year_of_birth=DS_p#year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_lslr0taonu",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "turnover /= cost + profit",
      "severity": "information",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_uavnzhv0rq",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier) /*  * gender: male, female  * age-groups: child, adult, senior  */ DScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"] DScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1] DSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0 ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_nqiv8uvvoo",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule 14 all(table(gender, age_group) >= 1) &    all(c(\"male\", \"female\") %in% gender) &   all(c(\"child\",\"adult\",\"senior\") %in% age_group) ",
      "severity": "error",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_i467kt4ylc",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]  DScond:= DScalc[filter age between 0 and 113]  DSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]  ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_luckiqocku",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_15: postcode ~ city ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_56r43fwyag",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0 ",
      "severity": "information",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_3mkd3ueksz",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_03: counts :=  table(level)  # rule_03: counts[\"high\"] < 0.1 * sum(counts) ",
      "severity": "information",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_6otpv8s7kc",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count rc,tmp_undecided, tmp_count := {1,0,0} tmp_turnover := EMPTY    FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )     IF tmp_turnover  = EMPTY      THEN tmp_undecided := 1           ELSE       IF tmp_turnover > 1000000        THEN tmp_count :=  tmp_count + 1         END    END  END   IF tmp_undecided = 1 OR  tmp_count = 1   THEN rc := 0  END    RETURN rc",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_vpm74o3py2",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}  \"Count totals SP2 and SP3 across all records\"   FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)           counter := counter + 1           s_t   := s_t + t           s_tm1 := s_tm1 + tm1    END  \"Evaluate result\"  IF counter > 0    THEN      \"Compute previous average\"     d_t       := s_t   / counter     d_tm1     := s_tm1 / counter \t     \"Compute new average\"     d_t_neu := (s_t - price_t + price_tm1) / counter      \"Compute relative size of new average\"      DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)    \"Check\"   IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)    THEN rc := 1   END  END    RETURN rc",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_fak6t0s35d",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count rc,tmp_undecided, tmp_count := {1,0,0} tmp_turnover := EMPTY    FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )     IF tmp_turnover  = EMPTY      THEN tmp_undecided := 1           ELSE       IF tmp_turnover > 1000000        THEN tmp_count :=  tmp_count + 1         END    END  END   IF tmp_undecided = 1 OR  tmp_count = 1   THEN rc := 0  END    RETURN rc",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_6cpgbcowwj",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,     male_child, female_child, male_adult, female_adult, male_senior, female_senior rc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}    FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)    IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END    IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END    IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END    END     IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0       THEN rc := 1     END   RETURN rc",
      "severity": "error",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_79l95414e0",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_rel_4: rel_4 :=  person_id[relation_to_head == 4]  # def_rel_3: spouse_of_rel_3 :=  spouse_id[relation_to_head == 3]  # rule_12: all(rel_4 %in% spouse_of_rel_3) ",
      "severity": "information",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_yvntgxn8i8",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier) /*  * gender: male, female  * age-groups: child, adult, senior  */ DScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"] DScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1] DSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0 ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_w13yzg3zcd",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total rc,z1,total := {0,0,0}  FOR EVERY s1  IN DATASET mat_Rule03 (level1)     IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"    IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"  END  \"Check relative occurrence of value 'high'\"  IF z1 > total * 0.1 THEN rc := 1 END  RETURN rc",
      "severity": "error",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_vpoieigi8a",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total rc,z1,total := {0,0,0}  FOR EVERY s1  IN DATASET mat_Rule03 (level1)     IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"    IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"  END  \"Check relative occurrence of value 'high'\"  IF z1 > total * 0.1 THEN rc := 1 END  RETURN rc",
      "severity": "error",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_yq1pvcogbe",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1   DSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */ ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_l25cw10er1",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,     male_child, female_child, male_adult, female_adult, male_senior, female_senior rc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}    FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)    IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END    IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END    IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END    END     IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0       THEN rc := 1     END   RETURN rc",
      "severity": "error",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_4ocmoj2q5n",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define parent: parents :=  sub(\"\\\\.[0-9]$\",\"\",level) is_parent := level %in% parents  # define child sums, by search for parent pattern. child_sums := sapply(level[is_parent], function(x){      sum(weight[grepl(paste0(\"^\",x,\".[0-9]$\"),level)])   }) # rule 16  all(weight[is_parent] == child_sums)  ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_lpvfl8qg8m",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_03: counts :=  table(level)  # rule_03: counts[\"high\"] < 0.1 * sum(counts) ",
      "severity": "information",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_6bfyktnpdv",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_06: if (season == \"out\") price_t == price_tmin1 & quantity_t ==      quantity_tmin1 ",
      "severity": "warning",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_ze8ubj3dpk",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}  \"Count totals SP2 and SP3 across all records\"   FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)           counter := counter + 1           s_t   := s_t + t           s_tm1 := s_tm1 + tm1    END  \"Evaluate result\"  IF counter > 0    THEN      \"Compute previous average\"     d_t       := s_t   / counter     d_tm1     := s_tm1 / counter \t     \"Compute new average\"     d_t_neu := (s_t - price_t + price_tm1) / counter      \"Compute relative size of new average\"      DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)    \"Check\"   IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)    THEN rc := 1   END  END    RETURN rc",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_29avlrsypq",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc rc := 0  \"Haushalt = household\"  IF NOT  SEQUENCE (person_id , person , year_of_birth)   IN DATASET Haushalt (person_id , person , year_of_birth)  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_c7knc7mdhf",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define vector with T/F value for each household test := sapply(1:length(household_id), function(i){   hhid <- household_id[i]   all(1:members[i] %in% persons$person_id[persons$household_id == hhid]) })  # rule must hold for all households all(test)  ",
      "severity": "error",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_52d1snfd72",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_15: postcode ~ city ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_r0v6hy2kqv",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1 ",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_g5sx5u6ybl",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)] DSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)] DSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)] DScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)] DSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1 ",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_017n0zovf6",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_04: (price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <=      0.5 * price_Ymin1 ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_xusox5ir8a",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define vector with T/F value for each household test := sapply(1:length(household_id), function(i){   hhid <- household_id[i]   all(1:members[i] %in% persons$person_id[persons$household_id == hhid]) })  # rule must hold for all households all(test)  ",
      "severity": "error",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_8d2n1i20a4",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define vector with T/F value for each household test := sapply(1:length(household_id), function(i){   hhid <- household_id[i]   all(1:members[i] %in% persons$person_id[persons$household_id == hhid]) })  # rule must hold for all households all(test)  ",
      "severity": "error",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_yu0daqrqay",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,     male_child, female_child, male_adult, female_adult, male_senior, female_senior rc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}    FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)    IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END    IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END    IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END    END     IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0       THEN rc := 1     END   RETURN rc",
      "severity": "error",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_sneazq39ei",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0 ",
      "severity": "information",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_uft4gn5mgx",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1 ",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_sz768oz5as",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_10: any(business_id == 100 & turnover > 1e+06) ",
      "severity": "warning",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_xisjzpwfg0",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_08: year_of_birth == persons$year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_56v3v54a3p",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of   DSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"   on (DSgp#person-id= DSgc# grandchild_of), return (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")   DSr:= (DSmerge#gp_age-28) >= DSmerge#age  DSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]  ",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_dizrremyre",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_count: person_count :=  table(person$household_id)  # rule17: members == person_count[household_id] ",
      "severity": "warning",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_4bcsmlnaps",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= business-id, cost, profit, turnover   DSr:= (DS#cost + DS#profit) = DS#turnover ",
      "severity": "error",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_clh3llwsie",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": " # def_ratio meani := mean(price_t)  + (price_tm1 - price_t)/length(price_t) ratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))  # rule_07 ratio >= 0.9 & ratio <= 1.1  ",
      "severity": "warning",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_jbwl6zmik2",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1 ",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_wscu8btmkg",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover  rc := 1 tmp_turnover := EMPTY  FOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )     IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000    THEN rc := 0   END  END  RETURN rc",
      "severity": "error",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_47uq0fhywc",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked  DSr:= DS#hours_worked between 1 and 80 /* In case a value in hours_worked is NULL the value returned will be NULL */ . ",
      "severity": "information",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_0x054zpgk1",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members DSpersons=household-id(identifier), person-id(identifier)   DSmerge:=merge (DShousehold as \"DSh\", DSpersons as \"DSp\"          on DSh#household-id=DSp#household-id,          return          (DSh#household-id as household-id,DSh#person-id as person-id,DSp#members as members))    DSout:= DSmerge[filter person-id < 1 or person-id>members][keep (household-id,members)][aggregate count (members)] = 0  DSdist:= DSmerge[rename (person-id) as \"p_id\" role \"measure\"][aggregate count_distinct (p_id)][filter p id <> members] [aggregate count (members)] = 0   DSr := (DSout and DSdist)  ",
      "severity": "error",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_yrx2wcsb7d",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule 14 all(table(gender, age_group) >= 1) &    all(c(\"male\", \"female\") %in% gender) &   all(c(\"child\",\"adult\",\"senior\") %in% age_group) ",
      "severity": "error",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_xijrhnu51e",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_rel_4: rel_4 :=  person_id[relation_to_head == 4]  # def_rel_3: spouse_of_rel_3 :=  spouse_id[relation_to_head == 3]  # rule_12: all(rel_4 %in% spouse_of_rel_3) ",
      "severity": "information",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_12pa0r0rfs",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_count: person_count :=  table(person$household_id)  # rule17: members == person_count[household_id] ",
      "severity": "warning",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_7bchhajvwx",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "turnover /= cost + profit",
      "severity": "information",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_x36vg6w1r0",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age tmp_age := EMPTY    tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)  IF tmp_age - 28 < age  THEN rc := 1 END   RETURN rc",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_55vf5ue7az",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_03: counts :=  table(level)  # rule_03: counts[\"high\"] < 0.1 * sum(counts) ",
      "severity": "information",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_1l320ykcg1",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1 rc := 0  LOOP FOR x1 := 1 UNTIL x1 > members      IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )       THEN rc := 1      END    END  RETURN rc",
      "severity": "information",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_e5rodp42su",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1   DSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */ ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_jo9id1x4eg",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_02: cost + profit == turnover ",
      "severity": "error",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_5h7bhjp1q9",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter rc, counter  := {0,0}    FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )   counter := counter + 1       IF counter /= 1      THEN rc := 1     END  END RETURN rc",
      "severity": "warning",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_tiu6c2zpvh",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit rc,tmp_sum,hit  := {0,0,0}  tmp_AnzSst := FUNCTION LENGTH (level)  IF tmp_AnzSst IN SEQUENCE  (1,3)  THEN     FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )     IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND                            FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END     IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND                            FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END   END    \"Check\"   IF tmp_sum /= weight AND hit = 1    THEN rc := 1   END  END  RETURN rc",
      "severity": "error",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_hj5brrip7u",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier) DSgender= gender(identifier) {male, female} DSage =age-group(identifier) {child, adult, senior} /*  * gender: male, female  * age-groups: child, adult, senior  */ DSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,     on     (1 = 1)     return    (DSgender#gender as \"gender\",DSage #age-group as \"age-group\")) DSdiff := DSmerge setdiff DS[keep (gender, age-group)] DSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0 ",
      "severity": "information",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_aqwg4awcvn",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total rc,z1,total := {0,0,0}  FOR EVERY s1  IN DATASET mat_Rule03 (level1)     IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"    IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"  END  \"Check relative occurrence of value 'high'\"  IF z1 > total * 0.1 THEN rc := 1 END  RETURN rc",
      "severity": "error",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_bhtlhlghdp",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}  \"Count totals SP2 and SP3 across all records\"   FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)           counter := counter + 1           s_t   := s_t + t           s_tm1 := s_tm1 + tm1    END  \"Evaluate result\"  IF counter > 0    THEN      \"Compute previous average\"     d_t       := s_t   / counter     d_tm1     := s_tm1 / counter \t     \"Compute new average\"     d_t_neu := (s_t - price_t + price_tm1) / counter      \"Compute relative size of new average\"      DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)    \"Check\"   IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)    THEN rc := 1   END  END    RETURN rc",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_sx9dv863ms",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier) /*  * gender: male, female  * age-groups: child, adult, senior  */ DScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"] DScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1] DSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0 ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_764a30qdpw",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_08: year_of_birth == persons$year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_pmqh0r801a",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_10: any(business_id == 100 & turnover > 1e+06) ",
      "severity": "warning",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_7tp0zhoo5n",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1   DSout:=DS[filter season=\"out\"] DSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic     see page 42 VTL-part1 */ ",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_ohhpc3k9gg",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_01: hours_worked >= 1 & hours_worked <= 80 ",
      "severity": "warning",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_fn7fmevnsw",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= business-id, cost, profit, turnover   DSr:= (DS#cost + DS#profit) = DS#turnover ",
      "severity": "error",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_mr2sqsjtcl",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_rel_4: rel_4 :=  person_id[relation_to_head == 4]  # def_rel_3: spouse_of_rel_3 :=  spouse_id[relation_to_head == 3]  # rule_12: all(rel_4 %in% spouse_of_rel_3) ",
      "severity": "information",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_hiaca4gb0l",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_city, counter rc, counter  := {0,0}    FOR EVERY tmp_city IN DATASET mat_Rule15 (postcode = postcode ; city )    IF city /= tmp_city      THEN rc := 1     END  END RETURN rc",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_18fk564zd2",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_m0xqpittuj",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_counts: counts :=  table(gender, age_group)  # rule_13: all(counts <= 1) ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_s1wkz9iqiz",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_08: year_of_birth == persons$year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_2sc8vqt5yh",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc rc := 0  \"Haushalt = household\"  IF NOT  SEQUENCE (person_id , person , year_of_birth)   IN DATASET Haushalt (person_id , person , year_of_birth)  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_l44etrbh7o",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=level    DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"] DSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1)  ",
      "severity": "warning",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_kwkdr4gjiu",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= business-id, cost, profit, turnover   DSr:= (DS#cost + DS#profit) = DS#turnover ",
      "severity": "error",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_8y2n1rsmil",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit rc,tmp_sum,hit  := {0,0,0}  tmp_AnzSst := FUNCTION LENGTH (level)  IF tmp_AnzSst IN SEQUENCE  (1,3)  THEN     FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )     IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND                            FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END     IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND                            FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END   END    \"Check\"   IF tmp_sum /= weight AND hit = 1    THEN rc := 1   END  END  RETURN rc",
      "severity": "error",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_5mut5n8hos",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_rel_4: rel_4 :=  person_id[relation_to_head == 4]  # def_rel_3: spouse_of_rel_3 :=  spouse_id[relation_to_head == 3]  # rule_12: all(rel_4 %in% spouse_of_rel_3) ",
      "severity": "information",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_zk3m9mewy1",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier) DSgender= gender(identifier) {male, female} DSage =age-group(identifier) {child, adult, senior} /*  * gender: male, female  * age-groups: child, adult, senior  */ DSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,     on     (1 = 1)     return    (DSgender#gender as \"gender\",DSage #age-group as \"age-group\")) DSdiff := DSmerge setdiff DS[keep (gender, age-group)] DSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0 ",
      "severity": "information",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_rqxjv5fkxt",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_11: sum(business_id == 100 & turnover > 1e+06) == 1 ",
      "severity": "information",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_5bbs7v2grp",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": " # def_ratio meani := mean(price_t)  + (price_tm1 - price_t)/length(price_t) ratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))  # rule_07 ratio >= 0.9 & ratio <= 1.1  ",
      "severity": "warning",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_459e1qbar4",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth DS_p= person-id(identifier),person, year_of_birth, gender   DSr:= DS_h#year_of_birth=DS_p#year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_s7tbkxucf9",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_15: postcode ~ city ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_oh7zsj3op7",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total rc,z1,total := {0,0,0}  FOR EVERY s1  IN DATASET mat_Rule03 (level1)     IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"    IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"  END  \"Check relative occurrence of value 'high'\"  IF z1 > total * 0.1 THEN rc := 1 END  RETURN rc",
      "severity": "error",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_h3hsrf1y6u",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": " # def_ratio meani := mean(price_t)  + (price_tm1 - price_t)/length(price_t) ratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))  # rule_07 ratio >= 0.9 & ratio <= 1.1  ",
      "severity": "warning",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_dn4ddg62ax",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count rc,tmp_undecided, tmp_count := {1,0,0} tmp_turnover := EMPTY    FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )     IF tmp_turnover  = EMPTY      THEN tmp_undecided := 1           ELSE       IF tmp_turnover > 1000000        THEN tmp_count :=  tmp_count + 1         END    END  END   IF tmp_undecided = 1 OR  tmp_count = 1   THEN rc := 0  END    RETURN rc",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_lcu9xgoo8m",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover  rc := 1 tmp_turnover := EMPTY  FOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )     IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000    THEN rc := 0   END  END  RETURN rc",
      "severity": "error",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_dzfv57z18q",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1 ",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_staqzau7fc",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_11: sum(business_id == 100 & turnover > 1e+06) == 1 ",
      "severity": "information",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_7ii9kotvoi",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}  \"Count totals SP2 and SP3 across all records\"   FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)           counter := counter + 1           s_t   := s_t + t           s_tm1 := s_tm1 + tm1    END  \"Evaluate result\"  IF counter > 0    THEN      \"Compute previous average\"     d_t       := s_t   / counter     d_tm1     := s_tm1 / counter \t     \"Compute new average\"     d_t_neu := (s_t - price_t + price_tm1) / counter      \"Compute relative size of new average\"      DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)    \"Check\"   IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)    THEN rc := 1   END  END    RETURN rc",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_ty2vo67aqk",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier) /*  * gender: male, female  * age-groups: child, adult, senior  */ DScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"] DScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1] DSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0 ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_d3hcrcwrza",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier) DSgender= gender(identifier) {male, female} DSage =age-group(identifier) {child, adult, senior} /*  * gender: male, female  * age-groups: child, adult, senior  */ DSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,     on     (1 = 1)     return    (DSgender#gender as \"gender\",DSage #age-group as \"age-group\")) DSdiff := DSmerge setdiff DS[keep (gender, age-group)] DSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0 ",
      "severity": "information",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_rpo8os6cq6",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid rc,tmp_decided, tmp_invalid := {0,0,0} tmp_age := EMPTY FOR EVERY tmp_age IN DATASET mat_Rule09 (age)     IF tmp_age  = EMPTY      THEN tmp_decided := 1           ELSE       IF NOT tmp_age  IN SEQUENCE (0++113)        THEN tmp_invalid := 1         END    END END  IF tmp_decided = 0 AND  tmp_invalid = 1  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_bm5hkim93t",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_02: cost + profit == turnover ",
      "severity": "error",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_05adv7979x",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_04: (price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <=      0.5 * price_Ymin1 ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_xgsj3nf2z7",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_01: hours_worked >= 1 & hours_worked <= 80 ",
      "severity": "warning",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_bcs1rqc6o0",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked  DSr:= DS#hours_worked between 1 and 80 /* In case a value in hours_worked is NULL the value returned will be NULL */ . ",
      "severity": "information",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_8sd2qu0rdx",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked  DSr:= DS#hours_worked between 1 and 80 /* In case a value in hours_worked is NULL the value returned will be NULL */ . ",
      "severity": "information",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_bl5nvqzn7x",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_6458y8r6o0",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule 14 all(table(gender, age_group) >= 1) &    all(c(\"male\", \"female\") %in% gender) &   all(c(\"child\",\"adult\",\"senior\") %in% age_group) ",
      "severity": "error",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_uj2jljt8nv",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head rc := {0} tmp_relation_to_head := EMPTY  IF relation_to_head ='4'  THEN        IF NOT spouse_id IN DATASET mat_Rule12 (person_id)     THEN rc := 1      ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )        IF tmp_relation_to_head /= '3'        THEN  rc := 1       END    END  END RETURN rc",
      "severity": "error",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_q1xa1walnd",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_03: counts :=  table(level)  # rule_03: counts[\"high\"] < 0.1 * sum(counts) ",
      "severity": "information",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_rv98fwaxsa",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1 rc := 0  LOOP FOR x1 := 1 UNTIL x1 > members      IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )       THEN rc := 1      END    END  RETURN rc",
      "severity": "information",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_jxuac4njun",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)   DScount := DS[calc 1 as msr_count role \"MEASURE\"] DSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] = DScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)] ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_vxv9z8873d",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth DS_p= person-id(identifier),person, year_of_birth, gender   DSr:= DS_h#year_of_birth=DS_p#year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_xkjd7ilqcu",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY) OR FUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5 OR FUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_c5sl3pr13l",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_gubtf6b3ks",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit rc,tmp_sum,hit  := {0,0,0}  tmp_AnzSst := FUNCTION LENGTH (level)  IF tmp_AnzSst IN SEQUENCE  (1,3)  THEN     FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )     IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND                            FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END     IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND                            FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END   END    \"Check\"   IF tmp_sum /= weight AND hit = 1    THEN rc := 1   END  END  RETURN rc",
      "severity": "error",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_nekt772gaq",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY) OR FUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5 OR FUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_cupw7ym3bx",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)] DSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)] DSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)] DScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)] DSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1 ",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_06mhugr9wr",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter rc, counter  := {0,0}    FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )   counter := counter + 1       IF counter /= 1      THEN rc := 1     END  END RETURN rc",
      "severity": "warning",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_93roj333r1",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_11: sum(business_id == 100 & turnover > 1e+06) == 1 ",
      "severity": "information",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_l6dnw58q68",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth DS_p= person-id(identifier),person, year_of_birth, gender   DSr:= DS_h#year_of_birth=DS_p#year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_2222qwfzxx",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_city, counter rc, counter  := {0,0}    FOR EVERY tmp_city IN DATASET mat_Rule15 (postcode = postcode ; city )    IF city /= tmp_city      THEN rc := 1     END  END RETURN rc",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_1xcpqsy3il",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members DSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)  DScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]=          DShousehold)[filter members= \"false\"] DSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0  ",
      "severity": "error",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_q4hk5kfn7t",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members DSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)  DScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]=          DShousehold)[filter members= \"false\"] DSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0  ",
      "severity": "error",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_qvzpvsv41l",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0 ",
      "severity": "information",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_wmjki8mjh0",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= business-id, cost, profit, turnover   DSr:= (DS#cost + DS#profit) = DS#turnover ",
      "severity": "error",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_75b0zdegp0",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_09: all(age >= 0 & age <= 113) ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_vuk68je74n",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define parent: parents :=  sub(\"\\\\.[0-9]$\",\"\",level) is_parent := level %in% parents  # define child sums, by search for parent pattern. child_sums := sapply(level[is_parent], function(x){      sum(weight[grepl(paste0(\"^\",x,\".[0-9]$\"),level)])   }) # rule 16  all(weight[is_parent] == child_sums)  ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_h6ykgvozsf",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head rc := {0} tmp_relation_to_head := EMPTY  IF relation_to_head ='4'  THEN        IF NOT spouse_id IN DATASET mat_Rule12 (person_id)     THEN rc := 1      ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )        IF tmp_relation_to_head /= '3'        THEN  rc := 1       END    END  END RETURN rc",
      "severity": "error",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_boa44gbfds",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_rel_4: rel_4 :=  person_id[relation_to_head == 4]  # def_rel_3: spouse_of_rel_3 :=  spouse_id[relation_to_head == 3]  # rule_12: all(rel_4 %in% spouse_of_rel_3) ",
      "severity": "information",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_yktuzqoafc",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": " # def_ratio meani := mean(price_t)  + (price_tm1 - price_t)/length(price_t) ratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))  # rule_07 ratio >= 0.9 & ratio <= 1.1  ",
      "severity": "warning",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_67y30qgtt9",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_count: person_count :=  table(person$household_id)  # rule17: members == person_count[household_id] ",
      "severity": "warning",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_fncbk4f35i",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_11: sum(business_id == 100 & turnover > 1e+06) == 1 ",
      "severity": "information",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_ckdonra2r3",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter rc, counter  := {0,0}    FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )    counter := counter + 1   END     IF counter /= members      THEN rc := 1     END  RETURN rc",
      "severity": "information",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_w2atd20a0b",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_10: any(business_id == 100 & turnover > 1e+06) ",
      "severity": "warning",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_qr1k694y23",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]  DScond:= DScalc[filter age between 0 and 113]  DSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]  ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_73o0rx1ijd",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_01: hours_worked >= 1 & hours_worked <= 80 ",
      "severity": "warning",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_tgab2fp97n",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_09: all(age >= 0 & age <= 113) ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_k4u41o3r29",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)] DSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)] DSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)] DScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)] DSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1 ",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_li6k1udjwa",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_rel_4: rel_4 :=  person_id[relation_to_head == 4]  # def_rel_3: spouse_of_rel_3 :=  spouse_id[relation_to_head == 3]  # rule_12: all(rel_4 %in% spouse_of_rel_3) ",
      "severity": "information",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_znwtia4pue",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)] DSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)] DSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)] DScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)] DSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1 ",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_29och6ugas",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_r2du0j71e0",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_count: person_count :=  table(person$household_id)  # rule17: members == person_count[household_id] ",
      "severity": "warning",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_b8ut1i2iy8",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]  DScond:= DScalc[filter age between 0 and 113]  DSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]  ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_qb1y9v4ykw",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1 rc := 0  LOOP FOR x1 := 1 UNTIL x1 > members      IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )       THEN rc := 1      END    END  RETURN rc",
      "severity": "information",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_y9zsuw1g1t",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]  DScond:= DScalc[filter age between 0 and 113]  DSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]  ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_mqv0o4byek",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count rc,tmp_undecided, tmp_count := {1,0,0} tmp_turnover := EMPTY    FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )     IF tmp_turnover  = EMPTY      THEN tmp_undecided := 1           ELSE       IF tmp_turnover > 1000000        THEN tmp_count :=  tmp_count + 1         END    END  END   IF tmp_undecided = 1 OR  tmp_count = 1   THEN rc := 0  END    RETURN rc",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_h2unuzesfm",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier) /*  * gender: male, female  * age-groups: child, adult, senior  */ DScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"] DScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1] DSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0 ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_re1yhm079z",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1 rc := 0  LOOP FOR x1 := 1 UNTIL x1 > members      IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )       THEN rc := 1      END    END  RETURN rc",
      "severity": "information",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_d8g7yeutey",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_01: hours_worked >= 1 & hours_worked <= 80 ",
      "severity": "warning",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_izwz0s0rm1",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=level    DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"] DSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1)  ",
      "severity": "warning",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_z6sbft0ka3",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid rc,tmp_decided, tmp_invalid := {0,0,0} tmp_age := EMPTY FOR EVERY tmp_age IN DATASET mat_Rule09 (age)     IF tmp_age  = EMPTY      THEN tmp_decided := 1           ELSE       IF NOT tmp_age  IN SEQUENCE (0++113)        THEN tmp_invalid := 1         END    END END  IF tmp_decided = 0 AND  tmp_invalid = 1  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_buu2lsh9q8",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth DS_p= person-id(identifier),person, year_of_birth, gender   DSr:= DS_h#year_of_birth=DS_p#year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_uin0fv6m14",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1   DSout:=DS[filter season=\"out\"] DSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic     see page 42 VTL-part1 */ ",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_qmkfxhh4ir",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_gyf3xk19rj",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter rc, counter  := {0,0}    FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )   counter := counter + 1       IF counter /= 1      THEN rc := 1     END  END RETURN rc",
      "severity": "warning",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_14avd3d2rp",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_age_gp: age_gp :=  age[match(grandchild_of, person_id)]  # rule_04: age_gp - 28 >= age ",
      "severity": "error",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_gvx35pkcfv",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_rel_4: rel_4 :=  person_id[relation_to_head == 4]  # def_rel_3: spouse_of_rel_3 :=  spouse_id[relation_to_head == 3]  # rule_12: all(rel_4 %in% spouse_of_rel_3) ",
      "severity": "information",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_5jyuci5rxp",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_age_gp: age_gp :=  age[match(grandchild_of, person_id)]  # rule_04: age_gp - 28 >= age ",
      "severity": "error",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_c5kgvk8rvl",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_11: sum(business_id == 100 & turnover > 1e+06) == 1 ",
      "severity": "information",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_1vl4it2w3c",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1 rc := 0  LOOP FOR x1 := 1 UNTIL x1 > members      IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )       THEN rc := 1      END    END  RETURN rc",
      "severity": "information",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_9yw3clj1mh",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,     male_child, female_child, male_adult, female_adult, male_senior, female_senior rc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}    FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)    IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END    IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END    IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END    END     IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0       THEN rc := 1     END   RETURN rc",
      "severity": "error",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_y0q1m37b9d",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "turnover /= cost + profit",
      "severity": "information",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_etkxvcvxzt",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_04: (price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <=      0.5 * price_Ymin1 ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_algcwzx3ki",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid rc,tmp_decided, tmp_invalid := {0,0,0} tmp_age := EMPTY FOR EVERY tmp_age IN DATASET mat_Rule09 (age)     IF tmp_age  = EMPTY      THEN tmp_decided := 1           ELSE       IF NOT tmp_age  IN SEQUENCE (0++113)        THEN tmp_invalid := 1         END    END END  IF tmp_decided = 0 AND  tmp_invalid = 1  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_0wskwhwrph",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit rc,tmp_sum,hit  := {0,0,0}  tmp_AnzSst := FUNCTION LENGTH (level)  IF tmp_AnzSst IN SEQUENCE  (1,3)  THEN     FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )     IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND                            FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END     IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND                            FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END   END    \"Check\"   IF tmp_sum /= weight AND hit = 1    THEN rc := 1   END  END  RETURN rc",
      "severity": "error",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_mnybstezyw",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1 rc := 0  LOOP FOR x1 := 1 UNTIL x1 > members      IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )       THEN rc := 1      END    END  RETURN rc",
      "severity": "information",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_af2nwg7ply",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total rc,z1,total := {0,0,0}  FOR EVERY s1  IN DATASET mat_Rule03 (level1)     IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"    IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"  END  \"Check relative occurrence of value 'high'\"  IF z1 > total * 0.1 THEN rc := 1 END  RETURN rc",
      "severity": "error",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_ff308t2mwp",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1   DSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */ ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_7arizlomvw",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_02: cost + profit == turnover ",
      "severity": "error",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_jv3kqleuos",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover  rc := 1 tmp_turnover := EMPTY  FOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )     IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000    THEN rc := 0   END  END  RETURN rc",
      "severity": "error",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_oy99ti3vta",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_08: year_of_birth == persons$year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_u1bf2aeo3e",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter rc, counter  := {0,0}    FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )   counter := counter + 1       IF counter /= 1      THEN rc := 1     END  END RETURN rc",
      "severity": "warning",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_4z4fcp4exy",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier) DSgender= gender(identifier) {male, female} DSage =age-group(identifier) {child, adult, senior} /*  * gender: male, female  * age-groups: child, adult, senior  */ DSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,     on     (1 = 1)     return    (DSgender#gender as \"gender\",DSage #age-group as \"age-group\")) DSdiff := DSmerge setdiff DS[keep (gender, age-group)] DSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0 ",
      "severity": "information",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_1rh1heyzj3",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter rc, counter  := {0,0}    FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )    counter := counter + 1   END     IF counter /= members      THEN rc := 1     END  RETURN rc",
      "severity": "information",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_ayvxuvvwm8",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": " # def_ratio meani := mean(price_t)  + (price_tm1 - price_t)/length(price_t) ratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))  # rule_07 ratio >= 0.9 & ratio <= 1.1  ",
      "severity": "warning",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_d2iw21j5ad",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight  /*  * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)  *  *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN  *  x1                      1\t      +  *  x1.1          x1\t      2\t      +  *  x1.2          x1\t      2\t      +  *  x1.3          x1\t      2\t      +  *  x2                      1       +  *  x2.1          x2\t      2\t      +  */  DShierarchy := hierarchy(DS, level, \"HRC\", false) DScond := (DShierarchy = DS)[filter weight = \"false\"] DSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0 ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_swypsx0sfn",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1   DSout:=DS[filter season=\"out\"] DSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic     see page 42 VTL-part1 */ ",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_qbb23iy6mj",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier) /*  * gender: male, female  * age-groups: child, adult, senior  */ DScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"] DScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1] DSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0 ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_t7uhd5xa81",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head rc := {0} tmp_relation_to_head := EMPTY  IF relation_to_head ='4'  THEN        IF NOT spouse_id IN DATASET mat_Rule12 (person_id)     THEN rc := 1      ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )        IF tmp_relation_to_head /= '3'        THEN  rc := 1       END    END  END RETURN rc",
      "severity": "error",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_ehyrwi6aeh",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_06: if (season == \"out\") price_t == price_tmin1 & quantity_t ==      quantity_tmin1 ",
      "severity": "warning",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.933Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_mz597vvpi8",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total rc,z1,total := {0,0,0}  FOR EVERY s1  IN DATASET mat_Rule03 (level1)     IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"    IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"  END  \"Check relative occurrence of value 'high'\"  IF z1 > total * 0.1 THEN rc := 1 END  RETURN rc",
      "severity": "error",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_dxpx2nixm7",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0 ",
      "severity": "information",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_7nys32m4p7",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0 ",
      "severity": "information",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_qjgpyokam5",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_r7emmacx76",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count rc,tmp_undecided, tmp_count := {1,0,0} tmp_turnover := EMPTY    FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )     IF tmp_turnover  = EMPTY      THEN tmp_undecided := 1           ELSE       IF tmp_turnover > 1000000        THEN tmp_count :=  tmp_count + 1         END    END  END   IF tmp_undecided = 1 OR  tmp_count = 1   THEN rc := 0  END    RETURN rc",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_iqyunm3vfp",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_11: sum(business_id == 100 & turnover > 1e+06) == 1 ",
      "severity": "information",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_de33jzerbw",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head rc := {0} tmp_relation_to_head := EMPTY  IF relation_to_head ='4'  THEN        IF NOT spouse_id IN DATASET mat_Rule12 (person_id)     THEN rc := 1      ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )        IF tmp_relation_to_head /= '3'        THEN  rc := 1       END    END  END RETURN rc",
      "severity": "error",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_cbwx46bowi",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_10: any(business_id == 100 & turnover > 1e+06) ",
      "severity": "warning",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_dxc6qf8xmo",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_06: if (season == \"out\") price_t == price_tmin1 & quantity_t ==      quantity_tmin1 ",
      "severity": "warning",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_1e3t9nbz3h",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_08: year_of_birth == persons$year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_69xrfe52d4",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_04: (price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <=      0.5 * price_Ymin1 ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_mta7au5a3h",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_count: person_count :=  table(person$household_id)  # rule17: members == person_count[household_id] ",
      "severity": "warning",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_gjw889clla",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members DSpersons=household-id(identifier), person-id(identifier)   DSmerge:=merge (DShousehold as \"DSh\", DSpersons as \"DSp\"          on DSh#household-id=DSp#household-id,          return          (DSh#household-id as household-id,DSh#person-id as person-id,DSp#members as members))    DSout:= DSmerge[filter person-id < 1 or person-id>members][keep (household-id,members)][aggregate count (members)] = 0  DSdist:= DSmerge[rename (person-id) as \"p_id\" role \"measure\"][aggregate count_distinct (p_id)][filter p id <> members] [aggregate count (members)] = 0   DSr := (DSout and DSdist)  ",
      "severity": "error",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_tnso4xrvmu",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY) OR FUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5 OR FUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_1jc5tu9u4z",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc rc := 0  \"Haushalt = household\"  IF NOT  SEQUENCE (person_id , person , year_of_birth)   IN DATASET Haushalt (person_id , person , year_of_birth)  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_o18dm8xkcx",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1   DSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */ ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_1zoror91pu",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1   DSout:=DS[filter season=\"out\"] DSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic     see page 42 VTL-part1 */ ",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_4icx7rbjf9",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= business-id, cost, profit, turnover   DSr:= (DS#cost + DS#profit) = DS#turnover ",
      "severity": "error",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_c5415ug59r",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= business-id, cost, profit, turnover   DSr:= (DS#cost + DS#profit) = DS#turnover ",
      "severity": "error",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_53m30iig84",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1 rc := 0  LOOP FOR x1 := 1 UNTIL x1 > members      IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )       THEN rc := 1      END    END  RETURN rc",
      "severity": "information",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_xs6cckdyzo",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc rc := 0  \"Haushalt = household\"  IF NOT  SEQUENCE (person_id , person , year_of_birth)   IN DATASET Haushalt (person_id , person , year_of_birth)  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_l7t65l0fw2",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_02: cost + profit == turnover ",
      "severity": "error",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_z3wkurjvrj",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_counts: counts :=  table(gender, age_group)  # rule_13: all(counts <= 1) ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_ygz64ivhf7",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_rel_4: rel_4 :=  person_id[relation_to_head == 4]  # def_rel_3: spouse_of_rel_3 :=  spouse_id[relation_to_head == 3]  # rule_12: all(rel_4 %in% spouse_of_rel_3) ",
      "severity": "information",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_nd59f7s98y",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define parent: parents :=  sub(\"\\\\.[0-9]$\",\"\",level) is_parent := level %in% parents  # define child sums, by search for parent pattern. child_sums := sapply(level[is_parent], function(x){      sum(weight[grepl(paste0(\"^\",x,\".[0-9]$\"),level)])   }) # rule 16  all(weight[is_parent] == child_sums)  ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_6ico09solg",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count rc,tmp_undecided, tmp_count := {1,0,0} tmp_turnover := EMPTY    FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )     IF tmp_turnover  = EMPTY      THEN tmp_undecided := 1           ELSE       IF tmp_turnover > 1000000        THEN tmp_count :=  tmp_count + 1         END    END  END   IF tmp_undecided = 1 OR  tmp_count = 1   THEN rc := 0  END    RETURN rc",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_pmjykpm65n",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1 ",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_p47bnujkyb",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members DSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)  DScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]=          DShousehold)[filter members= \"false\"] DSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0  ",
      "severity": "error",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_1z27g71nmy",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight  /*  * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)  *  *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN  *  x1                      1\t      +  *  x1.1          x1\t      2\t      +  *  x1.2          x1\t      2\t      +  *  x1.3          x1\t      2\t      +  *  x2                      1       +  *  x2.1          x2\t      2\t      +  */  DShierarchy := hierarchy(DS, level, \"HRC\", false) DScond := (DShierarchy = DS)[filter weight = \"false\"] DSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0 ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_11rva9w3hq",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define vector with T/F value for each household test := sapply(1:length(household_id), function(i){   hhid <- household_id[i]   all(1:members[i] %in% persons$person_id[persons$household_id == hhid]) })  # rule must hold for all households all(test)  ",
      "severity": "error",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_rc5uq2vt8m",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover  rc := 1 tmp_turnover := EMPTY  FOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )     IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000    THEN rc := 0   END  END  RETURN rc",
      "severity": "error",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_7t363zkv93",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1 rc := 0  LOOP FOR x1 := 1 UNTIL x1 > members      IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )       THEN rc := 1      END    END  RETURN rc",
      "severity": "information",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_o6suykaa1y",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1 ",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_epmsp3jjlo",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members DSpersons=household-id(identifier), person-id(identifier)   DSmerge:=merge (DShousehold as \"DSh\", DSpersons as \"DSp\"          on DSh#household-id=DSp#household-id,          return          (DSh#household-id as household-id,DSh#person-id as person-id,DSp#members as members))    DSout:= DSmerge[filter person-id < 1 or person-id>members][keep (household-id,members)][aggregate count (members)] = 0  DSdist:= DSmerge[rename (person-id) as \"p_id\" role \"measure\"][aggregate count_distinct (p_id)][filter p id <> members] [aggregate count (members)] = 0   DSr := (DSout and DSdist)  ",
      "severity": "error",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_a8r78mn7y8",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc rc := 0  \"Haushalt = household\"  IF NOT  SEQUENCE (person_id , person , year_of_birth)   IN DATASET Haushalt (person_id , person , year_of_birth)  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_0sstwjuieb",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,     male_child, female_child, male_adult, female_adult, male_senior, female_senior rc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}    FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)    IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END    IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END    IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END    END     IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0       THEN rc := 1     END   RETURN rc",
      "severity": "error",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_xyf7bqpqj4",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_01: hours_worked >= 1 & hours_worked <= 80 ",
      "severity": "warning",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_g3d2dwfbeo",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}  \"Count totals SP2 and SP3 across all records\"   FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)           counter := counter + 1           s_t   := s_t + t           s_tm1 := s_tm1 + tm1    END  \"Evaluate result\"  IF counter > 0    THEN      \"Compute previous average\"     d_t       := s_t   / counter     d_tm1     := s_tm1 / counter \t     \"Compute new average\"     d_t_neu := (s_t - price_t + price_tm1) / counter      \"Compute relative size of new average\"      DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)    \"Check\"   IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)    THEN rc := 1   END  END    RETURN rc",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_qotsk96ju3",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_15: postcode ~ city ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_1ywxs8zb2g",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0 ",
      "severity": "information",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_r0q4xwgour",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_01: hours_worked >= 1 & hours_worked <= 80 ",
      "severity": "warning",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_4t8dvbqjpj",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_03: counts :=  table(level)  # rule_03: counts[\"high\"] < 0.1 * sum(counts) ",
      "severity": "information",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_3qlpthlzru",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_03: counts :=  table(level)  # rule_03: counts[\"high\"] < 0.1 * sum(counts) ",
      "severity": "information",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_7vkclmn7hm",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid rc,tmp_decided, tmp_invalid := {0,0,0} tmp_age := EMPTY FOR EVERY tmp_age IN DATASET mat_Rule09 (age)     IF tmp_age  = EMPTY      THEN tmp_decided := 1           ELSE       IF NOT tmp_age  IN SEQUENCE (0++113)        THEN tmp_invalid := 1         END    END END  IF tmp_decided = 0 AND  tmp_invalid = 1  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_g79lui0h37",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}  \"Count totals SP2 and SP3 across all records\"   FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)           counter := counter + 1           s_t   := s_t + t           s_tm1 := s_tm1 + tm1    END  \"Evaluate result\"  IF counter > 0    THEN      \"Compute previous average\"     d_t       := s_t   / counter     d_tm1     := s_tm1 / counter \t     \"Compute new average\"     d_t_neu := (s_t - price_t + price_tm1) / counter      \"Compute relative size of new average\"      DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)    \"Check\"   IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)    THEN rc := 1   END  END    RETURN rc",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_k9wal55q42",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,     male_child, female_child, male_adult, female_adult, male_senior, female_senior rc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}    FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)    IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END    IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END    IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END    END     IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0       THEN rc := 1     END   RETURN rc",
      "severity": "error",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_jtr1iz9m0g",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of   DSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"   on (DSgp#person-id= DSgc# grandchild_of), return (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")   DSr:= (DSmerge#gp_age-28) >= DSmerge#age  DSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]  ",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_j0dtudw05w",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)   DScount := DS[calc 1 as msr_count role \"MEASURE\"] DSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] = DScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)] ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_kzce01d8k0",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier) DSgender= gender(identifier) {male, female} DSage =age-group(identifier) {child, adult, senior} /*  * gender: male, female  * age-groups: child, adult, senior  */ DSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,     on     (1 = 1)     return    (DSgender#gender as \"gender\",DSage #age-group as \"age-group\")) DSdiff := DSmerge setdiff DS[keep (gender, age-group)] DSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0 ",
      "severity": "information",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_e1dpyizzab",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier) DSgender= gender(identifier) {male, female} DSage =age-group(identifier) {child, adult, senior} /*  * gender: male, female  * age-groups: child, adult, senior  */ DSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,     on     (1 = 1)     return    (DSgender#gender as \"gender\",DSage #age-group as \"age-group\")) DSdiff := DSmerge setdiff DS[keep (gender, age-group)] DSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0 ",
      "severity": "information",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_1ik1f8u0r8",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count rc,tmp_undecided, tmp_count := {1,0,0} tmp_turnover := EMPTY    FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )     IF tmp_turnover  = EMPTY      THEN tmp_undecided := 1           ELSE       IF tmp_turnover > 1000000        THEN tmp_count :=  tmp_count + 1         END    END  END   IF tmp_undecided = 1 OR  tmp_count = 1   THEN rc := 0  END    RETURN rc",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_fzvnihnilp",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1 ",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_zcajqgkkxn",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total rc,z1,total := {0,0,0}  FOR EVERY s1  IN DATASET mat_Rule03 (level1)     IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"    IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"  END  \"Check relative occurrence of value 'high'\"  IF z1 > total * 0.1 THEN rc := 1 END  RETURN rc",
      "severity": "error",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_8r9blf6v9x",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0 ",
      "severity": "information",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_4o81dnvhdi",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked  DSr:= DS#hours_worked between 1 and 80 /* In case a value in hours_worked is NULL the value returned will be NULL */ . ",
      "severity": "information",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_t0eqy216dx",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_15i8888myf",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)   DScount := DS[calc 1 as msr_count role \"MEASURE\"] DSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] = DScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)] ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_tgznlxra4y",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_11: sum(business_id == 100 & turnover > 1e+06) == 1 ",
      "severity": "information",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_ovwljbmfw1",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight  /*  * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)  *  *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN  *  x1                      1\t      +  *  x1.1          x1\t      2\t      +  *  x1.2          x1\t      2\t      +  *  x1.3          x1\t      2\t      +  *  x2                      1       +  *  x2.1          x2\t      2\t      +  */  DShierarchy := hierarchy(DS, level, \"HRC\", false) DScond := (DShierarchy = DS)[filter weight = \"false\"] DSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0 ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_xf7qg98bw5",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_09: all(age >= 0 & age <= 113) ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_wv6cnfzo1s",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), spouse-id, relation_to_head  DSfilter := DS[filter relation_to_head = 4] DSmerge := merge(DS \"DSx\",DS \"DSy\",     on     (DSy#spouse-id = DSx#person-id and DSy#relation_to_head = 3 and DSx#relation_to_head = 4)     return     (DSx#person-id as \"person-id\"))  DSnot_exists := DSfilter not_exists_in DSmerge  DScount := DSnot_exists[calc 1 as \"id\" role \"identifier\"][keep (id, person_id)][aggregate count (person_id)] = 0 ",
      "severity": "warning",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_rkydrjue7b",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule 14 all(table(gender, age_group) >= 1) &    all(c(\"male\", \"female\") %in% gender) &   all(c(\"child\",\"adult\",\"senior\") %in% age_group) ",
      "severity": "error",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_4gci99tdqe",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age tmp_age := EMPTY    tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)  IF tmp_age - 28 < age  THEN rc := 1 END   RETURN rc",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_tdqvnwd2fx",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_04: (price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <=      0.5 * price_Ymin1 ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_f2w7enrias",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)   DScount := DS[calc 1 as msr_count role \"MEASURE\"] DSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] = DScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)] ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_niq62tngca",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count rc,tmp_undecided, tmp_count := {1,0,0} tmp_turnover := EMPTY    FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )     IF tmp_turnover  = EMPTY      THEN tmp_undecided := 1           ELSE       IF tmp_turnover > 1000000        THEN tmp_count :=  tmp_count + 1         END    END  END   IF tmp_undecided = 1 OR  tmp_count = 1   THEN rc := 0  END    RETURN rc",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_es29nwvnpi",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members DSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)  DScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]=          DShousehold)[filter members= \"false\"] DSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0  ",
      "severity": "error",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_ymz099hq9w",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit rc,tmp_sum,hit  := {0,0,0}  tmp_AnzSst := FUNCTION LENGTH (level)  IF tmp_AnzSst IN SEQUENCE  (1,3)  THEN     FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )     IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND                            FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END     IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND                            FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END   END    \"Check\"   IF tmp_sum /= weight AND hit = 1    THEN rc := 1   END  END  RETURN rc",
      "severity": "error",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_b8p6hbj8zu",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= business-id, cost, profit, turnover   DSr:= (DS#cost + DS#profit) = DS#turnover ",
      "severity": "error",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_kxz31scyj7",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_06: if (season == \"out\") price_t == price_tmin1 & quantity_t ==      quantity_tmin1 ",
      "severity": "warning",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_0a7accfcfc",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1 rc := 0  LOOP FOR x1 := 1 UNTIL x1 > members      IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )       THEN rc := 1      END    END  RETURN rc",
      "severity": "information",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_igk43aj1hd",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head rc := {0} tmp_relation_to_head := EMPTY  IF relation_to_head ='4'  THEN        IF NOT spouse_id IN DATASET mat_Rule12 (person_id)     THEN rc := 1      ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )        IF tmp_relation_to_head /= '3'        THEN  rc := 1       END    END  END RETURN rc",
      "severity": "error",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_no26g58zzi",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)   DScount := DS[calc 1 as msr_count role \"MEASURE\"] DSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] = DScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)] ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_npppmbhq9d",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc rc := 0  \"Haushalt = household\"  IF NOT  SEQUENCE (person_id , person , year_of_birth)   IN DATASET Haushalt (person_id , person , year_of_birth)  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_4dkysrjejl",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_10: any(business_id == 100 & turnover > 1e+06) ",
      "severity": "warning",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_50xmfgcc60",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1   DSout:=DS[filter season=\"out\"] DSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic     see page 42 VTL-part1 */ ",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_webvneukio",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter rc, counter  := {0,0}    FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )    counter := counter + 1   END     IF counter /= members      THEN rc := 1     END  RETURN rc",
      "severity": "information",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_c8u80zbxt1",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define vector with T/F value for each household test := sapply(1:length(household_id), function(i){   hhid <- household_id[i]   all(1:members[i] %in% persons$person_id[persons$household_id == hhid]) })  # rule must hold for all households all(test)  ",
      "severity": "error",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_v6kz59t3xr",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter rc, counter  := {0,0}    FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )    counter := counter + 1   END     IF counter /= members      THEN rc := 1     END  RETURN rc",
      "severity": "information",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_yi6ndpm71w",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_counts: counts :=  table(gender, age_group)  # rule_13: all(counts <= 1) ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_xbtt48dn4y",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_08: year_of_birth == persons$year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_xwd5irb0n0",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age tmp_age := EMPTY    tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)  IF tmp_age - 28 < age  THEN rc := 1 END   RETURN rc",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_6v5976lj9b",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of   DSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"   on (DSgp#person-id= DSgc# grandchild_of), return (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")   DSr:= (DSmerge#gp_age-28) >= DSmerge#age  DSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]  ",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_2fl6vnzjvx",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_06: if (season == \"out\") price_t == price_tmin1 & quantity_t ==      quantity_tmin1 ",
      "severity": "warning",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_oobtpx3q6d",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "turnover /= cost + profit",
      "severity": "information",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_tee5fam191",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age tmp_age := EMPTY    tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)  IF tmp_age - 28 < age  THEN rc := 1 END   RETURN rc",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_yjmgfiezln",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define vector with T/F value for each household test := sapply(1:length(household_id), function(i){   hhid <- household_id[i]   all(1:members[i] %in% persons$person_id[persons$household_id == hhid]) })  # rule must hold for all households all(test)  ",
      "severity": "error",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_20ih9ccnfk",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter rc, counter  := {0,0}    FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )    counter := counter + 1   END     IF counter /= members      THEN rc := 1     END  RETURN rc",
      "severity": "information",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_icp9h9vykn",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total rc,z1,total := {0,0,0}  FOR EVERY s1  IN DATASET mat_Rule03 (level1)     IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"    IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"  END  \"Check relative occurrence of value 'high'\"  IF z1 > total * 0.1 THEN rc := 1 END  RETURN rc",
      "severity": "error",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_i3zvcrjrzk",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_counts: counts :=  table(gender, age_group)  # rule_13: all(counts <= 1) ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_2c4ffxp95h",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_01: hours_worked >= 1 & hours_worked <= 80 ",
      "severity": "warning",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_p2qf30mcpw",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_count: person_count :=  table(person$household_id)  # rule17: members == person_count[household_id] ",
      "severity": "warning",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_4qumuohsd0",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": " # def_ratio meani := mean(price_t)  + (price_tm1 - price_t)/length(price_t) ratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))  # rule_07 ratio >= 0.9 & ratio <= 1.1  ",
      "severity": "warning",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_k6pk09mxuf",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), spouse-id, relation_to_head  DSfilter := DS[filter relation_to_head = 4] DSmerge := merge(DS \"DSx\",DS \"DSy\",     on     (DSy#spouse-id = DSx#person-id and DSy#relation_to_head = 3 and DSx#relation_to_head = 4)     return     (DSx#person-id as \"person-id\"))  DSnot_exists := DSfilter not_exists_in DSmerge  DScount := DSnot_exists[calc 1 as \"id\" role \"identifier\"][keep (id, person_id)][aggregate count (person_id)] = 0 ",
      "severity": "warning",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_ifj3eygcr4",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier) /*  * gender: male, female  * age-groups: child, adult, senior  */ DScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"] DScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1] DSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0 ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_350mlpeth6",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]  DScond:= DScalc[filter age between 0 and 113]  DSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]  ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_1ssns7rqyl",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_j00cazslot",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=level    DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"] DSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1)  ",
      "severity": "warning",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_hbus3v1tlb",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier) DSgender= gender(identifier) {male, female} DSage =age-group(identifier) {child, adult, senior} /*  * gender: male, female  * age-groups: child, adult, senior  */ DSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,     on     (1 = 1)     return    (DSgender#gender as \"gender\",DSage #age-group as \"age-group\")) DSdiff := DSmerge setdiff DS[keep (gender, age-group)] DSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0 ",
      "severity": "information",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_hh34ih2icp",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier) DSgender= gender(identifier) {male, female} DSage =age-group(identifier) {child, adult, senior} /*  * gender: male, female  * age-groups: child, adult, senior  */ DSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,     on     (1 = 1)     return    (DSgender#gender as \"gender\",DSage #age-group as \"age-group\")) DSdiff := DSmerge setdiff DS[keep (gender, age-group)] DSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0 ",
      "severity": "information",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_8zn9gu74g3",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_03: counts :=  table(level)  # rule_03: counts[\"high\"] < 0.1 * sum(counts) ",
      "severity": "information",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_gp3le7fy7c",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "turnover /= cost + profit",
      "severity": "information",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_2jz51on417",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head rc := {0} tmp_relation_to_head := EMPTY  IF relation_to_head ='4'  THEN        IF NOT spouse_id IN DATASET mat_Rule12 (person_id)     THEN rc := 1      ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )        IF tmp_relation_to_head /= '3'        THEN  rc := 1       END    END  END RETURN rc",
      "severity": "error",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_4ip48zj20d",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define parent: parents :=  sub(\"\\\\.[0-9]$\",\"\",level) is_parent := level %in% parents  # define child sums, by search for parent pattern. child_sums := sapply(level[is_parent], function(x){      sum(weight[grepl(paste0(\"^\",x,\".[0-9]$\"),level)])   }) # rule 16  all(weight[is_parent] == child_sums)  ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_vu9qzh4f8o",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier) DSgender= gender(identifier) {male, female} DSage =age-group(identifier) {child, adult, senior} /*  * gender: male, female  * age-groups: child, adult, senior  */ DSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,     on     (1 = 1)     return    (DSgender#gender as \"gender\",DSage #age-group as \"age-group\")) DSdiff := DSmerge setdiff DS[keep (gender, age-group)] DSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0 ",
      "severity": "information",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_kyb9o5yb18",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define vector with T/F value for each household test := sapply(1:length(household_id), function(i){   hhid <- household_id[i]   all(1:members[i] %in% persons$person_id[persons$household_id == hhid]) })  # rule must hold for all households all(test)  ",
      "severity": "error",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_8ds3wy9hwz",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1 rc := 0  LOOP FOR x1 := 1 UNTIL x1 > members      IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )       THEN rc := 1      END    END  RETURN rc",
      "severity": "information",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_bxpqvuv0ci",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_08: year_of_birth == persons$year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_qoyxzqfng4",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total rc,z1,total := {0,0,0}  FOR EVERY s1  IN DATASET mat_Rule03 (level1)     IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"    IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"  END  \"Check relative occurrence of value 'high'\"  IF z1 > total * 0.1 THEN rc := 1 END  RETURN rc",
      "severity": "error",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_3srutp1usp",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}  \"Count totals SP2 and SP3 across all records\"   FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)           counter := counter + 1           s_t   := s_t + t           s_tm1 := s_tm1 + tm1    END  \"Evaluate result\"  IF counter > 0    THEN      \"Compute previous average\"     d_t       := s_t   / counter     d_tm1     := s_tm1 / counter \t     \"Compute new average\"     d_t_neu := (s_t - price_t + price_tm1) / counter      \"Compute relative size of new average\"      DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)    \"Check\"   IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)    THEN rc := 1   END  END    RETURN rc",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_2dvuukiyn4",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight  /*  * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)  *  *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN  *  x1                      1\t      +  *  x1.1          x1\t      2\t      +  *  x1.2          x1\t      2\t      +  *  x1.3          x1\t      2\t      +  *  x2                      1       +  *  x2.1          x2\t      2\t      +  */  DShierarchy := hierarchy(DS, level, \"HRC\", false) DScond := (DShierarchy = DS)[filter weight = \"false\"] DSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0 ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_on25xapv6p",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), spouse-id, relation_to_head  DSfilter := DS[filter relation_to_head = 4] DSmerge := merge(DS \"DSx\",DS \"DSy\",     on     (DSy#spouse-id = DSx#person-id and DSy#relation_to_head = 3 and DSx#relation_to_head = 4)     return     (DSx#person-id as \"person-id\"))  DSnot_exists := DSfilter not_exists_in DSmerge  DScount := DSnot_exists[calc 1 as \"id\" role \"identifier\"][keep (id, person_id)][aggregate count (person_id)] = 0 ",
      "severity": "warning",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_iiuwvngzg9",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define vector with T/F value for each household test := sapply(1:length(household_id), function(i){   hhid <- household_id[i]   all(1:members[i] %in% persons$person_id[persons$household_id == hhid]) })  # rule must hold for all households all(test)  ",
      "severity": "error",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_o5jn01yevd",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age tmp_age := EMPTY    tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)  IF tmp_age - 28 < age  THEN rc := 1 END   RETURN rc",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_hhfghr3yii",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_11: sum(business_id == 100 & turnover > 1e+06) == 1 ",
      "severity": "information",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_338c9olzo3",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define vector with T/F value for each household test := sapply(1:length(household_id), function(i){   hhid <- household_id[i]   all(1:members[i] %in% persons$person_id[persons$household_id == hhid]) })  # rule must hold for all households all(test)  ",
      "severity": "error",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_qjou4vqu4q",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)] DSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)] DSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)] DScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)] DSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1 ",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_tge0pk0eky",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc rc := 0  \"Haushalt = household\"  IF NOT  SEQUENCE (person_id , person , year_of_birth)   IN DATASET Haushalt (person_id , person , year_of_birth)  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_c4xlbthw5x",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1   DSout:=DS[filter season=\"out\"] DSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic     see page 42 VTL-part1 */ ",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_cwlln34op6",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_rel_4: rel_4 :=  person_id[relation_to_head == 4]  # def_rel_3: spouse_of_rel_3 :=  spouse_id[relation_to_head == 3]  # rule_12: all(rel_4 %in% spouse_of_rel_3) ",
      "severity": "information",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_2do87vmeli",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_age_gp: age_gp :=  age[match(grandchild_of, person_id)]  # rule_04: age_gp - 28 >= age ",
      "severity": "error",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_y1pk1t4dm7",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1 ",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_8az3y8786h",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), spouse-id, relation_to_head  DSfilter := DS[filter relation_to_head = 4] DSmerge := merge(DS \"DSx\",DS \"DSy\",     on     (DSy#spouse-id = DSx#person-id and DSy#relation_to_head = 3 and DSx#relation_to_head = 4)     return     (DSx#person-id as \"person-id\"))  DSnot_exists := DSfilter not_exists_in DSmerge  DScount := DSnot_exists[calc 1 as \"id\" role \"identifier\"][keep (id, person_id)][aggregate count (person_id)] = 0 ",
      "severity": "warning",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_tg4ejdvrv7",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_rel_4: rel_4 :=  person_id[relation_to_head == 4]  # def_rel_3: spouse_of_rel_3 :=  spouse_id[relation_to_head == 3]  # rule_12: all(rel_4 %in% spouse_of_rel_3) ",
      "severity": "information",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_8vteqi06wc",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_count: person_count :=  table(person$household_id)  # rule17: members == person_count[household_id] ",
      "severity": "warning",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_h6ky6xhzck",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_08: year_of_birth == persons$year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_qk9iumx5mg",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_age_gp: age_gp :=  age[match(grandchild_of, person_id)]  # rule_04: age_gp - 28 >= age ",
      "severity": "error",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_q51fhwhow4",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)   DScount := DS[calc 1 as msr_count role \"MEASURE\"] DSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] = DScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)] ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_6ky2c3a6zs",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head rc := {0} tmp_relation_to_head := EMPTY  IF relation_to_head ='4'  THEN        IF NOT spouse_id IN DATASET mat_Rule12 (person_id)     THEN rc := 1      ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )        IF tmp_relation_to_head /= '3'        THEN  rc := 1       END    END  END RETURN rc",
      "severity": "error",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_080smx400h",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "turnover /= cost + profit",
      "severity": "information",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_z8tm81bn5u",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head rc := {0} tmp_relation_to_head := EMPTY  IF relation_to_head ='4'  THEN        IF NOT spouse_id IN DATASET mat_Rule12 (person_id)     THEN rc := 1      ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )        IF tmp_relation_to_head /= '3'        THEN  rc := 1       END    END  END RETURN rc",
      "severity": "error",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_9n958xfm6q",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}  \"Count totals SP2 and SP3 across all records\"   FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)           counter := counter + 1           s_t   := s_t + t           s_tm1 := s_tm1 + tm1    END  \"Evaluate result\"  IF counter > 0    THEN      \"Compute previous average\"     d_t       := s_t   / counter     d_tm1     := s_tm1 / counter \t     \"Compute new average\"     d_t_neu := (s_t - price_t + price_tm1) / counter      \"Compute relative size of new average\"      DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)    \"Check\"   IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)    THEN rc := 1   END  END    RETURN rc",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_vv42z7vtry",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter rc, counter  := {0,0}    FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )    counter := counter + 1   END     IF counter /= members      THEN rc := 1     END  RETURN rc",
      "severity": "information",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_1zmn89pj8d",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc rc := 0  \"Haushalt = household\"  IF NOT  SEQUENCE (person_id , person , year_of_birth)   IN DATASET Haushalt (person_id , person , year_of_birth)  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_g8ni99z5hu",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_06: if (season == \"out\") price_t == price_tmin1 & quantity_t ==      quantity_tmin1 ",
      "severity": "warning",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_f2thdzd78m",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1 rc := 0  LOOP FOR x1 := 1 UNTIL x1 > members      IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )       THEN rc := 1      END    END  RETURN rc",
      "severity": "information",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_8t7a93mbmc",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1 ",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_9u3lockkl3",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_08: year_of_birth == persons$year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_x8pekomvcv",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover  rc := 1 tmp_turnover := EMPTY  FOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )     IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000    THEN rc := 0   END  END  RETURN rc",
      "severity": "error",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_8c2cfhgvl0",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked  DSr:= DS#hours_worked between 1 and 80 /* In case a value in hours_worked is NULL the value returned will be NULL */ . ",
      "severity": "information",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_53wuvhzo4j",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1   DSout:=DS[filter season=\"out\"] DSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic     see page 42 VTL-part1 */ ",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_p5lykkf6qn",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define vector with T/F value for each household test := sapply(1:length(household_id), function(i){   hhid <- household_id[i]   all(1:members[i] %in% persons$person_id[persons$household_id == hhid]) })  # rule must hold for all households all(test)  ",
      "severity": "error",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_17pb8pfye1",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}  \"Count totals SP2 and SP3 across all records\"   FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)           counter := counter + 1           s_t   := s_t + t           s_tm1 := s_tm1 + tm1    END  \"Evaluate result\"  IF counter > 0    THEN      \"Compute previous average\"     d_t       := s_t   / counter     d_tm1     := s_tm1 / counter \t     \"Compute new average\"     d_t_neu := (s_t - price_t + price_tm1) / counter      \"Compute relative size of new average\"      DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)    \"Check\"   IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)    THEN rc := 1   END  END    RETURN rc",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_eq9084a2of",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_03: counts :=  table(level)  # rule_03: counts[\"high\"] < 0.1 * sum(counts) ",
      "severity": "information",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_1znlynr841",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "turnover /= cost + profit",
      "severity": "information",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_2g49l8zv55",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_04: (price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <=      0.5 * price_Ymin1 ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_xhjev2i3ih",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total rc,z1,total := {0,0,0}  FOR EVERY s1  IN DATASET mat_Rule03 (level1)     IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"    IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"  END  \"Check relative occurrence of value 'high'\"  IF z1 > total * 0.1 THEN rc := 1 END  RETURN rc",
      "severity": "error",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_1g7nvieush",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter rc, counter  := {0,0}    FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )   counter := counter + 1       IF counter /= 1      THEN rc := 1     END  END RETURN rc",
      "severity": "warning",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_divihqiojb",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]  DScond:= DScalc[filter age between 0 and 113]  DSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]  ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_0obu779k0b",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1   DSout:=DS[filter season=\"out\"] DSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic     see page 42 VTL-part1 */ ",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_v68yt6b0qo",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count rc,tmp_undecided, tmp_count := {1,0,0} tmp_turnover := EMPTY    FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )     IF tmp_turnover  = EMPTY      THEN tmp_undecided := 1           ELSE       IF tmp_turnover > 1000000        THEN tmp_count :=  tmp_count + 1         END    END  END   IF tmp_undecided = 1 OR  tmp_count = 1   THEN rc := 0  END    RETURN rc",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_31dkta1hqr",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover  rc := 1 tmp_turnover := EMPTY  FOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )     IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000    THEN rc := 0   END  END  RETURN rc",
      "severity": "error",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_fkppd5i4zq",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of   DSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"   on (DSgp#person-id= DSgc# grandchild_of), return (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")   DSr:= (DSmerge#gp_age-28) >= DSmerge#age  DSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]  ",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_r0axgubot1",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1 ",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_2mn11qmecd",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_rel_4: rel_4 :=  person_id[relation_to_head == 4]  # def_rel_3: spouse_of_rel_3 :=  spouse_id[relation_to_head == 3]  # rule_12: all(rel_4 %in% spouse_of_rel_3) ",
      "severity": "information",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_2vurdl62ih",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]  DScond:= DScalc[filter age between 0 and 113]  DSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]  ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_h6kpl9toll",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover  rc := 1 tmp_turnover := EMPTY  FOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )     IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000    THEN rc := 0   END  END  RETURN rc",
      "severity": "error",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_43z1438iog",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define parent: parents :=  sub(\"\\\\.[0-9]$\",\"\",level) is_parent := level %in% parents  # define child sums, by search for parent pattern. child_sums := sapply(level[is_parent], function(x){      sum(weight[grepl(paste0(\"^\",x,\".[0-9]$\"),level)])   }) # rule 16  all(weight[is_parent] == child_sums)  ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_kpm2z9khi7",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_03: counts :=  table(level)  # rule_03: counts[\"high\"] < 0.1 * sum(counts) ",
      "severity": "information",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_y77tlu4mue",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_10: any(business_id == 100 & turnover > 1e+06) ",
      "severity": "warning",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_5dx1eimk1g",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head rc := {0} tmp_relation_to_head := EMPTY  IF relation_to_head ='4'  THEN        IF NOT spouse_id IN DATASET mat_Rule12 (person_id)     THEN rc := 1      ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )        IF tmp_relation_to_head /= '3'        THEN  rc := 1       END    END  END RETURN rc",
      "severity": "error",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_ggmaiwkq28",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "turnover /= cost + profit",
      "severity": "information",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_9t4petxlc9",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1   DSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */ ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_d15kcfwh88",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_city, counter rc, counter  := {0,0}    FOR EVERY tmp_city IN DATASET mat_Rule15 (postcode = postcode ; city )    IF city /= tmp_city      THEN rc := 1     END  END RETURN rc",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_swx8dweav4",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count rc,tmp_undecided, tmp_count := {1,0,0} tmp_turnover := EMPTY    FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )     IF tmp_turnover  = EMPTY      THEN tmp_undecided := 1           ELSE       IF tmp_turnover > 1000000        THEN tmp_count :=  tmp_count + 1         END    END  END   IF tmp_undecided = 1 OR  tmp_count = 1   THEN rc := 0  END    RETURN rc",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_hnssxmeswd",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age tmp_age := EMPTY    tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)  IF tmp_age - 28 < age  THEN rc := 1 END   RETURN rc",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_ex75g6bqsl",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_04: (price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <=      0.5 * price_Ymin1 ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_q2lkhckyx6",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_age_gp: age_gp :=  age[match(grandchild_of, person_id)]  # rule_04: age_gp - 28 >= age ",
      "severity": "error",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_npcweexbjv",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of   DSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"   on (DSgp#person-id= DSgc# grandchild_of), return (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")   DSr:= (DSmerge#gp_age-28) >= DSmerge#age  DSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]  ",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_a0qfggbt8o",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_08: year_of_birth == persons$year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_5hzsehcbvz",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1   DSout:=DS[filter season=\"out\"] DSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic     see page 42 VTL-part1 */ ",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_z3onduatp1",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter rc, counter  := {0,0}    FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )    counter := counter + 1   END     IF counter /= members      THEN rc := 1     END  RETURN rc",
      "severity": "information",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_nvecamtuga",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_counts: counts :=  table(gender, age_group)  # rule_13: all(counts <= 1) ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_w43nw3wpq8",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_01: hours_worked >= 1 & hours_worked <= 80 ",
      "severity": "warning",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_c4emecvxk9",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_01: hours_worked >= 1 & hours_worked <= 80 ",
      "severity": "warning",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_wbft1c8vo2",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc rc := 0  \"Haushalt = household\"  IF NOT  SEQUENCE (person_id , person , year_of_birth)   IN DATASET Haushalt (person_id , person , year_of_birth)  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_f1fijmi1ia",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY) OR FUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5 OR FUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_d8a8vmoja0",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]  DScond:= DScalc[filter age between 0 and 113]  DSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]  ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_tvnzez4jh2",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head rc := {0} tmp_relation_to_head := EMPTY  IF relation_to_head ='4'  THEN        IF NOT spouse_id IN DATASET mat_Rule12 (person_id)     THEN rc := 1      ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )        IF tmp_relation_to_head /= '3'        THEN  rc := 1       END    END  END RETURN rc",
      "severity": "error",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_wip9vqvczn",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), spouse-id, relation_to_head  DSfilter := DS[filter relation_to_head = 4] DSmerge := merge(DS \"DSx\",DS \"DSy\",     on     (DSy#spouse-id = DSx#person-id and DSy#relation_to_head = 3 and DSx#relation_to_head = 4)     return     (DSx#person-id as \"person-id\"))  DSnot_exists := DSfilter not_exists_in DSmerge  DScount := DSnot_exists[calc 1 as \"id\" role \"identifier\"][keep (id, person_id)][aggregate count (person_id)] = 0 ",
      "severity": "warning",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_2phe3pcrbx",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit rc,tmp_sum,hit  := {0,0,0}  tmp_AnzSst := FUNCTION LENGTH (level)  IF tmp_AnzSst IN SEQUENCE  (1,3)  THEN     FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )     IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND                            FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END     IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND                            FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END   END    \"Check\"   IF tmp_sum /= weight AND hit = 1    THEN rc := 1   END  END  RETURN rc",
      "severity": "error",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_4k7nf2hf74",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_counts: counts :=  table(gender, age_group)  # rule_13: all(counts <= 1) ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_9yykuaabvz",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter rc, counter  := {0,0}    FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )   counter := counter + 1       IF counter /= 1      THEN rc := 1     END  END RETURN rc",
      "severity": "warning",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_d7ssazc9o4",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1 ",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_gv68m8n0oa",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier) /*  * gender: male, female  * age-groups: child, adult, senior  */ DScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"] DScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1] DSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0 ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_lgllfhedmj",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_09: all(age >= 0 & age <= 113) ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_fqxticyt09",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_count: person_count :=  table(person$household_id)  # rule17: members == person_count[household_id] ",
      "severity": "warning",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_2vdhxrrcvu",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}  \"Count totals SP2 and SP3 across all records\"   FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)           counter := counter + 1           s_t   := s_t + t           s_tm1 := s_tm1 + tm1    END  \"Evaluate result\"  IF counter > 0    THEN      \"Compute previous average\"     d_t       := s_t   / counter     d_tm1     := s_tm1 / counter \t     \"Compute new average\"     d_t_neu := (s_t - price_t + price_tm1) / counter      \"Compute relative size of new average\"      DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)    \"Check\"   IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)    THEN rc := 1   END  END    RETURN rc",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_4clwwi1ulw",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_rel_4: rel_4 :=  person_id[relation_to_head == 4]  # def_rel_3: spouse_of_rel_3 :=  spouse_id[relation_to_head == 3]  # rule_12: all(rel_4 %in% spouse_of_rel_3) ",
      "severity": "information",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_qhlq1mppqe",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=level    DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"] DSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1)  ",
      "severity": "warning",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_fil893yqb6",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_09: all(age >= 0 & age <= 113) ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_b9wp4rb5br",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1   DSout:=DS[filter season=\"out\"] DSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic     see page 42 VTL-part1 */ ",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_hzdpb5olvb",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_2vk1b85q4d",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count rc,tmp_undecided, tmp_count := {1,0,0} tmp_turnover := EMPTY    FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )     IF tmp_turnover  = EMPTY      THEN tmp_undecided := 1           ELSE       IF tmp_turnover > 1000000        THEN tmp_count :=  tmp_count + 1         END    END  END   IF tmp_undecided = 1 OR  tmp_count = 1   THEN rc := 0  END    RETURN rc",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_4agmjkk013",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_04: (price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <=      0.5 * price_Ymin1 ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_s8hpi6atpr",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_09: all(age >= 0 & age <= 113) ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_j8qm63999v",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), spouse-id, relation_to_head  DSfilter := DS[filter relation_to_head = 4] DSmerge := merge(DS \"DSx\",DS \"DSy\",     on     (DSy#spouse-id = DSx#person-id and DSy#relation_to_head = 3 and DSx#relation_to_head = 4)     return     (DSx#person-id as \"person-id\"))  DSnot_exists := DSfilter not_exists_in DSmerge  DScount := DSnot_exists[calc 1 as \"id\" role \"identifier\"][keep (id, person_id)][aggregate count (person_id)] = 0 ",
      "severity": "warning",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_d2euy749xo",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier) /*  * gender: male, female  * age-groups: child, adult, senior  */ DScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"] DScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1] DSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0 ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_lanimo22c0",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_counts: counts :=  table(gender, age_group)  # rule_13: all(counts <= 1) ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_g7efelp89c",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit rc,tmp_sum,hit  := {0,0,0}  tmp_AnzSst := FUNCTION LENGTH (level)  IF tmp_AnzSst IN SEQUENCE  (1,3)  THEN     FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )     IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND                            FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END     IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND                            FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END   END    \"Check\"   IF tmp_sum /= weight AND hit = 1    THEN rc := 1   END  END  RETURN rc",
      "severity": "error",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_01p9wjze4l",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_04: (price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <=      0.5 * price_Ymin1 ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_07mkcr8rsm",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of   DSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"   on (DSgp#person-id= DSgc# grandchild_of), return (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")   DSr:= (DSmerge#gp_age-28) >= DSmerge#age  DSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]  ",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_t7h95wcs64",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover  rc := 1 tmp_turnover := EMPTY  FOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )     IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000    THEN rc := 0   END  END  RETURN rc",
      "severity": "error",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_m1pjncrj9d",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_age_gp: age_gp :=  age[match(grandchild_of, person_id)]  # rule_04: age_gp - 28 >= age ",
      "severity": "error",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_m8ziz7dqf4",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_09: all(age >= 0 & age <= 113) ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_a1k0d0ye3z",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_03: counts :=  table(level)  # rule_03: counts[\"high\"] < 0.1 * sum(counts) ",
      "severity": "information",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_gndf5zfza5",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of   DSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"   on (DSgp#person-id= DSgc# grandchild_of), return (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")   DSr:= (DSmerge#gp_age-28) >= DSmerge#age  DSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]  ",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_fwfsmqpcr7",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter rc, counter  := {0,0}    FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )   counter := counter + 1       IF counter /= 1      THEN rc := 1     END  END RETURN rc",
      "severity": "warning",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_ymf1k85ddm",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked  DSr:= DS#hours_worked between 1 and 80 /* In case a value in hours_worked is NULL the value returned will be NULL */ . ",
      "severity": "information",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_6coodpe54e",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1   DSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */ ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_mqfhrolgv6",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,     male_child, female_child, male_adult, female_adult, male_senior, female_senior rc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}    FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)    IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END    IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END    IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END    END     IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0       THEN rc := 1     END   RETURN rc",
      "severity": "error",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_cegbm82s40",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= business-id, cost, profit, turnover   DSr:= (DS#cost + DS#profit) = DS#turnover ",
      "severity": "error",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_ocvj8n9i3h",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_09: all(age >= 0 & age <= 113) ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_bskxuwxzmv",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid rc,tmp_decided, tmp_invalid := {0,0,0} tmp_age := EMPTY FOR EVERY tmp_age IN DATASET mat_Rule09 (age)     IF tmp_age  = EMPTY      THEN tmp_decided := 1           ELSE       IF NOT tmp_age  IN SEQUENCE (0++113)        THEN tmp_invalid := 1         END    END END  IF tmp_decided = 0 AND  tmp_invalid = 1  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_f1crxvjmno",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_qhrhidwoh1",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of   DSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"   on (DSgp#person-id= DSgc# grandchild_of), return (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")   DSr:= (DSmerge#gp_age-28) >= DSmerge#age  DSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]  ",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_wnn196op2p",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_08: year_of_birth == persons$year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_l9p9qbfsi7",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_v7krg05mmr",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid rc,tmp_decided, tmp_invalid := {0,0,0} tmp_age := EMPTY FOR EVERY tmp_age IN DATASET mat_Rule09 (age)     IF tmp_age  = EMPTY      THEN tmp_decided := 1           ELSE       IF NOT tmp_age  IN SEQUENCE (0++113)        THEN tmp_invalid := 1         END    END END  IF tmp_decided = 0 AND  tmp_invalid = 1  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_qqa0nu4r6x",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members DSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)  DScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]=          DShousehold)[filter members= \"false\"] DSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0  ",
      "severity": "error",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_hgifwx4vns",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier) DSgender= gender(identifier) {male, female} DSage =age-group(identifier) {child, adult, senior} /*  * gender: male, female  * age-groups: child, adult, senior  */ DSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,     on     (1 = 1)     return    (DSgender#gender as \"gender\",DSage #age-group as \"age-group\")) DSdiff := DSmerge setdiff DS[keep (gender, age-group)] DSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0 ",
      "severity": "information",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_l005fr3p73",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover  rc := 1 tmp_turnover := EMPTY  FOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )     IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000    THEN rc := 0   END  END  RETURN rc",
      "severity": "error",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_7jv4s3lmlx",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover  rc := 1 tmp_turnover := EMPTY  FOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )     IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000    THEN rc := 0   END  END  RETURN rc",
      "severity": "error",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_vsl6sba3mi",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count rc,tmp_undecided, tmp_count := {1,0,0} tmp_turnover := EMPTY    FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )     IF tmp_turnover  = EMPTY      THEN tmp_undecided := 1           ELSE       IF tmp_turnover > 1000000        THEN tmp_count :=  tmp_count + 1         END    END  END   IF tmp_undecided = 1 OR  tmp_count = 1   THEN rc := 0  END    RETURN rc",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_5asb2iyeq8",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)] DSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)] DSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)] DScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)] DSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1 ",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_xk9yfi2zlf",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier) DSgender= gender(identifier) {male, female} DSage =age-group(identifier) {child, adult, senior} /*  * gender: male, female  * age-groups: child, adult, senior  */ DSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,     on     (1 = 1)     return    (DSgender#gender as \"gender\",DSage #age-group as \"age-group\")) DSdiff := DSmerge setdiff DS[keep (gender, age-group)] DSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0 ",
      "severity": "information",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_p1plgh2lbk",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight  /*  * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)  *  *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN  *  x1                      1\t      +  *  x1.1          x1\t      2\t      +  *  x1.2          x1\t      2\t      +  *  x1.3          x1\t      2\t      +  *  x2                      1       +  *  x2.1          x2\t      2\t      +  */  DShierarchy := hierarchy(DS, level, \"HRC\", false) DScond := (DShierarchy = DS)[filter weight = \"false\"] DSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0 ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_gwfsy3bh53",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count rc,tmp_undecided, tmp_count := {1,0,0} tmp_turnover := EMPTY    FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )     IF tmp_turnover  = EMPTY      THEN tmp_undecided := 1           ELSE       IF tmp_turnover > 1000000        THEN tmp_count :=  tmp_count + 1         END    END  END   IF tmp_undecided = 1 OR  tmp_count = 1   THEN rc := 0  END    RETURN rc",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_7klxp4yhyd",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define vector with T/F value for each household test := sapply(1:length(household_id), function(i){   hhid <- household_id[i]   all(1:members[i] %in% persons$person_id[persons$household_id == hhid]) })  # rule must hold for all households all(test)  ",
      "severity": "error",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_2itn5ddtp3",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier) /*  * gender: male, female  * age-groups: child, adult, senior  */ DScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"] DScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1] DSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0 ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_4shthngz8t",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked  DSr:= DS#hours_worked between 1 and 80 /* In case a value in hours_worked is NULL the value returned will be NULL */ . ",
      "severity": "information",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_toi4gmlkof",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit rc,tmp_sum,hit  := {0,0,0}  tmp_AnzSst := FUNCTION LENGTH (level)  IF tmp_AnzSst IN SEQUENCE  (1,3)  THEN     FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )     IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND                            FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END     IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND                            FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END   END    \"Check\"   IF tmp_sum /= weight AND hit = 1    THEN rc := 1   END  END  RETURN rc",
      "severity": "error",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_icyuk2lfh9",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_2ut7f6bswh",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_igv4pyddmi",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier) /*  * gender: male, female  * age-groups: child, adult, senior  */ DScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"] DScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1] DSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0 ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_tsdlbrppaf",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members DSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)  DScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]=          DShousehold)[filter members= \"false\"] DSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0  ",
      "severity": "error",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_3nuthuxt1p",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth DS_p= person-id(identifier),person, year_of_birth, gender   DSr:= DS_h#year_of_birth=DS_p#year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_lmyeoowbff",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,     male_child, female_child, male_adult, female_adult, male_senior, female_senior rc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}    FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)    IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END    IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END    IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END    END     IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0       THEN rc := 1     END   RETURN rc",
      "severity": "error",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_31t90numvf",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": " # def_ratio meani := mean(price_t)  + (price_tm1 - price_t)/length(price_t) ratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))  # rule_07 ratio >= 0.9 & ratio <= 1.1  ",
      "severity": "warning",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_90uux41ukq",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter rc, counter  := {0,0}    FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )    counter := counter + 1   END     IF counter /= members      THEN rc := 1     END  RETURN rc",
      "severity": "information",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_a46af0hxof",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_06: if (season == \"out\") price_t == price_tmin1 & quantity_t ==      quantity_tmin1 ",
      "severity": "warning",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_ic80p86mkk",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid rc,tmp_decided, tmp_invalid := {0,0,0} tmp_age := EMPTY FOR EVERY tmp_age IN DATASET mat_Rule09 (age)     IF tmp_age  = EMPTY      THEN tmp_decided := 1           ELSE       IF NOT tmp_age  IN SEQUENCE (0++113)        THEN tmp_invalid := 1         END    END END  IF tmp_decided = 0 AND  tmp_invalid = 1  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_kc6t346fyh",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1 ",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_45ijd1h7kv",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_08: year_of_birth == persons$year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_ii15h1jaqx",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]  DScond:= DScalc[filter age between 0 and 113]  DSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]  ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_ffyz2rel5o",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count rc,tmp_undecided, tmp_count := {1,0,0} tmp_turnover := EMPTY    FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )     IF tmp_turnover  = EMPTY      THEN tmp_undecided := 1           ELSE       IF tmp_turnover > 1000000        THEN tmp_count :=  tmp_count + 1         END    END  END   IF tmp_undecided = 1 OR  tmp_count = 1   THEN rc := 0  END    RETURN rc",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_mi2wz4wax6",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0 ",
      "severity": "information",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_aa6ky3xkuy",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_city, counter rc, counter  := {0,0}    FOR EVERY tmp_city IN DATASET mat_Rule15 (postcode = postcode ; city )    IF city /= tmp_city      THEN rc := 1     END  END RETURN rc",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_7y556ryfi9",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_fafhfkuokh",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)] DSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)] DSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)] DScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)] DSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1 ",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_0uvbcvsvux",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_count: person_count :=  table(person$household_id)  # rule17: members == person_count[household_id] ",
      "severity": "warning",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_qusv11fcnw",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_rel_4: rel_4 :=  person_id[relation_to_head == 4]  # def_rel_3: spouse_of_rel_3 :=  spouse_id[relation_to_head == 3]  # rule_12: all(rel_4 %in% spouse_of_rel_3) ",
      "severity": "information",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_xw5c9id9wo",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1 rc := 0  LOOP FOR x1 := 1 UNTIL x1 > members      IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )       THEN rc := 1      END    END  RETURN rc",
      "severity": "information",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_7qmffseon6",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked  DSr:= DS#hours_worked between 1 and 80 /* In case a value in hours_worked is NULL the value returned will be NULL */ . ",
      "severity": "information",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_w2wq8us1ln",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked  DSr:= DS#hours_worked between 1 and 80 /* In case a value in hours_worked is NULL the value returned will be NULL */ . ",
      "severity": "information",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_phfje71d0n",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY) OR FUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5 OR FUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_tuvi0921ob",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define parent: parents :=  sub(\"\\\\.[0-9]$\",\"\",level) is_parent := level %in% parents  # define child sums, by search for parent pattern. child_sums := sapply(level[is_parent], function(x){      sum(weight[grepl(paste0(\"^\",x,\".[0-9]$\"),level)])   }) # rule 16  all(weight[is_parent] == child_sums)  ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_adyb2abwwj",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier) /*  * gender: male, female  * age-groups: child, adult, senior  */ DScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"] DScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1] DSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0 ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_wmwa49qo10",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)   DScount := DS[calc 1 as msr_count role \"MEASURE\"] DSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] = DScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)] ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_j6344585m1",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_10: any(business_id == 100 & turnover > 1e+06) ",
      "severity": "warning",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_bn13ds2mgr",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]  DScond:= DScalc[filter age between 0 and 113]  DSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]  ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_ott451viwi",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_age_gp: age_gp :=  age[match(grandchild_of, person_id)]  # rule_04: age_gp - 28 >= age ",
      "severity": "error",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_jxraukpt1o",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_06: if (season == \"out\") price_t == price_tmin1 & quantity_t ==      quantity_tmin1 ",
      "severity": "warning",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_k5rvlsn7d4",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0 ",
      "severity": "information",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_cogkn0m2v8",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight  /*  * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)  *  *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN  *  x1                      1\t      +  *  x1.1          x1\t      2\t      +  *  x1.2          x1\t      2\t      +  *  x1.3          x1\t      2\t      +  *  x2                      1       +  *  x2.1          x2\t      2\t      +  */  DShierarchy := hierarchy(DS, level, \"HRC\", false) DScond := (DShierarchy = DS)[filter weight = \"false\"] DSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0 ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_wjws07tu9q",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_09: all(age >= 0 & age <= 113) ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_s2zkwmp9pm",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1   DSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */ ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_hus192ri91",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_10: any(business_id == 100 & turnover > 1e+06) ",
      "severity": "warning",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_hxq48yxfrv",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule 14 all(table(gender, age_group) >= 1) &    all(c(\"male\", \"female\") %in% gender) &   all(c(\"child\",\"adult\",\"senior\") %in% age_group) ",
      "severity": "error",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_gfxydryicg",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age tmp_age := EMPTY    tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)  IF tmp_age - 28 < age  THEN rc := 1 END   RETURN rc",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_ksr1omww8n",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define parent: parents :=  sub(\"\\\\.[0-9]$\",\"\",level) is_parent := level %in% parents  # define child sums, by search for parent pattern. child_sums := sapply(level[is_parent], function(x){      sum(weight[grepl(paste0(\"^\",x,\".[0-9]$\"),level)])   }) # rule 16  all(weight[is_parent] == child_sums)  ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_cwinx3ds2k",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head rc := {0} tmp_relation_to_head := EMPTY  IF relation_to_head ='4'  THEN        IF NOT spouse_id IN DATASET mat_Rule12 (person_id)     THEN rc := 1      ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )        IF tmp_relation_to_head /= '3'        THEN  rc := 1       END    END  END RETURN rc",
      "severity": "error",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_88jwphd6ay",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total rc,z1,total := {0,0,0}  FOR EVERY s1  IN DATASET mat_Rule03 (level1)     IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"    IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"  END  \"Check relative occurrence of value 'high'\"  IF z1 > total * 0.1 THEN rc := 1 END  RETURN rc",
      "severity": "error",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_zmgmnmk5gp",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_08: year_of_birth == persons$year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_93myqb0ijd",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_06: if (season == \"out\") price_t == price_tmin1 & quantity_t ==      quantity_tmin1 ",
      "severity": "warning",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_aotva0ihrq",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members DSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)  DScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]=          DShousehold)[filter members= \"false\"] DSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0  ",
      "severity": "error",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_szg2xph6zs",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]  DScond:= DScalc[filter age between 0 and 113]  DSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]  ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_gyr435yx9f",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head rc := {0} tmp_relation_to_head := EMPTY  IF relation_to_head ='4'  THEN        IF NOT spouse_id IN DATASET mat_Rule12 (person_id)     THEN rc := 1      ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )        IF tmp_relation_to_head /= '3'        THEN  rc := 1       END    END  END RETURN rc",
      "severity": "error",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_s8j9abr9eu",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier) DSgender= gender(identifier) {male, female} DSage =age-group(identifier) {child, adult, senior} /*  * gender: male, female  * age-groups: child, adult, senior  */ DSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,     on     (1 = 1)     return    (DSgender#gender as \"gender\",DSage #age-group as \"age-group\")) DSdiff := DSmerge setdiff DS[keep (gender, age-group)] DSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0 ",
      "severity": "information",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_ewp350p8a7",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1   DSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */ ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_2290h96wr8",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit rc,tmp_sum,hit  := {0,0,0}  tmp_AnzSst := FUNCTION LENGTH (level)  IF tmp_AnzSst IN SEQUENCE  (1,3)  THEN     FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )     IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND                            FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END     IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND                            FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END   END    \"Check\"   IF tmp_sum /= weight AND hit = 1    THEN rc := 1   END  END  RETURN rc",
      "severity": "error",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_vpuf6xpfmi",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)] DSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)] DSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)] DScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)] DSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1 ",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_dkd03aj800",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_city, counter rc, counter  := {0,0}    FOR EVERY tmp_city IN DATASET mat_Rule15 (postcode = postcode ; city )    IF city /= tmp_city      THEN rc := 1     END  END RETURN rc",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_5dtqa7cvyi",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight  /*  * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)  *  *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN  *  x1                      1\t      +  *  x1.1          x1\t      2\t      +  *  x1.2          x1\t      2\t      +  *  x1.3          x1\t      2\t      +  *  x2                      1       +  *  x2.1          x2\t      2\t      +  */  DShierarchy := hierarchy(DS, level, \"HRC\", false) DScond := (DShierarchy = DS)[filter weight = \"false\"] DSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0 ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_utgdkynhje",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1 ",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_wwb9b13p1p",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter rc, counter  := {0,0}    FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )   counter := counter + 1       IF counter /= 1      THEN rc := 1     END  END RETURN rc",
      "severity": "warning",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_iov9yrdscm",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_10: any(business_id == 100 & turnover > 1e+06) ",
      "severity": "warning",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_7ip6gap8j",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]  DScond:= DScalc[filter age between 0 and 113]  DSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]  ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_k2frmf1mqp",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1 ",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_mukwlqng49",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total rc,z1,total := {0,0,0}  FOR EVERY s1  IN DATASET mat_Rule03 (level1)     IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"    IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"  END  \"Check relative occurrence of value 'high'\"  IF z1 > total * 0.1 THEN rc := 1 END  RETURN rc",
      "severity": "error",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_lefgfjyihq",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_09: all(age >= 0 & age <= 113) ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_91jtcfvsq1",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_03: counts :=  table(level)  # rule_03: counts[\"high\"] < 0.1 * sum(counts) ",
      "severity": "information",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_p0sdqj6z0l",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_02: cost + profit == turnover ",
      "severity": "error",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_21wpco1qnt",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0 ",
      "severity": "information",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_87nwjs578c",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_count: person_count :=  table(person$household_id)  # rule17: members == person_count[household_id] ",
      "severity": "warning",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_sz381cxc5t",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0 ",
      "severity": "information",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_hl6lqe3rmx",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY) OR FUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5 OR FUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_uzmrhtneoh",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=level    DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"] DSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1)  ",
      "severity": "warning",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_94rk8tcav9",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover  rc := 1 tmp_turnover := EMPTY  FOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )     IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000    THEN rc := 0   END  END  RETURN rc",
      "severity": "error",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_zxkgyi0gzq",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier) /*  * gender: male, female  * age-groups: child, adult, senior  */ DScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"] DScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1] DSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0 ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_x1o7gbzwxh",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)   DScount := DS[calc 1 as msr_count role \"MEASURE\"] DSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] = DScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)] ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_7kbk099mu8",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter rc, counter  := {0,0}    FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )    counter := counter + 1   END     IF counter /= members      THEN rc := 1     END  RETURN rc",
      "severity": "information",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_f6zkrj760b",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1 ",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_u97fz65czg",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "turnover /= cost + profit",
      "severity": "information",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_wtsi63yxke",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_counts: counts :=  table(gender, age_group)  # rule_13: all(counts <= 1) ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_rzi5fdbi9z",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_counts: counts :=  table(gender, age_group)  # rule_13: all(counts <= 1) ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_k2ehl8w5b4",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of   DSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"   on (DSgp#person-id= DSgc# grandchild_of), return (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")   DSr:= (DSmerge#gp_age-28) >= DSmerge#age  DSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]  ",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_kn2l2ekctq",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_04: (price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <=      0.5 * price_Ymin1 ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_ksbk1e5wfs",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total rc,z1,total := {0,0,0}  FOR EVERY s1  IN DATASET mat_Rule03 (level1)     IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"    IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"  END  \"Check relative occurrence of value 'high'\"  IF z1 > total * 0.1 THEN rc := 1 END  RETURN rc",
      "severity": "error",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_1dcedwg7tl",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_15: postcode ~ city ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_4x2ow4cmuo",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0 ",
      "severity": "information",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_wls7bivb4t",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_city, counter rc, counter  := {0,0}    FOR EVERY tmp_city IN DATASET mat_Rule15 (postcode = postcode ; city )    IF city /= tmp_city      THEN rc := 1     END  END RETURN rc",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_aj9syv22wt",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_08: year_of_birth == persons$year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_xncaugyos4",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_09: all(age >= 0 & age <= 113) ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_aohcsl5s12",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1 rc := 0  LOOP FOR x1 := 1 UNTIL x1 > members      IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )       THEN rc := 1      END    END  RETURN rc",
      "severity": "information",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_1f7hct2ihv",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_09: all(age >= 0 & age <= 113) ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_xslfe9fdyh",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)] DSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)] DSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)] DScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)] DSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1 ",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_i5rfovo9pc",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight  /*  * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)  *  *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN  *  x1                      1\t      +  *  x1.1          x1\t      2\t      +  *  x1.2          x1\t      2\t      +  *  x1.3          x1\t      2\t      +  *  x2                      1       +  *  x2.1          x2\t      2\t      +  */  DShierarchy := hierarchy(DS, level, \"HRC\", false) DScond := (DShierarchy = DS)[filter weight = \"false\"] DSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0 ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_l2z2vfcekv",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_count: person_count :=  table(person$household_id)  # rule17: members == person_count[household_id] ",
      "severity": "warning",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_s4df0gy3bf",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": " # def_ratio meani := mean(price_t)  + (price_tm1 - price_t)/length(price_t) ratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))  # rule_07 ratio >= 0.9 & ratio <= 1.1  ",
      "severity": "warning",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_gr9dpogtck",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1   DSout:=DS[filter season=\"out\"] DSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic     see page 42 VTL-part1 */ ",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_ga3wcftuqi",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc,tmp_relation_to_head rc := {0} tmp_relation_to_head := EMPTY  IF relation_to_head ='4'  THEN        IF NOT spouse_id IN DATASET mat_Rule12 (person_id)     THEN rc := 1      ELSE  tmp_relation_to_head :=  DATASET mat_Rule12 (person_id = spouse_id ; relation_to_head )        IF tmp_relation_to_head /= '3'        THEN  rc := 1       END    END  END RETURN rc",
      "severity": "error",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_8f2juwnywo",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight  /*  * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)  *  *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN  *  x1                      1\t      +  *  x1.1          x1\t      2\t      +  *  x1.2          x1\t      2\t      +  *  x1.3          x1\t      2\t      +  *  x2                      1       +  *  x2.1          x2\t      2\t      +  */  DShierarchy := hierarchy(DS, level, \"HRC\", false) DScond := (DShierarchy = DS)[filter weight = \"false\"] DSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0 ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_67vdplfbdw",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define parent: parents :=  sub(\"\\\\.[0-9]$\",\"\",level) is_parent := level %in% parents  # define child sums, by search for parent pattern. child_sums := sapply(level[is_parent], function(x){      sum(weight[grepl(paste0(\"^\",x,\".[0-9]$\"),level)])   }) # rule 16  all(weight[is_parent] == child_sums)  ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_4tltoect61",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)] DSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)] DSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)] DScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)] DSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1 ",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_fgmgwbqtpk",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier) /*  * gender: male, female  * age-groups: child, adult, senior  */ DScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"] DScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1] DSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0 ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_7ahueq1fem",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked  DSr:= DS#hours_worked between 1 and 80 /* In case a value in hours_worked is NULL the value returned will be NULL */ . ",
      "severity": "information",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_px70j0tu5i",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age tmp_age := EMPTY    tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)  IF tmp_age - 28 < age  THEN rc := 1 END   RETURN rc",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_wlepfinye0",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count rc,tmp_undecided, tmp_count := {1,0,0} tmp_turnover := EMPTY    FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )     IF tmp_turnover  = EMPTY      THEN tmp_undecided := 1           ELSE       IF tmp_turnover > 1000000        THEN tmp_count :=  tmp_count + 1         END    END  END   IF tmp_undecided = 1 OR  tmp_count = 1   THEN rc := 0  END    RETURN rc",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_0jyioih83l",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age tmp_age := EMPTY    tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)  IF tmp_age - 28 < age  THEN rc := 1 END   RETURN rc",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_125ku15wjb",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_5bm1xa5ubs",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of   DSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"   on (DSgp#person-id= DSgc# grandchild_of), return (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")   DSr:= (DSmerge#gp_age-28) >= DSmerge#age  DSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]  ",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_u9yerdl3bw",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1   DSout:=DS[filter season=\"out\"] DSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic     see page 42 VTL-part1 */ ",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_y9c2icxk5f",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_counts: counts :=  table(gender, age_group)  # rule_13: all(counts <= 1) ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_sthrjcxls6",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_03: counts :=  table(level)  # rule_03: counts[\"high\"] < 0.1 * sum(counts) ",
      "severity": "information",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_5gc5l8az96",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_06: if (season == \"out\") price_t == price_tmin1 & quantity_t ==      quantity_tmin1 ",
      "severity": "warning",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_tt6tje1832",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY) OR FUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5 OR FUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_5bp54xa04t",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_03: counts :=  table(level)  # rule_03: counts[\"high\"] < 0.1 * sum(counts) ",
      "severity": "information",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_5r9vdbk7xa",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0 ",
      "severity": "information",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_k2as1n99vx",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define parent: parents :=  sub(\"\\\\.[0-9]$\",\"\",level) is_parent := level %in% parents  # define child sums, by search for parent pattern. child_sums := sapply(level[is_parent], function(x){      sum(weight[grepl(paste0(\"^\",x,\".[0-9]$\"),level)])   }) # rule 16  all(weight[is_parent] == child_sums)  ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_lpsvvunx21",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid rc,tmp_decided, tmp_invalid := {0,0,0} tmp_age := EMPTY FOR EVERY tmp_age IN DATASET mat_Rule09 (age)     IF tmp_age  = EMPTY      THEN tmp_decided := 1           ELSE       IF NOT tmp_age  IN SEQUENCE (0++113)        THEN tmp_invalid := 1         END    END END  IF tmp_decided = 0 AND  tmp_invalid = 1  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_y3i1vw6m08",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_08: year_of_birth == persons$year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_3po328qx0u",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0 ",
      "severity": "information",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_l8v7dxk8q1",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_age_gp: age_gp :=  age[match(grandchild_of, person_id)]  # rule_04: age_gp - 28 >= age ",
      "severity": "error",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_iozcpyilw2",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit rc,tmp_sum,hit  := {0,0,0}  tmp_AnzSst := FUNCTION LENGTH (level)  IF tmp_AnzSst IN SEQUENCE  (1,3)  THEN     FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )     IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND                            FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END     IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND                            FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END   END    \"Check\"   IF tmp_sum /= weight AND hit = 1    THEN rc := 1   END  END  RETURN rc",
      "severity": "error",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_wqgutx6msz",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1   DSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */ ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_zyk6omtcpw",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier) /*  * gender: male, female  * age-groups: child, adult, senior  */ DScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"] DScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1] DSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0 ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_29ostqf51w",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}  \"Count totals SP2 and SP3 across all records\"   FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)           counter := counter + 1           s_t   := s_t + t           s_tm1 := s_tm1 + tm1    END  \"Evaluate result\"  IF counter > 0    THEN      \"Compute previous average\"     d_t       := s_t   / counter     d_tm1     := s_tm1 / counter \t     \"Compute new average\"     d_t_neu := (s_t - price_t + price_tm1) / counter      \"Compute relative size of new average\"      DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)    \"Check\"   IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)    THEN rc := 1   END  END    RETURN rc",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_vn5y1hfrg8",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_09: all(age >= 0 & age <= 113) ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_wkbetegofj",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule 14 all(table(gender, age_group) >= 1) &    all(c(\"male\", \"female\") %in% gender) &   all(c(\"child\",\"adult\",\"senior\") %in% age_group) ",
      "severity": "error",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_8tz62x5wwq",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight  /*  * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)  *  *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN  *  x1                      1\t      +  *  x1.1          x1\t      2\t      +  *  x1.2          x1\t      2\t      +  *  x1.3          x1\t      2\t      +  *  x2                      1       +  *  x2.1          x2\t      2\t      +  */  DShierarchy := hierarchy(DS, level, \"HRC\", false) DScond := (DShierarchy = DS)[filter weight = \"false\"] DSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0 ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_gw9g5fhp04",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define parent: parents :=  sub(\"\\\\.[0-9]$\",\"\",level) is_parent := level %in% parents  # define child sums, by search for parent pattern. child_sums := sapply(level[is_parent], function(x){      sum(weight[grepl(paste0(\"^\",x,\".[0-9]$\"),level)])   }) # rule 16  all(weight[is_parent] == child_sums)  ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_xbahxjee0l",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, dummy, counter rc, counter  := {0,0}    FOR EVERY dummy IN DATASET mat_Rule13 (gender = gender, age_group = age_group  ; person_id )   counter := counter + 1       IF counter /= 1      THEN rc := 1     END  END RETURN rc",
      "severity": "warning",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_h36famtxif",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_08: year_of_birth == persons$year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_uwbxy243iw",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)   DScount := DS[calc 1 as msr_count role \"MEASURE\"] DSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] = DScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)] ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_a40cmavb4u",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": " # def_ratio meani := mean(price_t)  + (price_tm1 - price_t)/length(price_t) ratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))  # rule_07 ratio >= 0.9 & ratio <= 1.1  ",
      "severity": "warning",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_km027tmo9q",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1   DSout:=DS[filter season=\"out\"] DSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic     see page 42 VTL-part1 */ ",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_5lk84j3wbn",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid rc,tmp_decided, tmp_invalid := {0,0,0} tmp_age := EMPTY FOR EVERY tmp_age IN DATASET mat_Rule09 (age)     IF tmp_age  = EMPTY      THEN tmp_decided := 1           ELSE       IF NOT tmp_age  IN SEQUENCE (0++113)        THEN tmp_invalid := 1         END    END END  IF tmp_decided = 0 AND  tmp_invalid = 1  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_n2h8bqvyyq",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "turnover /= cost + profit",
      "severity": "information",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_me7qep3ygb",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight  /*  * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)  *  *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN  *  x1                      1\t      +  *  x1.1          x1\t      2\t      +  *  x1.2          x1\t      2\t      +  *  x1.3          x1\t      2\t      +  *  x2                      1       +  *  x2.1          x2\t      2\t      +  */  DShierarchy := hierarchy(DS, level, \"HRC\", false) DScond := (DShierarchy = DS)[filter weight = \"false\"] DSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0 ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_8jewjxeich",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_age_gp: age_gp :=  age[match(grandchild_of, person_id)]  # rule_04: age_gp - 28 >= age ",
      "severity": "error",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_mnmsx7sand",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit rc,tmp_sum,hit  := {0,0,0}  tmp_AnzSst := FUNCTION LENGTH (level)  IF tmp_AnzSst IN SEQUENCE  (1,3)  THEN     FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )     IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND                            FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END     IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND                            FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END   END    \"Check\"   IF tmp_sum /= weight AND hit = 1    THEN rc := 1   END  END  RETURN rc",
      "severity": "error",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_m7dbb398jm",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_city, counter rc, counter  := {0,0}    FOR EVERY tmp_city IN DATASET mat_Rule15 (postcode = postcode ; city )    IF city /= tmp_city      THEN rc := 1     END  END RETURN rc",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_kqn57kw8xm",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid rc,tmp_decided, tmp_invalid := {0,0,0} tmp_age := EMPTY FOR EVERY tmp_age IN DATASET mat_Rule09 (age)     IF tmp_age  = EMPTY      THEN tmp_decided := 1           ELSE       IF NOT tmp_age  IN SEQUENCE (0++113)        THEN tmp_invalid := 1         END    END END  IF tmp_decided = 0 AND  tmp_invalid = 1  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_apc5jh0hw7",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1 rc := 0  LOOP FOR x1 := 1 UNTIL x1 > members      IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )       THEN rc := 1      END    END  RETURN rc",
      "severity": "information",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_j9gl7imej7",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1   DSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */ ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_9a2lmpbpyf",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members DSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)  DScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]=          DShousehold)[filter members= \"false\"] DSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0  ",
      "severity": "error",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_spbprm9bas",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0 ",
      "severity": "information",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_3i1vw1fucg",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_h0imr4k90t",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule 14 all(table(gender, age_group) >= 1) &    all(c(\"male\", \"female\") %in% gender) &   all(c(\"child\",\"adult\",\"senior\") %in% age_group) ",
      "severity": "error",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_j1uh8bcghj",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_04: (price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <=      0.5 * price_Ymin1 ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_z210or7f1n",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1   DSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */ ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_4pw1xptt0n",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age tmp_age := EMPTY    tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)  IF tmp_age - 28 < age  THEN rc := 1 END   RETURN rc",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_bp4pflggc2",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover  rc := 1 tmp_turnover := EMPTY  FOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )     IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000    THEN rc := 0   END  END  RETURN rc",
      "severity": "error",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_m75ukzqjay",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_03: counts :=  table(level)  # rule_03: counts[\"high\"] < 0.1 * sum(counts) ",
      "severity": "information",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_qter8xlb21",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY) OR FUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5 OR FUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_iax4oyxvn2",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth DS_p= person-id(identifier),person, year_of_birth, gender   DSr:= DS_h#year_of_birth=DS_p#year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_4eqs7o9nw1",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked  DSr:= DS#hours_worked between 1 and 80 /* In case a value in hours_worked is NULL the value returned will be NULL */ . ",
      "severity": "information",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_n2qkegppes",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier) DSgender= gender(identifier) {male, female} DSage =age-group(identifier) {child, adult, senior} /*  * gender: male, female  * age-groups: child, adult, senior  */ DSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,     on     (1 = 1)     return    (DSgender#gender as \"gender\",DSage #age-group as \"age-group\")) DSdiff := DSmerge setdiff DS[keep (gender, age-group)] DSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0 ",
      "severity": "information",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_1rroa67jr6",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier) DSgender= gender(identifier) {male, female} DSage =age-group(identifier) {child, adult, senior} /*  * gender: male, female  * age-groups: child, adult, senior  */ DSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,     on     (1 = 1)     return    (DSgender#gender as \"gender\",DSage #age-group as \"age-group\")) DSdiff := DSmerge setdiff DS[keep (gender, age-group)] DSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0 ",
      "severity": "information",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_xxrhaqkfdo",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid rc,tmp_decided, tmp_invalid := {0,0,0} tmp_age := EMPTY FOR EVERY tmp_age IN DATASET mat_Rule09 (age)     IF tmp_age  = EMPTY      THEN tmp_decided := 1           ELSE       IF NOT tmp_age  IN SEQUENCE (0++113)        THEN tmp_invalid := 1         END    END END  IF tmp_decided = 0 AND  tmp_invalid = 1  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_5thn307wyx",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count rc,tmp_undecided, tmp_count := {1,0,0} tmp_turnover := EMPTY    FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )     IF tmp_turnover  = EMPTY      THEN tmp_undecided := 1           ELSE       IF tmp_turnover > 1000000        THEN tmp_count :=  tmp_count + 1         END    END  END   IF tmp_undecided = 1 OR  tmp_count = 1   THEN rc := 0  END    RETURN rc",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_f19t87kqnt",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_01: hours_worked >= 1 & hours_worked <= 80 ",
      "severity": "warning",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_oisdanz7ae",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "turnover /= cost + profit",
      "severity": "information",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_yuhlfvl2gr",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1   DSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */ ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_w26nl9uti8",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of   DSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"   on (DSgp#person-id= DSgc# grandchild_of), return (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")   DSr:= (DSmerge#gp_age-28) >= DSmerge#age  DSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]  ",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_hw1a8niwpb",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,     male_child, female_child, male_adult, female_adult, male_senior, female_senior rc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}    FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)    IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END    IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END    IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END    END     IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0       THEN rc := 1     END   RETURN rc",
      "severity": "error",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_bmzoqzr7ov",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule 14 all(table(gender, age_group) >= 1) &    all(c(\"male\", \"female\") %in% gender) &   all(c(\"child\",\"adult\",\"senior\") %in% age_group) ",
      "severity": "error",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_yzvdflv32n",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover  rc := 1 tmp_turnover := EMPTY  FOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )     IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000    THEN rc := 0   END  END  RETURN rc",
      "severity": "error",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_kzfyltos0o",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY) OR FUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5 OR FUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_g1qrcgfeh1",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "(price_t = EMPTY OR price_t_1 = EMPTY OR price_Y_1 = EMPTY) OR FUNCTION ABSOLUTEVALUE (price_t - price_t_1)  > price_t_1 * 0.5 OR FUNCTION ABSOLUTEVALUE (price_t - price_Y_1)  > price_Y_1 * 0.5",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_0qz7y5v7nk",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "turnover /= cost + profit",
      "severity": "information",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_p5e66mzpk2",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age tmp_age := EMPTY    tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)  IF tmp_age - 28 < age  THEN rc := 1 END   RETURN rc",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_o0osxc7h7r",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1 ",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_m2uic7arg2",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "turnover /= cost + profit",
      "severity": "information",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_m44r3ks3mk",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_10: any(business_id == 100 & turnover > 1e+06) ",
      "severity": "warning",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_6ofpru9n5i",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_rel_4: rel_4 :=  person_id[relation_to_head == 4]  # def_rel_3: spouse_of_rel_3 :=  spouse_id[relation_to_head == 3]  # rule_12: all(rel_4 %in% spouse_of_rel_3) ",
      "severity": "information",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_2u1pcxn30u",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc rc := 0  \"Haushalt = household\"  IF NOT  SEQUENCE (person_id , person , year_of_birth)   IN DATASET Haushalt (person_id , person , year_of_birth)  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_t2267nbsgi",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc rc := 0  \"Haushalt = household\"  IF NOT  SEQUENCE (person_id , person , year_of_birth)   IN DATASET Haushalt (person_id , person , year_of_birth)  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_lfkqrrn2uf",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_rel_4: rel_4 :=  person_id[relation_to_head == 4]  # def_rel_3: spouse_of_rel_3 :=  spouse_id[relation_to_head == 3]  # rule_12: all(rel_4 %in% spouse_of_rel_3) ",
      "severity": "information",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_jt5xkjx9gq",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked  DSr:= DS#hours_worked between 1 and 80 /* In case a value in hours_worked is NULL the value returned will be NULL */ . ",
      "severity": "information",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_a314kvxqvt",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1 rc := 0  LOOP FOR x1 := 1 UNTIL x1 > members      IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )       THEN rc := 1      END    END  RETURN rc",
      "severity": "information",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_v1g8lpx142",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_01: hours_worked >= 1 & hours_worked <= 80 ",
      "severity": "warning",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_rgzcw599v4",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_03: counts :=  table(level)  # rule_03: counts[\"high\"] < 0.1 * sum(counts) ",
      "severity": "information",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_4v34xyqoix",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1 rc := 0  LOOP FOR x1 := 1 UNTIL x1 > members      IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )       THEN rc := 1      END    END  RETURN rc",
      "severity": "information",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_cjb233469p",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,     male_child, female_child, male_adult, female_adult, male_senior, female_senior rc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}    FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)    IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END    IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END    IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END    END     IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0       THEN rc := 1     END   RETURN rc",
      "severity": "error",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_aizzexyymr",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0 ",
      "severity": "information",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_hg2wa87ru4",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_06: if (season == \"out\") price_t == price_tmin1 & quantity_t ==      quantity_tmin1 ",
      "severity": "warning",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_iijzaf0pnl",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_age_gp: age_gp :=  age[match(grandchild_of, person_id)]  # rule_04: age_gp - 28 >= age ",
      "severity": "error",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_mquixuek71",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1   DSout:=DS[filter season=\"out\"] DSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic     see page 42 VTL-part1 */ ",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_9b2kmei4ij",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_rel_4: rel_4 :=  person_id[relation_to_head == 4]  # def_rel_3: spouse_of_rel_3 :=  spouse_id[relation_to_head == 3]  # rule_12: all(rel_4 %in% spouse_of_rel_3) ",
      "severity": "information",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_968je2bjsg",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1   DSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */ ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_ppdymyz9xn",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter rc, counter  := {0,0}    FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )    counter := counter + 1   END     IF counter /= members      THEN rc := 1     END  RETURN rc",
      "severity": "information",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_tqg9txex4p",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS_h= household-id, person-id(identifier),person, year_of_birth DS_p= person-id(identifier),person, year_of_birth, gender   DSr:= DS_h#year_of_birth=DS_p#year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_izxi23g6p8",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members DSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)  DScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]=          DShousehold)[filter members= \"false\"] DSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0  ",
      "severity": "error",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_89errqjerz",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total rc,z1,total := {0,0,0}  FOR EVERY s1  IN DATASET mat_Rule03 (level1)     IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"    IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"  END  \"Check relative occurrence of value 'high'\"  IF z1 > total * 0.1 THEN rc := 1 END  RETURN rc",
      "severity": "error",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_hwh3bdqxnu",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age tmp_age := EMPTY    tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)  IF tmp_age - 28 < age  THEN rc := 1 END   RETURN rc",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_cb6527gwsq",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover  rc := 1 tmp_turnover := EMPTY  FOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )     IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000    THEN rc := 0   END  END  RETURN rc",
      "severity": "error",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_9yztq4ktad",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of   DSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"   on (DSgp#person-id= DSgc# grandchild_of), return (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")   DSr:= (DSmerge#gp_age-28) >= DSmerge#age  DSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]  ",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_5dwhsth3w9",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of   DSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"   on (DSgp#person-id= DSgc# grandchild_of), return (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")   DSr:= (DSmerge#gp_age-28) >= DSmerge#age  DSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]  ",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_cdglou1ifx",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_rel_4: rel_4 :=  person_id[relation_to_head == 4]  # def_rel_3: spouse_of_rel_3 :=  spouse_id[relation_to_head == 3]  # rule_12: all(rel_4 %in% spouse_of_rel_3) ",
      "severity": "information",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_03cd692qy6",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total rc,z1,total := {0,0,0}  FOR EVERY s1  IN DATASET mat_Rule03 (level1)     IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"    IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"  END  \"Check relative occurrence of value 'high'\"  IF z1 > total * 0.1 THEN rc := 1 END  RETURN rc",
      "severity": "error",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_j6nc3jfg60",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age tmp_age := EMPTY    tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)  IF tmp_age - 28 < age  THEN rc := 1 END   RETURN rc",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_mdk2n7dha7",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit rc,tmp_sum,hit  := {0,0,0}  tmp_AnzSst := FUNCTION LENGTH (level)  IF tmp_AnzSst IN SEQUENCE  (1,3)  THEN     FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )     IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND                            FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END     IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND                            FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END   END    \"Check\"   IF tmp_sum /= weight AND hit = 1    THEN rc := 1   END  END  RETURN rc",
      "severity": "error",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_xoyq3f11hx",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0 ",
      "severity": "information",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_z558tfetae",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)   DScount := DS[calc 1 as msr_count role \"MEASURE\"] DSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] = DScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)] ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_7767lkjcuq",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_age_gp: age_gp :=  age[match(grandchild_of, person_id)]  # rule_04: age_gp - 28 >= age ",
      "severity": "error",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_j80o4iq1hv",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_11: sum(business_id == 100 & turnover > 1e+06) == 1 ",
      "severity": "information",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_onzpieogef",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=product-id(identifier),price_t , price_tm1  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, price_t , price_mt1)] DSmt:= DScalc [keep (temp_id,price_t)][aggregate avg(price_t)] DSmt_1:= DScalc [keep (temp_id,price_mt1)][aggregate avg(price_mt1)] DScount:=DS[keep (temp_id,price_t)][aggregate count(price_t)] DSr:=(abs(DSmt - DSmt_1 + (DScalc#price_mt1- DScalc#price_t)/DScount))/abs(DSmt- DSmt_1)) between 0.9 and 1.1 ",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_pnh1ri3z92",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_counts: counts :=  table(gender, age_group)  # rule_13: all(counts <= 1) ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_sx12pvuyrb",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total rc,z1,total := {0,0,0}  FOR EVERY s1  IN DATASET mat_Rule03 (level1)     IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"    IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"  END  \"Check relative occurrence of value 'high'\"  IF z1 > total * 0.1 THEN rc := 1 END  RETURN rc",
      "severity": "error",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_6fvoghe3me",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit rc,tmp_sum,hit  := {0,0,0}  tmp_AnzSst := FUNCTION LENGTH (level)  IF tmp_AnzSst IN SEQUENCE  (1,3)  THEN     FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )     IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND                            FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END     IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND                            FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END   END    \"Check\"   IF tmp_sum /= weight AND hit = 1    THEN rc := 1   END  END  RETURN rc",
      "severity": "error",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_hhlpdvtirc",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id(identifier),gender(identifier),age-group(identifier) /*  * gender: male, female  * age-groups: child, adult, senior  */ DScalc := DS[calc 1 as \"id\" role \"identifier\", 1 as \"msrcount\" role \"measure\"] DScount := DS[keep(id, msrcount, gender, age_groups)][aggregate count(msrcount)][filter msrcount > 1] DSr := DScount [keep (id, msrcount)][aggregate count(msrcount)] = 0 ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_cwlgmxspz9",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter rc, counter  := {0,0}    FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )    counter := counter + 1   END     IF counter /= members      THEN rc := 1     END  RETURN rc",
      "severity": "information",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_1rfvm1bl3z",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover  rc := 1 tmp_turnover := EMPTY  FOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )     IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000    THEN rc := 0   END  END  RETURN rc",
      "severity": "error",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_l101datjlu",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier) DSgender= gender(identifier) {male, female} DSage =age-group(identifier) {child, adult, senior} /*  * gender: male, female  * age-groups: child, adult, senior  */ DSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,     on     (1 = 1)     return    (DSgender#gender as \"gender\",DSage #age-group as \"age-group\")) DSdiff := DSmerge setdiff DS[keep (gender, age-group)] DSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0 ",
      "severity": "information",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_g485mt7glp",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define vector with T/F value for each household test := sapply(1:length(household_id), function(i){   hhid <- household_id[i]   all(1:members[i] %in% persons$person_id[persons$household_id == hhid]) })  # rule must hold for all households all(test)  ",
      "severity": "error",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_bs59o0xw5q",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": " # def_ratio meani := mean(price_t)  + (price_tm1 - price_t)/length(price_t) ratio := abs(meani-mean(price_tm1))/abs(mean(price_t)-mean(price_tm1))  # rule_07 ratio >= 0.9 & ratio <= 1.1  ",
      "severity": "warning",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_iikwjo1bre",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), spouse-id, relation_to_head  DSfilter := DS[filter relation_to_head = 4] DSmerge := merge(DS \"DSx\",DS \"DSy\",     on     (DSy#spouse-id = DSx#person-id and DSy#relation_to_head = 3 and DSx#relation_to_head = 4)     return     (DSx#person-id as \"person-id\"))  DSnot_exists := DSfilter not_exists_in DSmerge  DScount := DSnot_exists[calc 1 as \"id\" role \"identifier\"][keep (id, person_id)][aggregate count (person_id)] = 0 ",
      "severity": "warning",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_0073ixekhk",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1   DSout:=DS[filter season=\"out\"] DSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic     see page 42 VTL-part1 */ ",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_8a938idga8",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_02: cost + profit == turnover ",
      "severity": "error",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_5blxx6na9v",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=level    DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"\", 1 as \"msrcount\" role \"measure\"] DSr:= DScalc[filter level=\"high\"][aggregate count(msrcount)]<=(( DScalc [aggregate count (msrcount)])*0.1)  ",
      "severity": "warning",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_tv7rb17m4j",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "NOT hours_worked IN SEQUENCE (1 ++ 80)",
      "severity": "warning",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_p01frm83k",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_08: year_of_birth == persons$year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_siko64ur5e",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id(identifier),level(identifier),weight  /*  * Create a hierarchy (actually is no possible to do using VTL because some string operators are missing)  *  *  MAPS FROM\t   MAPS TO\tLEVEL\t   SIGN  *  x1                      1\t      +  *  x1.1          x1\t      2\t      +  *  x1.2          x1\t      2\t      +  *  x1.3          x1\t      2\t      +  *  x2                      1       +  *  x2.1          x2\t      2\t      +  */  DShierarchy := hierarchy(DS, level, \"HRC\", false) DScond := (DShierarchy = DS)[filter weight = \"false\"] DSr := DScond[calc 1 as \"msrcount\" role \"MEASURE\"][aggregate count(msrcount)] = 0 ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_0nav5z0ce9",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "season = 'out' AND (price_t /= price_t_1 OR quantity_t /= quantity_t_1)",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_9ojoy6sf4n",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1   DSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */ ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_43h5frqi1a",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,     male_child, female_child, male_adult, female_adult, male_senior, female_senior rc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}    FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)    IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END    IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END    IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END    END     IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0       THEN rc := 1     END   RETURN rc",
      "severity": "error",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_b6zsqo0ee4",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier) DSgender= gender(identifier) {male, female} DSage =age-group(identifier) {child, adult, senior} /*  * gender: male, female  * age-groups: child, adult, senior  */ DSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,     on     (1 = 1)     return    (DSgender#gender as \"gender\",DSage #age-group as \"age-group\")) DSdiff := DSmerge setdiff DS[keep (gender, age-group)] DSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0 ",
      "severity": "information",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_rfqrgyl5ir",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_count: person_count :=  table(person$household_id)  # rule17: members == person_count[household_id] ",
      "severity": "warning",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_yf7itvo65h",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_counts: counts :=  table(gender, age_group)  # rule_13: all(counts <= 1) ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_52vbigyddf",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}  \"Count totals SP2 and SP3 across all records\"   FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)           counter := counter + 1           s_t   := s_t + t           s_tm1 := s_tm1 + tm1    END  \"Evaluate result\"  IF counter > 0    THEN      \"Compute previous average\"     d_t       := s_t   / counter     d_tm1     := s_tm1 / counter \t     \"Compute new average\"     d_t_neu := (s_t - price_t + price_tm1) / counter      \"Compute relative size of new average\"      DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)    \"Check\"   IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)    THEN rc := 1   END  END    RETURN rc",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_np9j5ic1oj",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), name, gender(identifier), age-group(identifier) DSgender= gender(identifier) {male, female} DSage =age-group(identifier) {child, adult, senior} /*  * gender: male, female  * age-groups: child, adult, senior  */ DSmerge := merge(DSgender \"DSgender\"  ,DSage \"DSage\" ,     on     (1 = 1)     return    (DSgender#gender as \"gender\",DSage #age-group as \"age-group\")) DSdiff := DSmerge setdiff DS[keep (gender, age-group)] DSr := DSdiff [calc 1 as \"msrcount\" role \"measure\"][aggregate count(msrcount)] = 0 ",
      "severity": "information",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_t7ybjy3mjl",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define vector with T/F value for each household test := sapply(1:length(household_id), function(i){   hhid <- household_id[i]   all(1:members[i] %in% persons$person_id[persons$household_id == hhid]) })  # rule must hold for all households all(test)  ",
      "severity": "error",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_vtwgce8b81",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_11: sum(business_id == 100 & turnover > 1e+06) == 1 ",
      "severity": "information",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_j4xr8epo7w",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_rel_4: rel_4 :=  person_id[relation_to_head == 4]  # def_rel_3: spouse_of_rel_3 :=  spouse_id[relation_to_head == 3]  # rule_12: all(rel_4 %in% spouse_of_rel_3) ",
      "severity": "information",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "NA"
  },
  {
    "id": "id_c6id885fqh",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define vector with T/F value for each household test := sapply(1:length(household_id), function(i){   hhid <- household_id[i]   all(1:members[i] %in% persons$person_id[persons$household_id == hhid]) })  # rule must hold for all households all(test)  ",
      "severity": "error",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_9hbntavt54",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc rc := 0  \"Haushalt = household\"  IF NOT  SEQUENCE (person_id , person , year_of_birth)   IN DATASET Haushalt (person_id , person , year_of_birth)  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_hcr7903d2x",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1   DSout:=DS[filter season=\"out\"] DSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic     see page 42 VTL-part1 */ ",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_muae5tju5e",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_15: postcode ~ city ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_gb36jdj1an",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_06: if (season == \"out\") price_t == price_tmin1 & quantity_t ==      quantity_tmin1 ",
      "severity": "warning",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_jhyj9z60wc",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter rc, counter  := {0,0}    FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )    counter := counter + 1   END     IF counter /= members      THEN rc := 1     END  RETURN rc",
      "severity": "information",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_d7s2jsczm7",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count rc,tmp_undecided, tmp_count := {1,0,0} tmp_turnover := EMPTY    FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )     IF tmp_turnover  = EMPTY      THEN tmp_undecided := 1           ELSE       IF tmp_turnover > 1000000        THEN tmp_count :=  tmp_count + 1         END    END  END   IF tmp_undecided = 1 OR  tmp_count = 1   THEN rc := 0  END    RETURN rc",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_dpu830j5vz",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_10: any(business_id == 100 & turnover > 1e+06) ",
      "severity": "warning",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_gq3tgge413",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE tmp_age, rc, tmp_decided, tmp_invalid rc,tmp_decided, tmp_invalid := {0,0,0} tmp_age := EMPTY FOR EVERY tmp_age IN DATASET mat_Rule09 (age)     IF tmp_age  = EMPTY      THEN tmp_decided := 1           ELSE       IF NOT tmp_age  IN SEQUENCE (0++113)        THEN tmp_invalid := 1         END    END END  IF tmp_decided = 0 AND  tmp_invalid = 1  THEN rc := 1 END  RETURN rc",
      "severity": "information",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_fi185rw0jj",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_15: postcode ~ city ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_ocattfu2kx",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_rel_4: rel_4 :=  person_id[relation_to_head == 4]  # def_rel_3: spouse_of_rel_3 :=  spouse_id[relation_to_head == 3]  # rule_12: all(rel_4 %in% spouse_of_rel_3) ",
      "severity": "information",
      "description": " ``` forall x:    IF x.relation_to_head = 4    THEN exists y:     x.spouse-id = y.person-id AND y.relation_to_head = 3 ```  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_59qtjb1rfo",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age tmp_age := EMPTY    tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)  IF tmp_age - 28 < age  THEN rc := 1 END   RETURN rc",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_lplcriqbec",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=district-id(identifier),postcode(identifier),city(identifier)   DScount := DS[calc 1 as msr_count role \"MEASURE\"] DSr := DScount[keep (postcode, msr_count)][aggregate count (msr_count)] = DScount[keep (postcode, city, msr_count)][aggregate count (msr_count)][keep (postcode, msr_count)] ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_9nbjdga5wc",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= business-id, cost, profit, turnover   DSr:= (DS#cost + DS#profit) = DS#turnover ",
      "severity": "error",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_xu4vet28o8",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}  \"Count totals SP2 and SP3 across all records\"   FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)           counter := counter + 1           s_t   := s_t + t           s_tm1 := s_tm1 + tm1    END  \"Evaluate result\"  IF counter > 0    THEN      \"Compute previous average\"     d_t       := s_t   / counter     d_tm1     := s_tm1 / counter \t     \"Compute new average\"     d_t_neu := (s_t - price_t + price_tm1) / counter      \"Compute relative size of new average\"      DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)    \"Check\"   IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)    THEN rc := 1   END  END    RETURN rc",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_7zhtmy5i19",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define parent: parents :=  sub(\"\\\\.[0-9]$\",\"\",level) is_parent := level %in% parents  # define child sums, by search for parent pattern. child_sums := sapply(level[is_parent], function(x){      sum(weight[grepl(paste0(\"^\",x,\".[0-9]$\"),level)])   }) # rule 16  all(weight[is_parent] == child_sums)  ",
      "severity": "warning",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_5rbkfuqvzd",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_11: sum(business_id == 100 & turnover > 1e+06) == 1 ",
      "severity": "information",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_xy8an2ympu",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DShousehold=household-id(identifier),members DSpersons=person-id(identifier),household-id(identifier) (in the example fields are not correctly defined)  DScount := (DSpersons[calc 1 as \"members\" role \"MEASURE\"][keep (household-id, members)][aggregate count(members)]=          DShousehold)[filter members= \"false\"] DSr := DScount[calc 1 as \"msr_count\" role \"MEASURE\"][aggregate count(msr_count)] = 0  ",
      "severity": "error",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_ukgotg2szv",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier \"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] > 0 ",
      "severity": "information",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "0"
  },
  {
    "id": "id_52rj9coc65",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_04: (price_t - price_tmin1) <= 0.5 * price_tmin1 & (price_t - price_Ymin1) <=      0.5 * price_Ymin1 ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_tol008xivw",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1 rc := 0  LOOP FOR x1 := 1 UNTIL x1 > members      IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )       THEN rc := 1      END    END  RETURN rc",
      "severity": "information",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_bix8zit8f5",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1 rc := 0  LOOP FOR x1 := 1 UNTIL x1 > members      IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )       THEN rc := 1      END    END  RETURN rc",
      "severity": "information",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_f2wgwkwiy0",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, t, tm1, counter,  DSr rc, d_t, d_tm1, s_t, s_tm1, d_t_neu, counter  := {0,0,0,0,0,0,0}  \"Count totals SP2 and SP3 across all records\"   FOR EVERY  t, tm1 IN DATASET mat_Rule07lb (price_t, price_tm1)           counter := counter + 1           s_t   := s_t + t           s_tm1 := s_tm1 + tm1    END  \"Evaluate result\"  IF counter > 0    THEN      \"Compute previous average\"     d_t       := s_t   / counter     d_tm1     := s_tm1 / counter \t     \"Compute new average\"     d_t_neu := (s_t - price_t + price_tm1) / counter      \"Compute relative size of new average\"      DSr :=  FUNCTION ABSOLUTEVALUE(d_t - d_tm1) / FUNCTION ABSOLUTEVALUE(d_t_neu - d_tm1)    \"Check\"   IF NOT DSr IN SEQUENCE  (0.9 ++ 1.1)    THEN rc := 1   END  END    RETURN rc",
      "severity": "error",
      "description": " The price change of a single item may not influence the change in the mean prices by more than 10\\%, upwards or downwards.  Explanation in detail. Let `m(t)` denote the mean price at time `t` and `m(t-1)` the mean time at time `t-1`. The change in mean prices is given by `d(t,t-1) = abs(m(t) - m(t-1))`. Also define `m(t,i)`, which is the mean price at time `t`, but the price of the `i`th item is set equal to the price at time `t-1`. Accordingly, we write `d(t,t-1,i) = abs(m(t,i)-m(t-1))`. The rule now states that ``` 0.9 <= d(t,t-1,i)/d(t,t-1) <= 1.1 ```  We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_bep2zy7swp",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total rc,z1,total := {0,0,0}  FOR EVERY s1  IN DATASET mat_Rule03 (level1)     IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"    IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"  END  \"Check relative occurrence of value 'high'\"  IF z1 > total * 0.1 THEN rc := 1 END  RETURN rc",
      "severity": "error",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_edhoaiy540",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# define vector with T/F value for each household test := sapply(1:length(household_id), function(i){   hhid <- household_id[i]   all(1:members[i] %in% persons$person_id[persons$household_id == hhid]) })  # rule must hold for all households all(test)  ",
      "severity": "error",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_s2lvd3wcmo",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= product_id, season, price_t, quantity_t, price_t-1, quantity_t-1   DSout:=DS[filter season=\"out\"] DSr:= (DSout#price_t= DSout#price_t-1) and  (DSout#quantity_t= DSout#quantity_t-1)  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic     see page 42 VTL-part1 */ ",
      "severity": "information",
      "description": " If a product is out of season, the price and quantity must be the same as last month's values.  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_kqt4kg99bc",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover, tmp_undecided, tmp_count rc,tmp_undecided, tmp_count := {1,0,0} tmp_turnover := EMPTY    FOR EVERY tmp_turnover IN DATASET mat_Rule11 (business_id = '100' ; turnover )     IF tmp_turnover  = EMPTY      THEN tmp_undecided := 1           ELSE       IF tmp_turnover > 1000000        THEN tmp_count :=  tmp_count + 1         END    END  END   IF tmp_undecided = 1 OR  tmp_count = 1   THEN rc := 0  END    RETURN rc",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_u7rnlu0ser",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_person_id, x1 rc := 0  LOOP FOR x1 := 1 UNTIL x1 > members      IF NOT SEQUENCE (household_id, x1) IN DATASET personen (household_id , person_id )       THEN rc := 1      END    END  RETURN rc",
      "severity": "information",
      "description": " This last one is a bit complicated. It involves two files, one with households (`x`) and one with persons data (`y`). In the household file, it is registered how many members there are, say 3. It is then expected that there are persons with `person-id` 1,2,3 in the file `y`. The rule is satisfied if for all households, all person-id's can be found, and the id's have the correct values.   ``` forall x: forall n:   IF 1 <= n <= x.no_of_household_members   THEN exists y:      x.household-id = y.household-id AND y.person-id = n ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_18_expected.md) for explanation and expected results.  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_dvwi5ge8hg",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_dummy, counter rc, counter  := {0,0}    FOR EVERY tmp_dummy IN DATASET personen (household_id = household_id ; person_id )    counter := counter + 1   END     IF counter /= members      THEN rc := 1     END  RETURN rc",
      "severity": "information",
      "description": " The value for no_of_household_members must equal the number of records for each household  See also [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_17_expected.md) for a short explanation of the data files.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_xj6w010cln",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age tmp_age := EMPTY    tmp_age := DATASET mat_Rule05lb (person_id = grandchild_of ; age)  IF tmp_age - 28 < age  THEN rc := 1 END   RETURN rc",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_74g4cutr8b",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_15: postcode ~ city ",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_spy6vu4xjj",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "turnover /= cost + profit",
      "severity": "information",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_luvuaoukw2",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= id(identifier), age, grandchild_of   DSmerge:=merge(DS as \"DSgp\",DS as \"DSgc\"   on (DSgp#person-id= DSgc# grandchild_of), return (DSgc#person-id as \"person-id\", DSgc#age as \"age\"\", DSgp#age as \"gp_age\", DSgc#grandchild_of  as \"grandchild_of\")   DSr:= (DSmerge#gp_age-28) >= DSmerge#age  DSinvalid:=DS setdiff DSr[keep(person-id,age,grandchild_of)]  ",
      "severity": "warning",
      "description": " Age of grandparents – 28 >= age of their grandchildren  Missing values result in undecided. Results are reported per grandchild.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_51war9rxvj",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=id, item, price_t, price_t-1, price_Y-1   DSr1:= ((DS#price_t - DS#price_t-1) <= (DS#price_t-1 * 0.5))  and  ((DS#price_t + DS#price_Y-1) <= (DS#price_Y-1 * 0.5))  /* if a NULL value is in one of the terms of the AND the result will be as indicated in 3VL, Three-valued logic  see page 42 VTL-part1 */ ",
      "severity": "warning",
      "description": " Price change between the current month and the previous month should not exceed 50% (taking the previous value as 100%). The same must hold for the price change between the current month and the same month last year.  Missing values result in invalid   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_cjqvv6wi6e",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_AnzSst, tmp_such, tmp_level, tmp_sum, tmp_weight, hit rc,tmp_sum,hit  := {0,0,0}  tmp_AnzSst := FUNCTION LENGTH (level)  IF tmp_AnzSst IN SEQUENCE  (1,3)  THEN     FOR EVERY tmp_level, tmp_weight IN DATASET mat_Rule16 (level, weight )     IF tmp_AnzSst = 1 AND FUNCTION LENGTH (tmp_level) = 3 AND                            FUNCTION PART (tmp_level,1,1) = FUNCTION PART (level,1,1)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END     IF tmp_AnzSst = 3 AND FUNCTION LENGTH (tmp_level) = 5 AND                            FUNCTION PART (tmp_level,1,3) = FUNCTION PART (level,1,3)       THEN tmp_sum:= tmp_sum + tmp_weight             hit := 1     END   END    \"Check\"   IF tmp_sum /= weight AND hit = 1    THEN rc := 1   END  END  RETURN rc",
      "severity": "error",
      "description": " The following is a check on hierarchical aggreggation.  ``` forall k >= 1: w(x1. ... .xk) equals the sum of w(x1. ... .xk.i) forall i >= 0 ```  We assume all data is available.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "1"
  },
  {
    "id": "id_alecnwhmnr",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total rc,z1,total := {0,0,0}  FOR EVERY s1  IN DATASET mat_Rule03 (level1)     IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"    IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"  END  \"Check relative occurrence of value 'high'\"  IF z1 > total * 0.1 THEN rc := 1 END  RETURN rc",
      "severity": "error",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  },
  {
    "id": "id_c72qhsx57p",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked  DSr:= DS#hours_worked between 1 and 80 /* In case a value in hours_worked is NULL the value returned will be NULL */ . ",
      "severity": "information",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_gn43dt5qtk",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_11: sum(business_id == 100 & turnover > 1e+06) == 1 ",
      "severity": "information",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "NA"
  },
  {
    "id": "id_5ya7t68stl",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS=person-id(identifier), age  DScalc:= DS[calc   1   as   \"temp_id\"   role   \"identifier\"][keep (temp_id, age)]  DScond:= DScalc[filter age between 0 and 113]  DSr:=DScond[aggregate count(age)]= DScalc[aggregate count(include NULLS age)]  ",
      "severity": "warning",
      "description": " The `forall` quantifyer signifies that the rule is satisfied for a data set when _all_ records satisfy the rule.  ``` forall x: x.age >= 0 AND x.age <= 113 ```  Missing values result in undecided.  ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_9hvu9lcait",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_turnover  rc := 1 tmp_turnover := EMPTY  FOR EVERY tmp_turnover IN DATASET mat_Rule10 (business_id = '100' ; turnover )     IF tmp_turnover /= EMPTY AND tmp_turnover > 1000000    THEN rc := 0   END  END  RETURN rc",
      "severity": "error",
      "description": " ``` exists x: x.business-id = 100 AND x.turnover > 1.000.000 ```  We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "1"
  },
  {
    "id": "id_zlf4tyqwt8",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "turnover /= cost + profit",
      "severity": "information",
      "description": " cost + profit = turnover  Missing data results in undecided   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "0"
  },
  {
    "id": "id_otgjhvd1x8",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_age_group, tmp_gender,     male_child, female_child, male_adult, female_adult, male_senior, female_senior rc,male_child, female_child,male_adult,female_adult,male_senior,female_senior  := {0,0,0,0,0,0,0}    FOR EVERY tmp_gender , tmp_age_group IN DATASET mat_Rule14 (gender , age_group)    IF tmp_gender = 'male'   AND tmp_age_group = 'child'  THEN male_child    := male_child    + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'child'  THEN female_child  := female_child  + 1 END    IF tmp_gender = 'male'   AND tmp_age_group = 'adult'  THEN male_adult    := male_adult    + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'adult'  THEN female_adult  := female_adult  + 1 END    IF tmp_gender = 'male'   AND tmp_age_group = 'senior' THEN male_senior   := male_senior   + 1 END    IF tmp_gender = 'female' AND tmp_age_group = 'senior' THEN female_senior := female_senior + 1 END    END     IF male_child = 0 OR female_child = 0 OR male_adult = 0 OR female_adult = 0 OR male_senior = 0 OR female_senior = 0       THEN rc := 1     END   RETURN rc",
      "severity": "error",
      "description": " Every combination of sex and age group occurs at least once in the data set.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  "
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "NA"
  },
  {
    "id": "id_hatjhtvsko",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# def_counts: counts :=  table(gender, age_group)  # rule_13: all(counts <= 1) ",
      "severity": "error",
      "description": " The combination of sex and age group in the data set is unique, i.e., there do not exist two distinct records in the data set with an identical combination of values for sex and age group.  - sex groups: `male`, `female` - age groups: `child`, `adult`, `senior`   We assume all data is available.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_343mhbtcoz",
    "type": "validation",
    "rule": {
      "language": "validate",
      "expression": "# rule_08: year_of_birth == persons$year_of_birth ",
      "severity": "information",
      "description": " Year of birth in household questionnaire must equal year of birth in individual questionnaire  Missing values result in undecided.  Results are reported per person.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "R package validate version 0.2.0",
      "agent": "CBS",
      "trigger": "John Statistician"
    },
    "data": {
      "source": [
        "Enterprises",
        "Survey_23",
        "SuccesfulStartup",
        "Nr_employees"
      ],
      "target": null,
      "description": "a record on employees of a startup"
    },
    "value": "1"
  },
  {
    "id": "id_ped17ym4tr",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, tmp_city, counter rc, counter  := {0,0}    FOR EVERY tmp_city IN DATASET mat_Rule15 (postcode = postcode ; city )    IF city /= tmp_city      THEN rc := 1     END  END RETURN rc",
      "severity": "information",
      "description": " If two records have the same postal code, they must have the same value for `city`. Below, this is expressed as a [functional dependency](https://en.wikipedia.org/wiki/Functional_dependency)  ``` postal_code --> city ```  See [this file](https://github.com/data-cleaning/ValidatPoC/blob/master/data/Rule_15_expected.md) for the expected conflicts and how to handle missing cases.   ",
      "change": "down",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "Jim",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data"
    },
    "value": "NA"
  },
  {
    "id": "id_u0lbo35rrs",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DScalc:= DS[calc   1   as   \"temp_id\"    role    \"identifier\"]  DScond:= DScalc[filter  business_id=100 and turnover>1000000]  DSr:= DScond[keep  (temp_id,business_id)][aggregate  count  (business_id)] = 1 ",
      "severity": "error",
      "description": " The `exists!` quantifier signifies 'there exists exactly one'.   ``` exists! x: x.business-id = 100 AND x.turnover > 1.000.000 ```  A missing value resuls in undecided, except when the truth value can be determined regardless of the missing value.   ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "STRUVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "0"
  },
  {
    "id": "id_cerq9rfwoc",
    "type": "validation",
    "rule": {
      "language": "VTL 1.0",
      "expression": "DS= person-id, hours_worked  DSr:= DS#hours_worked between 1 and 80 /* In case a value in hours_worked is NULL the value returned will be NULL */ . ",
      "severity": "information",
      "description": " Number of hours per week usually worked should be between 1 and 80  Missing data results in undecided.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "CONVAL",
      "agent": "Eurostat",
      "trigger": "Jim Statistician"
    },
    "data": {
      "source": [
        "WC001",
        "WC002",
        "WC003",
        "WC004"
      ],
      "target": null,
      "description": "Record from a EU member state"
    },
    "value": "0"
  },
  {
    "id": "id_tgpy3yzjar",
    "type": "validation",
    "rule": {
      "language": "Estatistik",
      "expression": "DECLARE rc, s1  , z1 , total rc,z1,total := {0,0,0}  FOR EVERY s1  IN DATASET mat_Rule03 (level1)     IF s1 /= 'NA' THEN  total := total + 1 END \"count records that contain any valid value \"    IF s1  = 'high' THEN z1 := z1 + 1   END    \"count records that contain value \"high\"  END  \"Check relative occurrence of value 'high'\"  IF z1 > total * 0.1 THEN rc := 1 END  RETURN rc",
      "severity": "error",
      "description": " Check whether the relative occurrence of the category `high` in a column containing values `low`, `high`, `medium` does not exceed 10%.  Missing values are ignored when determining the relative occurrences.  ",
      "change": "up",
      "explanation": "This value has been checked manually and the exception is statistically correct"
    },
    "event": {
      "time": "2017-09-01T07:51:44.943Z",
      "actor": "Data Entry System",
      "agent": "Destatis",
      "trigger": "Lucas Statistician"
    },
    "data": {
      "source": [
        "Inhabitants",
        "EU-SILC",
        "John",
        "Income"
      ],
      "target": null,
      "description": "synthetic income data nr2"
    },
    "value": "1"
  }
]
